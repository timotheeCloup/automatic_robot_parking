
Robot3_F103RB_origin.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006a74  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  08006b80  08006b80  00016b80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006ba8  08006ba8  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08006ba8  08006ba8  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006ba8  08006ba8  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006ba8  08006ba8  00016ba8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006bac  08006bac  00016bac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08006bb0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002d4  20000010  08006bc0  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002e4  08006bc0  000202e4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020039  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000e1a1  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002aab  00000000  00000000  0002e21d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f18  00000000  00000000  00030cc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000b7c  00000000  00000000  00031be0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00015a89  00000000  00000000  0003275c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000ff52  00000000  00000000  000481e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00077458  00000000  00000000  00058137  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003cc8  00000000  00000000  000cf590  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008c  00000000  00000000  000d3258  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000010 	.word	0x20000010
 8000128:	00000000 	.word	0x00000000
 800012c:	08006b68 	.word	0x08006b68

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000014 	.word	0x20000014
 8000148:	08006b68 	.word	0x08006b68

0800014c <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b08a      	sub	sp, #40	; 0x28
 8000150:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_AnalogWDGConfTypeDef AnalogWDGConfig = {0};
 8000152:	f107 0310 	add.w	r3, r7, #16
 8000156:	2200      	movs	r2, #0
 8000158:	601a      	str	r2, [r3, #0]
 800015a:	605a      	str	r2, [r3, #4]
 800015c:	609a      	str	r2, [r3, #8]
 800015e:	60da      	str	r2, [r3, #12]
 8000160:	611a      	str	r2, [r3, #16]
 8000162:	615a      	str	r2, [r3, #20]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000164:	1d3b      	adds	r3, r7, #4
 8000166:	2200      	movs	r2, #0
 8000168:	601a      	str	r2, [r3, #0]
 800016a:	605a      	str	r2, [r3, #4]
 800016c:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800016e:	4b42      	ldr	r3, [pc, #264]	; (8000278 <MX_ADC1_Init+0x12c>)
 8000170:	4a42      	ldr	r2, [pc, #264]	; (800027c <MX_ADC1_Init+0x130>)
 8000172:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000174:	4b40      	ldr	r3, [pc, #256]	; (8000278 <MX_ADC1_Init+0x12c>)
 8000176:	f44f 7280 	mov.w	r2, #256	; 0x100
 800017a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800017c:	4b3e      	ldr	r3, [pc, #248]	; (8000278 <MX_ADC1_Init+0x12c>)
 800017e:	2200      	movs	r2, #0
 8000180:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000182:	4b3d      	ldr	r3, [pc, #244]	; (8000278 <MX_ADC1_Init+0x12c>)
 8000184:	2200      	movs	r2, #0
 8000186:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000188:	4b3b      	ldr	r3, [pc, #236]	; (8000278 <MX_ADC1_Init+0x12c>)
 800018a:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800018e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000190:	4b39      	ldr	r3, [pc, #228]	; (8000278 <MX_ADC1_Init+0x12c>)
 8000192:	2200      	movs	r2, #0
 8000194:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 5;
 8000196:	4b38      	ldr	r3, [pc, #224]	; (8000278 <MX_ADC1_Init+0x12c>)
 8000198:	2205      	movs	r2, #5
 800019a:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800019c:	4836      	ldr	r0, [pc, #216]	; (8000278 <MX_ADC1_Init+0x12c>)
 800019e:	f002 fe05 	bl	8002dac <HAL_ADC_Init>
 80001a2:	4603      	mov	r3, r0
 80001a4:	2b00      	cmp	r3, #0
 80001a6:	d001      	beq.n	80001ac <MX_ADC1_Init+0x60>
  {
    Error_Handler();
 80001a8:	f002 f83e 	bl	8002228 <Error_Handler>
  }

  /** Configure Analog WatchDog 1
  */
  AnalogWDGConfig.WatchdogMode = ADC_ANALOGWATCHDOG_SINGLE_REG;
 80001ac:	4b34      	ldr	r3, [pc, #208]	; (8000280 <MX_ADC1_Init+0x134>)
 80001ae:	613b      	str	r3, [r7, #16]
  AnalogWDGConfig.HighThreshold = 3200;
 80001b0:	f44f 6348 	mov.w	r3, #3200	; 0xc80
 80001b4:	61fb      	str	r3, [r7, #28]
  AnalogWDGConfig.LowThreshold = 3000;
 80001b6:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80001ba:	623b      	str	r3, [r7, #32]
  AnalogWDGConfig.Channel = ADC_CHANNEL_15;
 80001bc:	230f      	movs	r3, #15
 80001be:	617b      	str	r3, [r7, #20]
  AnalogWDGConfig.ITMode = ENABLE;
 80001c0:	2301      	movs	r3, #1
 80001c2:	763b      	strb	r3, [r7, #24]
  if (HAL_ADC_AnalogWDGConfig(&hadc1, &AnalogWDGConfig) != HAL_OK)
 80001c4:	f107 0310 	add.w	r3, r7, #16
 80001c8:	4619      	mov	r1, r3
 80001ca:	482b      	ldr	r0, [pc, #172]	; (8000278 <MX_ADC1_Init+0x12c>)
 80001cc:	f003 f9b6 	bl	800353c <HAL_ADC_AnalogWDGConfig>
 80001d0:	4603      	mov	r3, r0
 80001d2:	2b00      	cmp	r3, #0
 80001d4:	d001      	beq.n	80001da <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 80001d6:	f002 f827 	bl	8002228 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80001da:	2309      	movs	r3, #9
 80001dc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80001de:	2301      	movs	r3, #1
 80001e0:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 80001e2:	2307      	movs	r3, #7
 80001e4:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80001e6:	1d3b      	adds	r3, r7, #4
 80001e8:	4619      	mov	r1, r3
 80001ea:	4823      	ldr	r0, [pc, #140]	; (8000278 <MX_ADC1_Init+0x12c>)
 80001ec:	f003 f8ae 	bl	800334c <HAL_ADC_ConfigChannel>
 80001f0:	4603      	mov	r3, r0
 80001f2:	2b00      	cmp	r3, #0
 80001f4:	d001      	beq.n	80001fa <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 80001f6:	f002 f817 	bl	8002228 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_12;
 80001fa:	230c      	movs	r3, #12
 80001fc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80001fe:	2302      	movs	r3, #2
 8000200:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000202:	1d3b      	adds	r3, r7, #4
 8000204:	4619      	mov	r1, r3
 8000206:	481c      	ldr	r0, [pc, #112]	; (8000278 <MX_ADC1_Init+0x12c>)
 8000208:	f003 f8a0 	bl	800334c <HAL_ADC_ConfigChannel>
 800020c:	4603      	mov	r3, r0
 800020e:	2b00      	cmp	r3, #0
 8000210:	d001      	beq.n	8000216 <MX_ADC1_Init+0xca>
  {
    Error_Handler();
 8000212:	f002 f809 	bl	8002228 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8000216:	230d      	movs	r3, #13
 8000218:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800021a:	2303      	movs	r3, #3
 800021c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800021e:	1d3b      	adds	r3, r7, #4
 8000220:	4619      	mov	r1, r3
 8000222:	4815      	ldr	r0, [pc, #84]	; (8000278 <MX_ADC1_Init+0x12c>)
 8000224:	f003 f892 	bl	800334c <HAL_ADC_ConfigChannel>
 8000228:	4603      	mov	r3, r0
 800022a:	2b00      	cmp	r3, #0
 800022c:	d001      	beq.n	8000232 <MX_ADC1_Init+0xe6>
  {
    Error_Handler();
 800022e:	f001 fffb 	bl	8002228 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8000232:	230e      	movs	r3, #14
 8000234:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000236:	2304      	movs	r3, #4
 8000238:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800023a:	1d3b      	adds	r3, r7, #4
 800023c:	4619      	mov	r1, r3
 800023e:	480e      	ldr	r0, [pc, #56]	; (8000278 <MX_ADC1_Init+0x12c>)
 8000240:	f003 f884 	bl	800334c <HAL_ADC_ConfigChannel>
 8000244:	4603      	mov	r3, r0
 8000246:	2b00      	cmp	r3, #0
 8000248:	d001      	beq.n	800024e <MX_ADC1_Init+0x102>
  {
    Error_Handler();
 800024a:	f001 ffed 	bl	8002228 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 800024e:	230f      	movs	r3, #15
 8000250:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8000252:	2305      	movs	r3, #5
 8000254:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000256:	2300      	movs	r3, #0
 8000258:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800025a:	1d3b      	adds	r3, r7, #4
 800025c:	4619      	mov	r1, r3
 800025e:	4806      	ldr	r0, [pc, #24]	; (8000278 <MX_ADC1_Init+0x12c>)
 8000260:	f003 f874 	bl	800334c <HAL_ADC_ConfigChannel>
 8000264:	4603      	mov	r3, r0
 8000266:	2b00      	cmp	r3, #0
 8000268:	d001      	beq.n	800026e <MX_ADC1_Init+0x122>
  {
    Error_Handler();
 800026a:	f001 ffdd 	bl	8002228 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800026e:	bf00      	nop
 8000270:	3728      	adds	r7, #40	; 0x28
 8000272:	46bd      	mov	sp, r7
 8000274:	bd80      	pop	{r7, pc}
 8000276:	bf00      	nop
 8000278:	2000002c 	.word	0x2000002c
 800027c:	40012400 	.word	0x40012400
 8000280:	00800200 	.word	0x00800200

08000284 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000284:	b580      	push	{r7, lr}
 8000286:	b08a      	sub	sp, #40	; 0x28
 8000288:	af00      	add	r7, sp, #0
 800028a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800028c:	f107 0318 	add.w	r3, r7, #24
 8000290:	2200      	movs	r2, #0
 8000292:	601a      	str	r2, [r3, #0]
 8000294:	605a      	str	r2, [r3, #4]
 8000296:	609a      	str	r2, [r3, #8]
 8000298:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 800029a:	687b      	ldr	r3, [r7, #4]
 800029c:	681b      	ldr	r3, [r3, #0]
 800029e:	4a37      	ldr	r2, [pc, #220]	; (800037c <HAL_ADC_MspInit+0xf8>)
 80002a0:	4293      	cmp	r3, r2
 80002a2:	d167      	bne.n	8000374 <HAL_ADC_MspInit+0xf0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80002a4:	4b36      	ldr	r3, [pc, #216]	; (8000380 <HAL_ADC_MspInit+0xfc>)
 80002a6:	699b      	ldr	r3, [r3, #24]
 80002a8:	4a35      	ldr	r2, [pc, #212]	; (8000380 <HAL_ADC_MspInit+0xfc>)
 80002aa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80002ae:	6193      	str	r3, [r2, #24]
 80002b0:	4b33      	ldr	r3, [pc, #204]	; (8000380 <HAL_ADC_MspInit+0xfc>)
 80002b2:	699b      	ldr	r3, [r3, #24]
 80002b4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80002b8:	617b      	str	r3, [r7, #20]
 80002ba:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80002bc:	4b30      	ldr	r3, [pc, #192]	; (8000380 <HAL_ADC_MspInit+0xfc>)
 80002be:	699b      	ldr	r3, [r3, #24]
 80002c0:	4a2f      	ldr	r2, [pc, #188]	; (8000380 <HAL_ADC_MspInit+0xfc>)
 80002c2:	f043 0310 	orr.w	r3, r3, #16
 80002c6:	6193      	str	r3, [r2, #24]
 80002c8:	4b2d      	ldr	r3, [pc, #180]	; (8000380 <HAL_ADC_MspInit+0xfc>)
 80002ca:	699b      	ldr	r3, [r3, #24]
 80002cc:	f003 0310 	and.w	r3, r3, #16
 80002d0:	613b      	str	r3, [r7, #16]
 80002d2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80002d4:	4b2a      	ldr	r3, [pc, #168]	; (8000380 <HAL_ADC_MspInit+0xfc>)
 80002d6:	699b      	ldr	r3, [r3, #24]
 80002d8:	4a29      	ldr	r2, [pc, #164]	; (8000380 <HAL_ADC_MspInit+0xfc>)
 80002da:	f043 0308 	orr.w	r3, r3, #8
 80002de:	6193      	str	r3, [r2, #24]
 80002e0:	4b27      	ldr	r3, [pc, #156]	; (8000380 <HAL_ADC_MspInit+0xfc>)
 80002e2:	699b      	ldr	r3, [r3, #24]
 80002e4:	f003 0308 	and.w	r3, r3, #8
 80002e8:	60fb      	str	r3, [r7, #12]
 80002ea:	68fb      	ldr	r3, [r7, #12]
    PC3     ------> ADC1_IN13
    PC4     ------> ADC1_IN14
    PC5     ------> ADC1_IN15
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = IR1_in_Pin|IR2_in_Pin|IR4_in_Pin|GPIO_PIN_5;
 80002ec:	233c      	movs	r3, #60	; 0x3c
 80002ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80002f0:	2303      	movs	r3, #3
 80002f2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80002f4:	f107 0318 	add.w	r3, r7, #24
 80002f8:	4619      	mov	r1, r3
 80002fa:	4822      	ldr	r0, [pc, #136]	; (8000384 <HAL_ADC_MspInit+0x100>)
 80002fc:	f003 fe1c 	bl	8003f38 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = IR3_in_Pin;
 8000300:	2302      	movs	r3, #2
 8000302:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000304:	2303      	movs	r3, #3
 8000306:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(IR3_in_GPIO_Port, &GPIO_InitStruct);
 8000308:	f107 0318 	add.w	r3, r7, #24
 800030c:	4619      	mov	r1, r3
 800030e:	481e      	ldr	r0, [pc, #120]	; (8000388 <HAL_ADC_MspInit+0x104>)
 8000310:	f003 fe12 	bl	8003f38 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000314:	4b1d      	ldr	r3, [pc, #116]	; (800038c <HAL_ADC_MspInit+0x108>)
 8000316:	4a1e      	ldr	r2, [pc, #120]	; (8000390 <HAL_ADC_MspInit+0x10c>)
 8000318:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800031a:	4b1c      	ldr	r3, [pc, #112]	; (800038c <HAL_ADC_MspInit+0x108>)
 800031c:	2200      	movs	r2, #0
 800031e:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000320:	4b1a      	ldr	r3, [pc, #104]	; (800038c <HAL_ADC_MspInit+0x108>)
 8000322:	2200      	movs	r2, #0
 8000324:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000326:	4b19      	ldr	r3, [pc, #100]	; (800038c <HAL_ADC_MspInit+0x108>)
 8000328:	2280      	movs	r2, #128	; 0x80
 800032a:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800032c:	4b17      	ldr	r3, [pc, #92]	; (800038c <HAL_ADC_MspInit+0x108>)
 800032e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000332:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000334:	4b15      	ldr	r3, [pc, #84]	; (800038c <HAL_ADC_MspInit+0x108>)
 8000336:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800033a:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800033c:	4b13      	ldr	r3, [pc, #76]	; (800038c <HAL_ADC_MspInit+0x108>)
 800033e:	2220      	movs	r2, #32
 8000340:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000342:	4b12      	ldr	r3, [pc, #72]	; (800038c <HAL_ADC_MspInit+0x108>)
 8000344:	2200      	movs	r2, #0
 8000346:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000348:	4810      	ldr	r0, [pc, #64]	; (800038c <HAL_ADC_MspInit+0x108>)
 800034a:	f003 fb57 	bl	80039fc <HAL_DMA_Init>
 800034e:	4603      	mov	r3, r0
 8000350:	2b00      	cmp	r3, #0
 8000352:	d001      	beq.n	8000358 <HAL_ADC_MspInit+0xd4>
    {
      Error_Handler();
 8000354:	f001 ff68 	bl	8002228 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000358:	687b      	ldr	r3, [r7, #4]
 800035a:	4a0c      	ldr	r2, [pc, #48]	; (800038c <HAL_ADC_MspInit+0x108>)
 800035c:	621a      	str	r2, [r3, #32]
 800035e:	4a0b      	ldr	r2, [pc, #44]	; (800038c <HAL_ADC_MspInit+0x108>)
 8000360:	687b      	ldr	r3, [r7, #4]
 8000362:	6253      	str	r3, [r2, #36]	; 0x24

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8000364:	2200      	movs	r2, #0
 8000366:	2100      	movs	r1, #0
 8000368:	2012      	movs	r0, #18
 800036a:	f003 fb10 	bl	800398e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 800036e:	2012      	movs	r0, #18
 8000370:	f003 fb29 	bl	80039c6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000374:	bf00      	nop
 8000376:	3728      	adds	r7, #40	; 0x28
 8000378:	46bd      	mov	sp, r7
 800037a:	bd80      	pop	{r7, pc}
 800037c:	40012400 	.word	0x40012400
 8000380:	40021000 	.word	0x40021000
 8000384:	40011000 	.word	0x40011000
 8000388:	40010c00 	.word	0x40010c00
 800038c:	2000005c 	.word	0x2000005c
 8000390:	40020008 	.word	0x40020008

08000394 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000394:	b580      	push	{r7, lr}
 8000396:	b082      	sub	sp, #8
 8000398:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800039a:	4b0c      	ldr	r3, [pc, #48]	; (80003cc <MX_DMA_Init+0x38>)
 800039c:	695b      	ldr	r3, [r3, #20]
 800039e:	4a0b      	ldr	r2, [pc, #44]	; (80003cc <MX_DMA_Init+0x38>)
 80003a0:	f043 0301 	orr.w	r3, r3, #1
 80003a4:	6153      	str	r3, [r2, #20]
 80003a6:	4b09      	ldr	r3, [pc, #36]	; (80003cc <MX_DMA_Init+0x38>)
 80003a8:	695b      	ldr	r3, [r3, #20]
 80003aa:	f003 0301 	and.w	r3, r3, #1
 80003ae:	607b      	str	r3, [r7, #4]
 80003b0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80003b2:	2200      	movs	r2, #0
 80003b4:	2100      	movs	r1, #0
 80003b6:	200b      	movs	r0, #11
 80003b8:	f003 fae9 	bl	800398e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80003bc:	200b      	movs	r0, #11
 80003be:	f003 fb02 	bl	80039c6 <HAL_NVIC_EnableIRQ>

}
 80003c2:	bf00      	nop
 80003c4:	3708      	adds	r7, #8
 80003c6:	46bd      	mov	sp, r7
 80003c8:	bd80      	pop	{r7, pc}
 80003ca:	bf00      	nop
 80003cc:	40021000 	.word	0x40021000

080003d0 <MX_GPIO_Init>:
        * the Code Generation settings)
     PA2   ------> USART2_TX
     PA3   ------> USART2_RX
*/
void MX_GPIO_Init(void)
{
 80003d0:	b580      	push	{r7, lr}
 80003d2:	b088      	sub	sp, #32
 80003d4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003d6:	f107 0310 	add.w	r3, r7, #16
 80003da:	2200      	movs	r2, #0
 80003dc:	601a      	str	r2, [r3, #0]
 80003de:	605a      	str	r2, [r3, #4]
 80003e0:	609a      	str	r2, [r3, #8]
 80003e2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80003e4:	4b5a      	ldr	r3, [pc, #360]	; (8000550 <MX_GPIO_Init+0x180>)
 80003e6:	699b      	ldr	r3, [r3, #24]
 80003e8:	4a59      	ldr	r2, [pc, #356]	; (8000550 <MX_GPIO_Init+0x180>)
 80003ea:	f043 0310 	orr.w	r3, r3, #16
 80003ee:	6193      	str	r3, [r2, #24]
 80003f0:	4b57      	ldr	r3, [pc, #348]	; (8000550 <MX_GPIO_Init+0x180>)
 80003f2:	699b      	ldr	r3, [r3, #24]
 80003f4:	f003 0310 	and.w	r3, r3, #16
 80003f8:	60fb      	str	r3, [r7, #12]
 80003fa:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80003fc:	4b54      	ldr	r3, [pc, #336]	; (8000550 <MX_GPIO_Init+0x180>)
 80003fe:	699b      	ldr	r3, [r3, #24]
 8000400:	4a53      	ldr	r2, [pc, #332]	; (8000550 <MX_GPIO_Init+0x180>)
 8000402:	f043 0320 	orr.w	r3, r3, #32
 8000406:	6193      	str	r3, [r2, #24]
 8000408:	4b51      	ldr	r3, [pc, #324]	; (8000550 <MX_GPIO_Init+0x180>)
 800040a:	699b      	ldr	r3, [r3, #24]
 800040c:	f003 0320 	and.w	r3, r3, #32
 8000410:	60bb      	str	r3, [r7, #8]
 8000412:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000414:	4b4e      	ldr	r3, [pc, #312]	; (8000550 <MX_GPIO_Init+0x180>)
 8000416:	699b      	ldr	r3, [r3, #24]
 8000418:	4a4d      	ldr	r2, [pc, #308]	; (8000550 <MX_GPIO_Init+0x180>)
 800041a:	f043 0304 	orr.w	r3, r3, #4
 800041e:	6193      	str	r3, [r2, #24]
 8000420:	4b4b      	ldr	r3, [pc, #300]	; (8000550 <MX_GPIO_Init+0x180>)
 8000422:	699b      	ldr	r3, [r3, #24]
 8000424:	f003 0304 	and.w	r3, r3, #4
 8000428:	607b      	str	r3, [r7, #4]
 800042a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800042c:	4b48      	ldr	r3, [pc, #288]	; (8000550 <MX_GPIO_Init+0x180>)
 800042e:	699b      	ldr	r3, [r3, #24]
 8000430:	4a47      	ldr	r2, [pc, #284]	; (8000550 <MX_GPIO_Init+0x180>)
 8000432:	f043 0308 	orr.w	r3, r3, #8
 8000436:	6193      	str	r3, [r2, #24]
 8000438:	4b45      	ldr	r3, [pc, #276]	; (8000550 <MX_GPIO_Init+0x180>)
 800043a:	699b      	ldr	r3, [r3, #24]
 800043c:	f003 0308 	and.w	r3, r3, #8
 8000440:	603b      	str	r3, [r7, #0]
 8000442:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|IR3_out_Pin, GPIO_PIN_RESET);
 8000444:	2200      	movs	r2, #0
 8000446:	f44f 5181 	mov.w	r1, #4128	; 0x1020
 800044a:	4842      	ldr	r0, [pc, #264]	; (8000554 <MX_GPIO_Init+0x184>)
 800044c:	f003 fef8 	bl	8004240 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DIR2_Pin|IR1_out_Pin|IR4_out_Pin|IR2_out_Pin, GPIO_PIN_RESET);
 8000450:	2200      	movs	r2, #0
 8000452:	f24d 0104 	movw	r1, #53252	; 0xd004
 8000456:	4840      	ldr	r0, [pc, #256]	; (8000558 <MX_GPIO_Init+0x188>)
 8000458:	f003 fef2 	bl	8004240 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DIR1_GPIO_Port, DIR1_Pin, GPIO_PIN_RESET);
 800045c:	2200      	movs	r2, #0
 800045e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000462:	483e      	ldr	r0, [pc, #248]	; (800055c <MX_GPIO_Init+0x18c>)
 8000464:	f003 feec 	bl	8004240 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000468:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800046c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800046e:	4b3c      	ldr	r3, [pc, #240]	; (8000560 <MX_GPIO_Init+0x190>)
 8000470:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000472:	2300      	movs	r3, #0
 8000474:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000476:	f107 0310 	add.w	r3, r7, #16
 800047a:	4619      	mov	r1, r3
 800047c:	4837      	ldr	r0, [pc, #220]	; (800055c <MX_GPIO_Init+0x18c>)
 800047e:	f003 fd5b 	bl	8003f38 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC6 PC7
                           PC9 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_6|GPIO_PIN_7
 8000482:	f241 23c3 	movw	r3, #4803	; 0x12c3
 8000486:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_9|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000488:	2303      	movs	r3, #3
 800048a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800048c:	f107 0310 	add.w	r3, r7, #16
 8000490:	4619      	mov	r1, r3
 8000492:	4832      	ldr	r0, [pc, #200]	; (800055c <MX_GPIO_Init+0x18c>)
 8000494:	f003 fd50 	bl	8003f38 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA4 PA6
                           PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_6
 8000498:	23d3      	movs	r3, #211	; 0xd3
 800049a:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800049c:	2303      	movs	r3, #3
 800049e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004a0:	f107 0310 	add.w	r3, r7, #16
 80004a4:	4619      	mov	r1, r3
 80004a6:	482b      	ldr	r0, [pc, #172]	; (8000554 <MX_GPIO_Init+0x184>)
 80004a8:	f003 fd46 	bl	8003f38 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80004ac:	230c      	movs	r3, #12
 80004ae:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80004b0:	2302      	movs	r3, #2
 80004b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004b4:	2302      	movs	r3, #2
 80004b6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004b8:	f107 0310 	add.w	r3, r7, #16
 80004bc:	4619      	mov	r1, r3
 80004be:	4825      	ldr	r0, [pc, #148]	; (8000554 <MX_GPIO_Init+0x184>)
 80004c0:	f003 fd3a 	bl	8003f38 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = LD2_Pin|IR3_out_Pin;
 80004c4:	f44f 5381 	mov.w	r3, #4128	; 0x1020
 80004c8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004ca:	2301      	movs	r3, #1
 80004cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004ce:	2300      	movs	r3, #0
 80004d0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004d2:	2302      	movs	r3, #2
 80004d4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004d6:	f107 0310 	add.w	r3, r7, #16
 80004da:	4619      	mov	r1, r3
 80004dc:	481d      	ldr	r0, [pc, #116]	; (8000554 <MX_GPIO_Init+0x184>)
 80004de:	f003 fd2b 	bl	8003f38 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB10 PB13 PB8
                           PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_10|GPIO_PIN_13|GPIO_PIN_8
 80004e2:	f242 7301 	movw	r3, #9985	; 0x2701
 80004e6:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80004e8:	2303      	movs	r3, #3
 80004ea:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80004ec:	f107 0310 	add.w	r3, r7, #16
 80004f0:	4619      	mov	r1, r3
 80004f2:	4819      	ldr	r0, [pc, #100]	; (8000558 <MX_GPIO_Init+0x188>)
 80004f4:	f003 fd20 	bl	8003f38 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = DIR2_Pin|IR1_out_Pin|IR4_out_Pin|IR2_out_Pin;
 80004f8:	f24d 0304 	movw	r3, #53252	; 0xd004
 80004fc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004fe:	2301      	movs	r3, #1
 8000500:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000502:	2300      	movs	r3, #0
 8000504:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000506:	2302      	movs	r3, #2
 8000508:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800050a:	f107 0310 	add.w	r3, r7, #16
 800050e:	4619      	mov	r1, r3
 8000510:	4811      	ldr	r0, [pc, #68]	; (8000558 <MX_GPIO_Init+0x188>)
 8000512:	f003 fd11 	bl	8003f38 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DIR1_Pin;
 8000516:	f44f 7380 	mov.w	r3, #256	; 0x100
 800051a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800051c:	2301      	movs	r3, #1
 800051e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000520:	2300      	movs	r3, #0
 8000522:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000524:	2302      	movs	r3, #2
 8000526:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DIR1_GPIO_Port, &GPIO_InitStruct);
 8000528:	f107 0310 	add.w	r3, r7, #16
 800052c:	4619      	mov	r1, r3
 800052e:	480b      	ldr	r0, [pc, #44]	; (800055c <MX_GPIO_Init+0x18c>)
 8000530:	f003 fd02 	bl	8003f38 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000534:	2304      	movs	r3, #4
 8000536:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000538:	2303      	movs	r3, #3
 800053a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800053c:	f107 0310 	add.w	r3, r7, #16
 8000540:	4619      	mov	r1, r3
 8000542:	4808      	ldr	r0, [pc, #32]	; (8000564 <MX_GPIO_Init+0x194>)
 8000544:	f003 fcf8 	bl	8003f38 <HAL_GPIO_Init>

}
 8000548:	bf00      	nop
 800054a:	3720      	adds	r7, #32
 800054c:	46bd      	mov	sp, r7
 800054e:	bd80      	pop	{r7, pc}
 8000550:	40021000 	.word	0x40021000
 8000554:	40010800 	.word	0x40010800
 8000558:	40010c00 	.word	0x40010c00
 800055c:	40011000 	.word	0x40011000
 8000560:	10210000 	.word	0x10210000
 8000564:	40011400 	.word	0x40011400

08000568 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	b082      	sub	sp, #8
 800056c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800056e:	f002 fbad 	bl	8002ccc <HAL_Init>

  /* USER CODE BEGIN Init */
  Dist_Obst = 0;
 8000572:	4b2a      	ldr	r3, [pc, #168]	; (800061c <main+0xb4>)
 8000574:	2200      	movs	r2, #0
 8000576:	601a      	str	r2, [r3, #0]


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000578:	f000 f862 	bl	8000640 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800057c:	f7ff ff28 	bl	80003d0 <MX_GPIO_Init>
  MX_DMA_Init();
 8000580:	f7ff ff08 	bl	8000394 <MX_DMA_Init>
  MX_ADC1_Init();
 8000584:	f7ff fde2 	bl	800014c <MX_ADC1_Init>
  MX_TIM2_Init();
 8000588:	f001 ffd6 	bl	8002538 <MX_TIM2_Init>
  MX_TIM3_Init();
 800058c:	f002 f86c 	bl	8002668 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000590:	f002 f8be 	bl	8002710 <MX_TIM4_Init>
  MX_USART3_UART_Init();
 8000594:	f002 faa6 	bl	8002ae4 <MX_USART3_UART_Init>
  MX_TIM1_Init();
 8000598:	f001 fefc 	bl	8002394 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 800059c:	f002 fa78 	bl	8002a90 <MX_USART1_UART_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 80005a0:	f000 f8a5 	bl	80006ee <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  HAL_SuspendTick(); // suppresion des Tick interrupt pour le mode sleep.
 80005a4:	f002 fbf4 	bl	8002d90 <HAL_SuspendTick>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);  // Start PWM motor
 80005a8:	210c      	movs	r1, #12
 80005aa:	481d      	ldr	r0, [pc, #116]	; (8000620 <main+0xb8>)
 80005ac:	f004 fc12 	bl	8004dd4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80005b0:	2100      	movs	r1, #0
 80005b2:	481b      	ldr	r0, [pc, #108]	; (8000620 <main+0xb8>)
 80005b4:	f004 fc0e 	bl	8004dd4 <HAL_TIM_PWM_Start>
  CMDE = STOP;
 80005b8:	4b1a      	ldr	r3, [pc, #104]	; (8000624 <main+0xbc>)
 80005ba:	2201      	movs	r2, #1
 80005bc:	701a      	strb	r2, [r3, #0]
  New_CMDE = 1;
 80005be:	4b1a      	ldr	r3, [pc, #104]	; (8000628 <main+0xc0>)
 80005c0:	2201      	movs	r2, #1
 80005c2:	701a      	strb	r2, [r3, #0]
  HAL_TIM_Base_Start_IT(&htim2);  // Start IT sur font montant PWM
 80005c4:	4816      	ldr	r0, [pc, #88]	; (8000620 <main+0xb8>)
 80005c6:	f004 fb82 	bl	8004cce <HAL_TIM_Base_Start_IT>
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 80005ca:	213c      	movs	r1, #60	; 0x3c
 80005cc:	4817      	ldr	r0, [pc, #92]	; (800062c <main+0xc4>)
 80005ce:	f004 fda9 	bl	8005124 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 80005d2:	213c      	movs	r1, #60	; 0x3c
 80005d4:	4816      	ldr	r0, [pc, #88]	; (8000630 <main+0xc8>)
 80005d6:	f004 fda5 	bl	8005124 <HAL_TIM_Encoder_Start>
  HAL_UART_Receive_IT(&huart3, &BLUE_RX, 1);
 80005da:	2201      	movs	r2, #1
 80005dc:	4915      	ldr	r1, [pc, #84]	; (8000634 <main+0xcc>)
 80005de:	4816      	ldr	r0, [pc, #88]	; (8000638 <main+0xd0>)
 80005e0:	f005 ff3b 	bl	800645a <HAL_UART_Receive_IT>
  HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_2);
 80005e4:	2104      	movs	r1, #4
 80005e6:	4815      	ldr	r0, [pc, #84]	; (800063c <main+0xd4>)
 80005e8:	f004 fca6 	bl	8004f38 <HAL_TIM_IC_Start_IT>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 80005ec:	210c      	movs	r1, #12
 80005ee:	4813      	ldr	r0, [pc, #76]	; (800063c <main+0xd4>)
 80005f0:	f004 fbf0 	bl	8004dd4 <HAL_TIM_PWM_Start>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  SonarStart();
 80005f4:	f001 fb1a 	bl	8001c2c <SonarStart>
  for (uint8_t i=0; i<5; i++){
 80005f8:	2300      	movs	r3, #0
 80005fa:	71fb      	strb	r3, [r7, #7]
 80005fc:	e004      	b.n	8000608 <main+0xa0>
	  SonarDistance();
 80005fe:	f001 fda9 	bl	8002154 <SonarDistance>
  for (uint8_t i=0; i<5; i++){
 8000602:	79fb      	ldrb	r3, [r7, #7]
 8000604:	3301      	adds	r3, #1
 8000606:	71fb      	strb	r3, [r7, #7]
 8000608:	79fb      	ldrb	r3, [r7, #7]
 800060a:	2b04      	cmp	r3, #4
 800060c:	d9f7      	bls.n	80005fe <main+0x96>
  }

  while (1)
  {
	  Gestion_Commandes();
 800060e:	f000 f883 	bl	8000718 <Gestion_Commandes>
	  controle();
 8000612:	f000 fdd9 	bl	80011c8 <controle>
	  SonarDistance();
 8000616:	f001 fd9d 	bl	8002154 <SonarDistance>
	  Gestion_Commandes();
 800061a:	e7f8      	b.n	800060e <main+0xa6>
 800061c:	200000f4 	.word	0x200000f4
 8000620:	200001a0 	.word	0x200001a0
 8000624:	200000a1 	.word	0x200000a1
 8000628:	200000a3 	.word	0x200000a3
 800062c:	200001e0 	.word	0x200001e0
 8000630:	20000220 	.word	0x20000220
 8000634:	200000c8 	.word	0x200000c8
 8000638:	200002a0 	.word	0x200002a0
 800063c:	20000160 	.word	0x20000160

08000640 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b094      	sub	sp, #80	; 0x50
 8000644:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct   = {0};
 8000646:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800064a:	2228      	movs	r2, #40	; 0x28
 800064c:	2100      	movs	r1, #0
 800064e:	4618      	mov	r0, r3
 8000650:	f006 fa5e 	bl	8006b10 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct   = {0};
 8000654:	f107 0314 	add.w	r3, r7, #20
 8000658:	2200      	movs	r2, #0
 800065a:	601a      	str	r2, [r3, #0]
 800065c:	605a      	str	r2, [r3, #4]
 800065e:	609a      	str	r2, [r3, #8]
 8000660:	60da      	str	r2, [r3, #12]
 8000662:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000664:	1d3b      	adds	r3, r7, #4
 8000666:	2200      	movs	r2, #0
 8000668:	601a      	str	r2, [r3, #0]
 800066a:	605a      	str	r2, [r3, #4]
 800066c:	609a      	str	r2, [r3, #8]
 800066e:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType      = RCC_OSCILLATORTYPE_HSI;
 8000670:	2302      	movs	r3, #2
 8000672:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState            = RCC_HSI_ON;
 8000674:	2301      	movs	r3, #1
 8000676:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000678:	2310      	movs	r3, #16
 800067a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState        = RCC_PLL_ON;
 800067c:	2302      	movs	r3, #2
 800067e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource       = RCC_PLLSOURCE_HSI_DIV2;
 8000680:	2300      	movs	r3, #0
 8000682:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL          = RCC_PLL_MUL16;
 8000684:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8000688:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800068a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800068e:	4618      	mov	r0, r3
 8000690:	f003 fe22 	bl	80042d8 <HAL_RCC_OscConfig>
 8000694:	4603      	mov	r3, r0
 8000696:	2b00      	cmp	r3, #0
 8000698:	d001      	beq.n	800069e <SystemClock_Config+0x5e>
  {
    Error_Handler();
 800069a:	f001 fdc5 	bl	8002228 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType      = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800069e:	230f      	movs	r3, #15
 80006a0:	617b      	str	r3, [r7, #20]
                                  |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource   = RCC_SYSCLKSOURCE_PLLCLK;
 80006a2:	2302      	movs	r3, #2
 80006a4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider  = RCC_SYSCLK_DIV1;
 80006a6:	2300      	movs	r3, #0
 80006a8:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006aa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80006ae:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006b0:	2300      	movs	r3, #0
 80006b2:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006b4:	f107 0314 	add.w	r3, r7, #20
 80006b8:	2102      	movs	r1, #2
 80006ba:	4618      	mov	r0, r3
 80006bc:	f004 f88e 	bl	80047dc <HAL_RCC_ClockConfig>
 80006c0:	4603      	mov	r3, r0
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d001      	beq.n	80006ca <SystemClock_Config+0x8a>
  {
    Error_Handler();
 80006c6:	f001 fdaf 	bl	8002228 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80006ca:	2302      	movs	r3, #2
 80006cc:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection    = RCC_ADCPCLK2_DIV8;
 80006ce:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80006d2:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80006d4:	1d3b      	adds	r3, r7, #4
 80006d6:	4618      	mov	r0, r3
 80006d8:	f004 fa18 	bl	8004b0c <HAL_RCCEx_PeriphCLKConfig>
 80006dc:	4603      	mov	r3, r0
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d001      	beq.n	80006e6 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80006e2:	f001 fda1 	bl	8002228 <Error_Handler>
  }
}
 80006e6:	bf00      	nop
 80006e8:	3750      	adds	r7, #80	; 0x50
 80006ea:	46bd      	mov	sp, r7
 80006ec:	bd80      	pop	{r7, pc}

080006ee <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 80006ee:	b580      	push	{r7, lr}
 80006f0:	af00      	add	r7, sp, #0
  /* EXTI15_10_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80006f2:	2200      	movs	r2, #0
 80006f4:	2100      	movs	r1, #0
 80006f6:	2028      	movs	r0, #40	; 0x28
 80006f8:	f003 f949 	bl	800398e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80006fc:	2028      	movs	r0, #40	; 0x28
 80006fe:	f003 f962 	bl	80039c6 <HAL_NVIC_EnableIRQ>
  /* USART3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8000702:	2200      	movs	r2, #0
 8000704:	2100      	movs	r1, #0
 8000706:	2027      	movs	r0, #39	; 0x27
 8000708:	f003 f941 	bl	800398e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART3_IRQn);
 800070c:	2027      	movs	r0, #39	; 0x27
 800070e:	f003 f95a 	bl	80039c6 <HAL_NVIC_EnableIRQ>
}
 8000712:	bf00      	nop
 8000714:	bd80      	pop	{r7, pc}
	...

08000718 <Gestion_Commandes>:

/* USER CODE BEGIN 4 */
void Gestion_Commandes(void) {
 8000718:	b580      	push	{r7, lr}
 800071a:	af00      	add	r7, sp, #0
		GV2,
		GV3
	};
	static enum ETAT Etat = VEILLE;

	if (MovPark_On)
 800071c:	4bac      	ldr	r3, [pc, #688]	; (80009d0 <Gestion_Commandes+0x2b8>)
 800071e:	781b      	ldrb	r3, [r3, #0]
 8000720:	b2db      	uxtb	r3, r3
 8000722:	2b00      	cmp	r3, #0
 8000724:	d001      	beq.n	800072a <Gestion_Commandes+0x12>
		MOVPARK();
 8000726:	f001 fc0d 	bl	8001f44 <MOVPARK>

	if (Mesure_Park_On)
 800072a:	4baa      	ldr	r3, [pc, #680]	; (80009d4 <Gestion_Commandes+0x2bc>)
 800072c:	781b      	ldrb	r3, [r3, #0]
 800072e:	b2db      	uxtb	r3, r3
 8000730:	2b00      	cmp	r3, #0
 8000732:	d001      	beq.n	8000738 <Gestion_Commandes+0x20>
		MES_PARK();
 8000734:	f001 fb3e 	bl	8001db4 <MES_PARK>


if (New_CMDE) {
 8000738:	4ba7      	ldr	r3, [pc, #668]	; (80009d8 <Gestion_Commandes+0x2c0>)
 800073a:	781b      	ldrb	r3, [r3, #0]
 800073c:	b2db      	uxtb	r3, r3
 800073e:	2b00      	cmp	r3, #0
 8000740:	f000 852a 	beq.w	8001198 <Gestion_Commandes+0xa80>
		New_CMDE = 0;
 8000744:	4ba4      	ldr	r3, [pc, #656]	; (80009d8 <Gestion_Commandes+0x2c0>)
 8000746:	2200      	movs	r2, #0
 8000748:	701a      	strb	r2, [r3, #0]
	switch (CMDE) {
 800074a:	4ba4      	ldr	r3, [pc, #656]	; (80009dc <Gestion_Commandes+0x2c4>)
 800074c:	781b      	ldrb	r3, [r3, #0]
 800074e:	b2db      	uxtb	r3, r3
 8000750:	2b0b      	cmp	r3, #11
 8000752:	f200 8521 	bhi.w	8001198 <Gestion_Commandes+0xa80>
 8000756:	a201      	add	r2, pc, #4	; (adr r2, 800075c <Gestion_Commandes+0x44>)
 8000758:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800075c:	080007c7 	.word	0x080007c7
 8000760:	080007a9 	.word	0x080007a9
 8000764:	0800078d 	.word	0x0800078d
 8000768:	080007d7 	.word	0x080007d7
 800076c:	08000a47 	.word	0x08000a47
 8000770:	08000ca9 	.word	0x08000ca9
 8000774:	08000eef 	.word	0x08000eef
 8000778:	08001151 	.word	0x08001151
 800077c:	08001159 	.word	0x08001159
 8000780:	08001161 	.word	0x08001161
 8000784:	08001169 	.word	0x08001169
 8000788:	08001177 	.word	0x08001177
		case STOP_ARRET: {
			// STOP SANS METTRE EN VEILLE
			_CVitD = 0;
 800078c:	4b94      	ldr	r3, [pc, #592]	; (80009e0 <Gestion_Commandes+0x2c8>)
 800078e:	2200      	movs	r2, #0
 8000790:	801a      	strh	r2, [r3, #0]
			_CVitG = 0;
 8000792:	4b94      	ldr	r3, [pc, #592]	; (80009e4 <Gestion_Commandes+0x2cc>)
 8000794:	2200      	movs	r2, #0
 8000796:	801a      	strh	r2, [r3, #0]
			Etat   = ARRET;
 8000798:	4b93      	ldr	r3, [pc, #588]	; (80009e8 <Gestion_Commandes+0x2d0>)
 800079a:	2201      	movs	r2, #1
 800079c:	701a      	strb	r2, [r3, #0]
			Mode   = SLEEP;
 800079e:	4b93      	ldr	r3, [pc, #588]	; (80009ec <Gestion_Commandes+0x2d4>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	701a      	strb	r2, [r3, #0]
			break;
 80007a4:	f000 bcf8 	b.w	8001198 <Gestion_Commandes+0xa80>
		}
		case STOP: {
			_CVitD = _CVitG = 0;
 80007a8:	4b8e      	ldr	r3, [pc, #568]	; (80009e4 <Gestion_Commandes+0x2cc>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	801a      	strh	r2, [r3, #0]
 80007ae:	4b8d      	ldr	r3, [pc, #564]	; (80009e4 <Gestion_Commandes+0x2cc>)
 80007b0:	881a      	ldrh	r2, [r3, #0]
 80007b2:	4b8b      	ldr	r3, [pc, #556]	; (80009e0 <Gestion_Commandes+0x2c8>)
 80007b4:	801a      	strh	r2, [r3, #0]
			// Mise en sommeil: STOP mode , réveil via IT BP1
			Etat = VEILLE;
 80007b6:	4b8c      	ldr	r3, [pc, #560]	; (80009e8 <Gestion_Commandes+0x2d0>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	701a      	strb	r2, [r3, #0]
			Mode = SLEEP;
 80007bc:	4b8b      	ldr	r3, [pc, #556]	; (80009ec <Gestion_Commandes+0x2d4>)
 80007be:	2200      	movs	r2, #0
 80007c0:	701a      	strb	r2, [r3, #0]

			break;
 80007c2:	f000 bce9 	b.w	8001198 <Gestion_Commandes+0xa80>
		}
		case START: {
			// réveil sytème grace à l'IT BP1
			Etat = ARRET;
 80007c6:	4b88      	ldr	r3, [pc, #544]	; (80009e8 <Gestion_Commandes+0x2d0>)
 80007c8:	2201      	movs	r2, #1
 80007ca:	701a      	strb	r2, [r3, #0]
			Mode = SLEEP;
 80007cc:	4b87      	ldr	r3, [pc, #540]	; (80009ec <Gestion_Commandes+0x2d4>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	701a      	strb	r2, [r3, #0]

			break;
 80007d2:	f000 bce1 	b.w	8001198 <Gestion_Commandes+0xa80>
		}
		case AVANT: {
			switch (Etat) {
 80007d6:	4b84      	ldr	r3, [pc, #528]	; (80009e8 <Gestion_Commandes+0x2d0>)
 80007d8:	781b      	ldrb	r3, [r3, #0]
 80007da:	2b0d      	cmp	r3, #13
 80007dc:	f200 84d5 	bhi.w	800118a <Gestion_Commandes+0xa72>
 80007e0:	a201      	add	r2, pc, #4	; (adr r2, 80007e8 <Gestion_Commandes+0xd0>)
 80007e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80007e6:	bf00      	nop
 80007e8:	08000821 	.word	0x08000821
 80007ec:	0800082f 	.word	0x0800082f
 80007f0:	08000855 	.word	0x08000855
 80007f4:	0800087b 	.word	0x0800087b
 80007f8:	080008a1 	.word	0x080008a1
 80007fc:	080008c7 	.word	0x080008c7
 8000800:	080008ed 	.word	0x080008ed
 8000804:	08000913 	.word	0x08000913
 8000808:	08000939 	.word	0x08000939
 800080c:	0800095f 	.word	0x0800095f
 8000810:	08000985 	.word	0x08000985
 8000814:	080009ab 	.word	0x080009ab
 8000818:	080009f9 	.word	0x080009f9
 800081c:	08000a1f 	.word	0x08000a1f
			case VEILLE: {
				Etat = VEILLE;
 8000820:	4b71      	ldr	r3, [pc, #452]	; (80009e8 <Gestion_Commandes+0x2d0>)
 8000822:	2200      	movs	r2, #0
 8000824:	701a      	strb	r2, [r3, #0]
				Mode = SLEEP;
 8000826:	4b71      	ldr	r3, [pc, #452]	; (80009ec <Gestion_Commandes+0x2d4>)
 8000828:	2200      	movs	r2, #0
 800082a:	701a      	strb	r2, [r3, #0]
				break;
 800082c:	e10a      	b.n	8000a44 <Gestion_Commandes+0x32c>
			}
			case ARRET: {
				_DirG  = AVANCE;
 800082e:	4b70      	ldr	r3, [pc, #448]	; (80009f0 <Gestion_Commandes+0x2d8>)
 8000830:	2201      	movs	r2, #1
 8000832:	801a      	strh	r2, [r3, #0]
				_DirD  = AVANCE;
 8000834:	4b6f      	ldr	r3, [pc, #444]	; (80009f4 <Gestion_Commandes+0x2dc>)
 8000836:	2201      	movs	r2, #1
 8000838:	801a      	strh	r2, [r3, #0]
				_CVitG = V1;
 800083a:	4b6a      	ldr	r3, [pc, #424]	; (80009e4 <Gestion_Commandes+0x2cc>)
 800083c:	2226      	movs	r2, #38	; 0x26
 800083e:	801a      	strh	r2, [r3, #0]
				_CVitD = V1;
 8000840:	4b67      	ldr	r3, [pc, #412]	; (80009e0 <Gestion_Commandes+0x2c8>)
 8000842:	2226      	movs	r2, #38	; 0x26
 8000844:	801a      	strh	r2, [r3, #0]
				Etat   = AV1;
 8000846:	4b68      	ldr	r3, [pc, #416]	; (80009e8 <Gestion_Commandes+0x2d0>)
 8000848:	2202      	movs	r2, #2
 800084a:	701a      	strb	r2, [r3, #0]
				Mode   = ACTIF;
 800084c:	4b67      	ldr	r3, [pc, #412]	; (80009ec <Gestion_Commandes+0x2d4>)
 800084e:	2201      	movs	r2, #1
 8000850:	701a      	strb	r2, [r3, #0]
				break;
 8000852:	e0f7      	b.n	8000a44 <Gestion_Commandes+0x32c>
			}
			case AV1: {
				_DirG  = AVANCE;
 8000854:	4b66      	ldr	r3, [pc, #408]	; (80009f0 <Gestion_Commandes+0x2d8>)
 8000856:	2201      	movs	r2, #1
 8000858:	801a      	strh	r2, [r3, #0]
				_DirD  = AVANCE;
 800085a:	4b66      	ldr	r3, [pc, #408]	; (80009f4 <Gestion_Commandes+0x2dc>)
 800085c:	2201      	movs	r2, #1
 800085e:	801a      	strh	r2, [r3, #0]
				_CVitG = V2;
 8000860:	4b60      	ldr	r3, [pc, #384]	; (80009e4 <Gestion_Commandes+0x2cc>)
 8000862:	2238      	movs	r2, #56	; 0x38
 8000864:	801a      	strh	r2, [r3, #0]
				_CVitD = V2;
 8000866:	4b5e      	ldr	r3, [pc, #376]	; (80009e0 <Gestion_Commandes+0x2c8>)
 8000868:	2238      	movs	r2, #56	; 0x38
 800086a:	801a      	strh	r2, [r3, #0]
				Etat   = AV2;
 800086c:	4b5e      	ldr	r3, [pc, #376]	; (80009e8 <Gestion_Commandes+0x2d0>)
 800086e:	2203      	movs	r2, #3
 8000870:	701a      	strb	r2, [r3, #0]
				Mode   = ACTIF;
 8000872:	4b5e      	ldr	r3, [pc, #376]	; (80009ec <Gestion_Commandes+0x2d4>)
 8000874:	2201      	movs	r2, #1
 8000876:	701a      	strb	r2, [r3, #0]
				break;
 8000878:	e0e4      	b.n	8000a44 <Gestion_Commandes+0x32c>
			}
			case AV2: {
				_DirG  = AVANCE;
 800087a:	4b5d      	ldr	r3, [pc, #372]	; (80009f0 <Gestion_Commandes+0x2d8>)
 800087c:	2201      	movs	r2, #1
 800087e:	801a      	strh	r2, [r3, #0]
				_DirD  = AVANCE;
 8000880:	4b5c      	ldr	r3, [pc, #368]	; (80009f4 <Gestion_Commandes+0x2dc>)
 8000882:	2201      	movs	r2, #1
 8000884:	801a      	strh	r2, [r3, #0]
				_CVitG = V3;
 8000886:	4b57      	ldr	r3, [pc, #348]	; (80009e4 <Gestion_Commandes+0x2cc>)
 8000888:	224c      	movs	r2, #76	; 0x4c
 800088a:	801a      	strh	r2, [r3, #0]
				_CVitD = V3 ;
 800088c:	4b54      	ldr	r3, [pc, #336]	; (80009e0 <Gestion_Commandes+0x2c8>)
 800088e:	224c      	movs	r2, #76	; 0x4c
 8000890:	801a      	strh	r2, [r3, #0]
				Etat   = AV3;
 8000892:	4b55      	ldr	r3, [pc, #340]	; (80009e8 <Gestion_Commandes+0x2d0>)
 8000894:	2204      	movs	r2, #4
 8000896:	701a      	strb	r2, [r3, #0]
				Mode   = ACTIF;
 8000898:	4b54      	ldr	r3, [pc, #336]	; (80009ec <Gestion_Commandes+0x2d4>)
 800089a:	2201      	movs	r2, #1
 800089c:	701a      	strb	r2, [r3, #0]
				break;
 800089e:	e0d1      	b.n	8000a44 <Gestion_Commandes+0x32c>
			}
			case AV3: {
				_DirG = AVANCE;
 80008a0:	4b53      	ldr	r3, [pc, #332]	; (80009f0 <Gestion_Commandes+0x2d8>)
 80008a2:	2201      	movs	r2, #1
 80008a4:	801a      	strh	r2, [r3, #0]
				_DirD = AVANCE;
 80008a6:	4b53      	ldr	r3, [pc, #332]	; (80009f4 <Gestion_Commandes+0x2dc>)
 80008a8:	2201      	movs	r2, #1
 80008aa:	801a      	strh	r2, [r3, #0]
				_CVitG = V3;
 80008ac:	4b4d      	ldr	r3, [pc, #308]	; (80009e4 <Gestion_Commandes+0x2cc>)
 80008ae:	224c      	movs	r2, #76	; 0x4c
 80008b0:	801a      	strh	r2, [r3, #0]
				_CVitD = V3 ;
 80008b2:	4b4b      	ldr	r3, [pc, #300]	; (80009e0 <Gestion_Commandes+0x2c8>)
 80008b4:	224c      	movs	r2, #76	; 0x4c
 80008b6:	801a      	strh	r2, [r3, #0]
				Etat   = AV3;
 80008b8:	4b4b      	ldr	r3, [pc, #300]	; (80009e8 <Gestion_Commandes+0x2d0>)
 80008ba:	2204      	movs	r2, #4
 80008bc:	701a      	strb	r2, [r3, #0]
				Mode   = ACTIF;
 80008be:	4b4b      	ldr	r3, [pc, #300]	; (80009ec <Gestion_Commandes+0x2d4>)
 80008c0:	2201      	movs	r2, #1
 80008c2:	701a      	strb	r2, [r3, #0]
				break;
 80008c4:	e0be      	b.n	8000a44 <Gestion_Commandes+0x32c>
			}
			case RV1: {
				_DirG  = RECULE;
 80008c6:	4b4a      	ldr	r3, [pc, #296]	; (80009f0 <Gestion_Commandes+0x2d8>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	801a      	strh	r2, [r3, #0]
				_DirD  = RECULE;
 80008cc:	4b49      	ldr	r3, [pc, #292]	; (80009f4 <Gestion_Commandes+0x2dc>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	801a      	strh	r2, [r3, #0]
				_CVitG = 0;
 80008d2:	4b44      	ldr	r3, [pc, #272]	; (80009e4 <Gestion_Commandes+0x2cc>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	801a      	strh	r2, [r3, #0]
				_CVitD = 0;
 80008d8:	4b41      	ldr	r3, [pc, #260]	; (80009e0 <Gestion_Commandes+0x2c8>)
 80008da:	2200      	movs	r2, #0
 80008dc:	801a      	strh	r2, [r3, #0]
				Etat   = ARRET;
 80008de:	4b42      	ldr	r3, [pc, #264]	; (80009e8 <Gestion_Commandes+0x2d0>)
 80008e0:	2201      	movs	r2, #1
 80008e2:	701a      	strb	r2, [r3, #0]
				Mode   = SLEEP;
 80008e4:	4b41      	ldr	r3, [pc, #260]	; (80009ec <Gestion_Commandes+0x2d4>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	701a      	strb	r2, [r3, #0]

				break;
 80008ea:	e0ab      	b.n	8000a44 <Gestion_Commandes+0x32c>
			}
			case RV2: {
				_DirG = RECULE;
 80008ec:	4b40      	ldr	r3, [pc, #256]	; (80009f0 <Gestion_Commandes+0x2d8>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	801a      	strh	r2, [r3, #0]
				_DirD = RECULE;
 80008f2:	4b40      	ldr	r3, [pc, #256]	; (80009f4 <Gestion_Commandes+0x2dc>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	801a      	strh	r2, [r3, #0]
				_CVitG = V1;
 80008f8:	4b3a      	ldr	r3, [pc, #232]	; (80009e4 <Gestion_Commandes+0x2cc>)
 80008fa:	2226      	movs	r2, #38	; 0x26
 80008fc:	801a      	strh	r2, [r3, #0]
				_CVitD = V1;
 80008fe:	4b38      	ldr	r3, [pc, #224]	; (80009e0 <Gestion_Commandes+0x2c8>)
 8000900:	2226      	movs	r2, #38	; 0x26
 8000902:	801a      	strh	r2, [r3, #0]
				Etat = RV1;
 8000904:	4b38      	ldr	r3, [pc, #224]	; (80009e8 <Gestion_Commandes+0x2d0>)
 8000906:	2205      	movs	r2, #5
 8000908:	701a      	strb	r2, [r3, #0]
				Mode = ACTIF;
 800090a:	4b38      	ldr	r3, [pc, #224]	; (80009ec <Gestion_Commandes+0x2d4>)
 800090c:	2201      	movs	r2, #1
 800090e:	701a      	strb	r2, [r3, #0]
				break;
 8000910:	e098      	b.n	8000a44 <Gestion_Commandes+0x32c>
			}
			case RV3: {
				_DirG = RECULE;
 8000912:	4b37      	ldr	r3, [pc, #220]	; (80009f0 <Gestion_Commandes+0x2d8>)
 8000914:	2200      	movs	r2, #0
 8000916:	801a      	strh	r2, [r3, #0]
				_DirD = RECULE;
 8000918:	4b36      	ldr	r3, [pc, #216]	; (80009f4 <Gestion_Commandes+0x2dc>)
 800091a:	2200      	movs	r2, #0
 800091c:	801a      	strh	r2, [r3, #0]
				_CVitG = V2;
 800091e:	4b31      	ldr	r3, [pc, #196]	; (80009e4 <Gestion_Commandes+0x2cc>)
 8000920:	2238      	movs	r2, #56	; 0x38
 8000922:	801a      	strh	r2, [r3, #0]
				_CVitD = V2;
 8000924:	4b2e      	ldr	r3, [pc, #184]	; (80009e0 <Gestion_Commandes+0x2c8>)
 8000926:	2238      	movs	r2, #56	; 0x38
 8000928:	801a      	strh	r2, [r3, #0]
				Etat = RV2;
 800092a:	4b2f      	ldr	r3, [pc, #188]	; (80009e8 <Gestion_Commandes+0x2d0>)
 800092c:	2206      	movs	r2, #6
 800092e:	701a      	strb	r2, [r3, #0]
				Mode = ACTIF;
 8000930:	4b2e      	ldr	r3, [pc, #184]	; (80009ec <Gestion_Commandes+0x2d4>)
 8000932:	2201      	movs	r2, #1
 8000934:	701a      	strb	r2, [r3, #0]
				break;
 8000936:	e085      	b.n	8000a44 <Gestion_Commandes+0x32c>
			}
			case DV1: {
				_DirG = AVANCE;
 8000938:	4b2d      	ldr	r3, [pc, #180]	; (80009f0 <Gestion_Commandes+0x2d8>)
 800093a:	2201      	movs	r2, #1
 800093c:	801a      	strh	r2, [r3, #0]
				_DirD = AVANCE;
 800093e:	4b2d      	ldr	r3, [pc, #180]	; (80009f4 <Gestion_Commandes+0x2dc>)
 8000940:	2201      	movs	r2, #1
 8000942:	801a      	strh	r2, [r3, #0]
				_CVitG = V1;
 8000944:	4b27      	ldr	r3, [pc, #156]	; (80009e4 <Gestion_Commandes+0x2cc>)
 8000946:	2226      	movs	r2, #38	; 0x26
 8000948:	801a      	strh	r2, [r3, #0]
				_CVitD = V1;
 800094a:	4b25      	ldr	r3, [pc, #148]	; (80009e0 <Gestion_Commandes+0x2c8>)
 800094c:	2226      	movs	r2, #38	; 0x26
 800094e:	801a      	strh	r2, [r3, #0]
				Etat = AV1;
 8000950:	4b25      	ldr	r3, [pc, #148]	; (80009e8 <Gestion_Commandes+0x2d0>)
 8000952:	2202      	movs	r2, #2
 8000954:	701a      	strb	r2, [r3, #0]
				Mode = ACTIF;
 8000956:	4b25      	ldr	r3, [pc, #148]	; (80009ec <Gestion_Commandes+0x2d4>)
 8000958:	2201      	movs	r2, #1
 800095a:	701a      	strb	r2, [r3, #0]
				break;
 800095c:	e072      	b.n	8000a44 <Gestion_Commandes+0x32c>
			}
			case DV2: {
				_DirG = AVANCE;
 800095e:	4b24      	ldr	r3, [pc, #144]	; (80009f0 <Gestion_Commandes+0x2d8>)
 8000960:	2201      	movs	r2, #1
 8000962:	801a      	strh	r2, [r3, #0]
				_DirD = AVANCE;
 8000964:	4b23      	ldr	r3, [pc, #140]	; (80009f4 <Gestion_Commandes+0x2dc>)
 8000966:	2201      	movs	r2, #1
 8000968:	801a      	strh	r2, [r3, #0]
				_CVitG = V2;
 800096a:	4b1e      	ldr	r3, [pc, #120]	; (80009e4 <Gestion_Commandes+0x2cc>)
 800096c:	2238      	movs	r2, #56	; 0x38
 800096e:	801a      	strh	r2, [r3, #0]
				_CVitD = V2;
 8000970:	4b1b      	ldr	r3, [pc, #108]	; (80009e0 <Gestion_Commandes+0x2c8>)
 8000972:	2238      	movs	r2, #56	; 0x38
 8000974:	801a      	strh	r2, [r3, #0]
				Etat = AV2;
 8000976:	4b1c      	ldr	r3, [pc, #112]	; (80009e8 <Gestion_Commandes+0x2d0>)
 8000978:	2203      	movs	r2, #3
 800097a:	701a      	strb	r2, [r3, #0]
				Mode = ACTIF;
 800097c:	4b1b      	ldr	r3, [pc, #108]	; (80009ec <Gestion_Commandes+0x2d4>)
 800097e:	2201      	movs	r2, #1
 8000980:	701a      	strb	r2, [r3, #0]
				break;
 8000982:	e05f      	b.n	8000a44 <Gestion_Commandes+0x32c>
			}
			case DV3: {
				_DirG = AVANCE;
 8000984:	4b1a      	ldr	r3, [pc, #104]	; (80009f0 <Gestion_Commandes+0x2d8>)
 8000986:	2201      	movs	r2, #1
 8000988:	801a      	strh	r2, [r3, #0]
				_DirD = AVANCE;
 800098a:	4b1a      	ldr	r3, [pc, #104]	; (80009f4 <Gestion_Commandes+0x2dc>)
 800098c:	2201      	movs	r2, #1
 800098e:	801a      	strh	r2, [r3, #0]
				_CVitG = V3;
 8000990:	4b14      	ldr	r3, [pc, #80]	; (80009e4 <Gestion_Commandes+0x2cc>)
 8000992:	224c      	movs	r2, #76	; 0x4c
 8000994:	801a      	strh	r2, [r3, #0]
				_CVitD = V3;
 8000996:	4b12      	ldr	r3, [pc, #72]	; (80009e0 <Gestion_Commandes+0x2c8>)
 8000998:	224c      	movs	r2, #76	; 0x4c
 800099a:	801a      	strh	r2, [r3, #0]
				Etat = AV3;
 800099c:	4b12      	ldr	r3, [pc, #72]	; (80009e8 <Gestion_Commandes+0x2d0>)
 800099e:	2204      	movs	r2, #4
 80009a0:	701a      	strb	r2, [r3, #0]
				Mode = ACTIF;
 80009a2:	4b12      	ldr	r3, [pc, #72]	; (80009ec <Gestion_Commandes+0x2d4>)
 80009a4:	2201      	movs	r2, #1
 80009a6:	701a      	strb	r2, [r3, #0]
				break;
 80009a8:	e04c      	b.n	8000a44 <Gestion_Commandes+0x32c>
			}
			case GV1: {
				_DirG = AVANCE;
 80009aa:	4b11      	ldr	r3, [pc, #68]	; (80009f0 <Gestion_Commandes+0x2d8>)
 80009ac:	2201      	movs	r2, #1
 80009ae:	801a      	strh	r2, [r3, #0]
				_DirD = AVANCE;
 80009b0:	4b10      	ldr	r3, [pc, #64]	; (80009f4 <Gestion_Commandes+0x2dc>)
 80009b2:	2201      	movs	r2, #1
 80009b4:	801a      	strh	r2, [r3, #0]
				_CVitG = V1;
 80009b6:	4b0b      	ldr	r3, [pc, #44]	; (80009e4 <Gestion_Commandes+0x2cc>)
 80009b8:	2226      	movs	r2, #38	; 0x26
 80009ba:	801a      	strh	r2, [r3, #0]
				_CVitD = V1;
 80009bc:	4b08      	ldr	r3, [pc, #32]	; (80009e0 <Gestion_Commandes+0x2c8>)
 80009be:	2226      	movs	r2, #38	; 0x26
 80009c0:	801a      	strh	r2, [r3, #0]
				Etat = AV2;
 80009c2:	4b09      	ldr	r3, [pc, #36]	; (80009e8 <Gestion_Commandes+0x2d0>)
 80009c4:	2203      	movs	r2, #3
 80009c6:	701a      	strb	r2, [r3, #0]
				Mode = ACTIF;
 80009c8:	4b08      	ldr	r3, [pc, #32]	; (80009ec <Gestion_Commandes+0x2d4>)
 80009ca:	2201      	movs	r2, #1
 80009cc:	701a      	strb	r2, [r3, #0]
				break;
 80009ce:	e039      	b.n	8000a44 <Gestion_Commandes+0x32c>
 80009d0:	20000125 	.word	0x20000125
 80009d4:	20000124 	.word	0x20000124
 80009d8:	200000a3 	.word	0x200000a3
 80009dc:	200000a1 	.word	0x200000a1
 80009e0:	200000d6 	.word	0x200000d6
 80009e4:	200000d8 	.word	0x200000d8
 80009e8:	20000140 	.word	0x20000140
 80009ec:	200000a2 	.word	0x200000a2
 80009f0:	200000ca 	.word	0x200000ca
 80009f4:	200000cc 	.word	0x200000cc
			}
			case GV2: {
				_DirG = AVANCE;
 80009f8:	4ba5      	ldr	r3, [pc, #660]	; (8000c90 <Gestion_Commandes+0x578>)
 80009fa:	2201      	movs	r2, #1
 80009fc:	801a      	strh	r2, [r3, #0]
				_DirD = AVANCE;
 80009fe:	4ba5      	ldr	r3, [pc, #660]	; (8000c94 <Gestion_Commandes+0x57c>)
 8000a00:	2201      	movs	r2, #1
 8000a02:	801a      	strh	r2, [r3, #0]
				_CVitG = V2;
 8000a04:	4ba4      	ldr	r3, [pc, #656]	; (8000c98 <Gestion_Commandes+0x580>)
 8000a06:	2238      	movs	r2, #56	; 0x38
 8000a08:	801a      	strh	r2, [r3, #0]
				_CVitD = V2;
 8000a0a:	4ba4      	ldr	r3, [pc, #656]	; (8000c9c <Gestion_Commandes+0x584>)
 8000a0c:	2238      	movs	r2, #56	; 0x38
 8000a0e:	801a      	strh	r2, [r3, #0]
				Etat = AV2;
 8000a10:	4ba3      	ldr	r3, [pc, #652]	; (8000ca0 <Gestion_Commandes+0x588>)
 8000a12:	2203      	movs	r2, #3
 8000a14:	701a      	strb	r2, [r3, #0]
				Mode = ACTIF;
 8000a16:	4ba3      	ldr	r3, [pc, #652]	; (8000ca4 <Gestion_Commandes+0x58c>)
 8000a18:	2201      	movs	r2, #1
 8000a1a:	701a      	strb	r2, [r3, #0]
				break;
 8000a1c:	e012      	b.n	8000a44 <Gestion_Commandes+0x32c>
			}
			case GV3: {
				_DirG = AVANCE;
 8000a1e:	4b9c      	ldr	r3, [pc, #624]	; (8000c90 <Gestion_Commandes+0x578>)
 8000a20:	2201      	movs	r2, #1
 8000a22:	801a      	strh	r2, [r3, #0]
				_DirD = AVANCE;
 8000a24:	4b9b      	ldr	r3, [pc, #620]	; (8000c94 <Gestion_Commandes+0x57c>)
 8000a26:	2201      	movs	r2, #1
 8000a28:	801a      	strh	r2, [r3, #0]
				_CVitG = V3;
 8000a2a:	4b9b      	ldr	r3, [pc, #620]	; (8000c98 <Gestion_Commandes+0x580>)
 8000a2c:	224c      	movs	r2, #76	; 0x4c
 8000a2e:	801a      	strh	r2, [r3, #0]
				_CVitD = V3;
 8000a30:	4b9a      	ldr	r3, [pc, #616]	; (8000c9c <Gestion_Commandes+0x584>)
 8000a32:	224c      	movs	r2, #76	; 0x4c
 8000a34:	801a      	strh	r2, [r3, #0]
				Etat = AV3;
 8000a36:	4b9a      	ldr	r3, [pc, #616]	; (8000ca0 <Gestion_Commandes+0x588>)
 8000a38:	2204      	movs	r2, #4
 8000a3a:	701a      	strb	r2, [r3, #0]
				Mode = ACTIF;
 8000a3c:	4b99      	ldr	r3, [pc, #612]	; (8000ca4 <Gestion_Commandes+0x58c>)
 8000a3e:	2201      	movs	r2, #1
 8000a40:	701a      	strb	r2, [r3, #0]
				break;
 8000a42:	bf00      	nop
			}
			}
			break;
 8000a44:	e3a1      	b.n	800118a <Gestion_Commandes+0xa72>
		}
		case ARRIERE: {
			switch (Etat) {
 8000a46:	4b96      	ldr	r3, [pc, #600]	; (8000ca0 <Gestion_Commandes+0x588>)
 8000a48:	781b      	ldrb	r3, [r3, #0]
 8000a4a:	2b0d      	cmp	r3, #13
 8000a4c:	f200 839f 	bhi.w	800118e <Gestion_Commandes+0xa76>
 8000a50:	a201      	add	r2, pc, #4	; (adr r2, 8000a58 <Gestion_Commandes+0x340>)
 8000a52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a56:	bf00      	nop
 8000a58:	08000a91 	.word	0x08000a91
 8000a5c:	08000a9f 	.word	0x08000a9f
 8000a60:	08000ac5 	.word	0x08000ac5
 8000a64:	08000aeb 	.word	0x08000aeb
 8000a68:	08000b11 	.word	0x08000b11
 8000a6c:	08000b37 	.word	0x08000b37
 8000a70:	08000b5d 	.word	0x08000b5d
 8000a74:	08000b83 	.word	0x08000b83
 8000a78:	08000ba9 	.word	0x08000ba9
 8000a7c:	08000bcf 	.word	0x08000bcf
 8000a80:	08000bf5 	.word	0x08000bf5
 8000a84:	08000c1b 	.word	0x08000c1b
 8000a88:	08000c41 	.word	0x08000c41
 8000a8c:	08000c67 	.word	0x08000c67
			case VEILLE: {
				Etat = VEILLE;
 8000a90:	4b83      	ldr	r3, [pc, #524]	; (8000ca0 <Gestion_Commandes+0x588>)
 8000a92:	2200      	movs	r2, #0
 8000a94:	701a      	strb	r2, [r3, #0]
				Mode = SLEEP;
 8000a96:	4b83      	ldr	r3, [pc, #524]	; (8000ca4 <Gestion_Commandes+0x58c>)
 8000a98:	2200      	movs	r2, #0
 8000a9a:	701a      	strb	r2, [r3, #0]
				break;
 8000a9c:	e0f6      	b.n	8000c8c <Gestion_Commandes+0x574>
			}
			case ARRET: {
				_DirG = RECULE;
 8000a9e:	4b7c      	ldr	r3, [pc, #496]	; (8000c90 <Gestion_Commandes+0x578>)
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	801a      	strh	r2, [r3, #0]
				_DirD = RECULE;
 8000aa4:	4b7b      	ldr	r3, [pc, #492]	; (8000c94 <Gestion_Commandes+0x57c>)
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	801a      	strh	r2, [r3, #0]
				_CVitG = V1;
 8000aaa:	4b7b      	ldr	r3, [pc, #492]	; (8000c98 <Gestion_Commandes+0x580>)
 8000aac:	2226      	movs	r2, #38	; 0x26
 8000aae:	801a      	strh	r2, [r3, #0]
				_CVitD = V1;
 8000ab0:	4b7a      	ldr	r3, [pc, #488]	; (8000c9c <Gestion_Commandes+0x584>)
 8000ab2:	2226      	movs	r2, #38	; 0x26
 8000ab4:	801a      	strh	r2, [r3, #0]
				Etat = RV1;
 8000ab6:	4b7a      	ldr	r3, [pc, #488]	; (8000ca0 <Gestion_Commandes+0x588>)
 8000ab8:	2205      	movs	r2, #5
 8000aba:	701a      	strb	r2, [r3, #0]
				Mode = ACTIF;
 8000abc:	4b79      	ldr	r3, [pc, #484]	; (8000ca4 <Gestion_Commandes+0x58c>)
 8000abe:	2201      	movs	r2, #1
 8000ac0:	701a      	strb	r2, [r3, #0]
				break;
 8000ac2:	e0e3      	b.n	8000c8c <Gestion_Commandes+0x574>
			}
			case AV1: {
				_DirG = AVANCE;
 8000ac4:	4b72      	ldr	r3, [pc, #456]	; (8000c90 <Gestion_Commandes+0x578>)
 8000ac6:	2201      	movs	r2, #1
 8000ac8:	801a      	strh	r2, [r3, #0]
				_DirD = AVANCE;
 8000aca:	4b72      	ldr	r3, [pc, #456]	; (8000c94 <Gestion_Commandes+0x57c>)
 8000acc:	2201      	movs	r2, #1
 8000ace:	801a      	strh	r2, [r3, #0]
				_CVitG = 0;
 8000ad0:	4b71      	ldr	r3, [pc, #452]	; (8000c98 <Gestion_Commandes+0x580>)
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	801a      	strh	r2, [r3, #0]
				_CVitD = 0;
 8000ad6:	4b71      	ldr	r3, [pc, #452]	; (8000c9c <Gestion_Commandes+0x584>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	801a      	strh	r2, [r3, #0]
				Etat = ARRET;
 8000adc:	4b70      	ldr	r3, [pc, #448]	; (8000ca0 <Gestion_Commandes+0x588>)
 8000ade:	2201      	movs	r2, #1
 8000ae0:	701a      	strb	r2, [r3, #0]
				Mode = SLEEP;
 8000ae2:	4b70      	ldr	r3, [pc, #448]	; (8000ca4 <Gestion_Commandes+0x58c>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	701a      	strb	r2, [r3, #0]

				break;
 8000ae8:	e0d0      	b.n	8000c8c <Gestion_Commandes+0x574>
			}
			case AV2: {
				_DirG = AVANCE;
 8000aea:	4b69      	ldr	r3, [pc, #420]	; (8000c90 <Gestion_Commandes+0x578>)
 8000aec:	2201      	movs	r2, #1
 8000aee:	801a      	strh	r2, [r3, #0]
				_DirD = AVANCE;
 8000af0:	4b68      	ldr	r3, [pc, #416]	; (8000c94 <Gestion_Commandes+0x57c>)
 8000af2:	2201      	movs	r2, #1
 8000af4:	801a      	strh	r2, [r3, #0]
				_CVitG = V1;
 8000af6:	4b68      	ldr	r3, [pc, #416]	; (8000c98 <Gestion_Commandes+0x580>)
 8000af8:	2226      	movs	r2, #38	; 0x26
 8000afa:	801a      	strh	r2, [r3, #0]
				_CVitD = V1;
 8000afc:	4b67      	ldr	r3, [pc, #412]	; (8000c9c <Gestion_Commandes+0x584>)
 8000afe:	2226      	movs	r2, #38	; 0x26
 8000b00:	801a      	strh	r2, [r3, #0]
				Etat = AV1;
 8000b02:	4b67      	ldr	r3, [pc, #412]	; (8000ca0 <Gestion_Commandes+0x588>)
 8000b04:	2202      	movs	r2, #2
 8000b06:	701a      	strb	r2, [r3, #0]
				Mode = ACTIF;
 8000b08:	4b66      	ldr	r3, [pc, #408]	; (8000ca4 <Gestion_Commandes+0x58c>)
 8000b0a:	2201      	movs	r2, #1
 8000b0c:	701a      	strb	r2, [r3, #0]
				break;
 8000b0e:	e0bd      	b.n	8000c8c <Gestion_Commandes+0x574>
			}
			case AV3: {
				_DirG = AVANCE;
 8000b10:	4b5f      	ldr	r3, [pc, #380]	; (8000c90 <Gestion_Commandes+0x578>)
 8000b12:	2201      	movs	r2, #1
 8000b14:	801a      	strh	r2, [r3, #0]
				_DirD = AVANCE;
 8000b16:	4b5f      	ldr	r3, [pc, #380]	; (8000c94 <Gestion_Commandes+0x57c>)
 8000b18:	2201      	movs	r2, #1
 8000b1a:	801a      	strh	r2, [r3, #0]
				_CVitG = V2;
 8000b1c:	4b5e      	ldr	r3, [pc, #376]	; (8000c98 <Gestion_Commandes+0x580>)
 8000b1e:	2238      	movs	r2, #56	; 0x38
 8000b20:	801a      	strh	r2, [r3, #0]
				_CVitD = V2;
 8000b22:	4b5e      	ldr	r3, [pc, #376]	; (8000c9c <Gestion_Commandes+0x584>)
 8000b24:	2238      	movs	r2, #56	; 0x38
 8000b26:	801a      	strh	r2, [r3, #0]
				Etat = AV2;
 8000b28:	4b5d      	ldr	r3, [pc, #372]	; (8000ca0 <Gestion_Commandes+0x588>)
 8000b2a:	2203      	movs	r2, #3
 8000b2c:	701a      	strb	r2, [r3, #0]
				Mode = ACTIF;
 8000b2e:	4b5d      	ldr	r3, [pc, #372]	; (8000ca4 <Gestion_Commandes+0x58c>)
 8000b30:	2201      	movs	r2, #1
 8000b32:	701a      	strb	r2, [r3, #0]
				break;
 8000b34:	e0aa      	b.n	8000c8c <Gestion_Commandes+0x574>
			}
			case RV1: {
				_DirG = RECULE;
 8000b36:	4b56      	ldr	r3, [pc, #344]	; (8000c90 <Gestion_Commandes+0x578>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	801a      	strh	r2, [r3, #0]
				_DirD = RECULE;
 8000b3c:	4b55      	ldr	r3, [pc, #340]	; (8000c94 <Gestion_Commandes+0x57c>)
 8000b3e:	2200      	movs	r2, #0
 8000b40:	801a      	strh	r2, [r3, #0]
				_CVitG = V2;
 8000b42:	4b55      	ldr	r3, [pc, #340]	; (8000c98 <Gestion_Commandes+0x580>)
 8000b44:	2238      	movs	r2, #56	; 0x38
 8000b46:	801a      	strh	r2, [r3, #0]
				_CVitD = V2;
 8000b48:	4b54      	ldr	r3, [pc, #336]	; (8000c9c <Gestion_Commandes+0x584>)
 8000b4a:	2238      	movs	r2, #56	; 0x38
 8000b4c:	801a      	strh	r2, [r3, #0]
				Etat = RV2;
 8000b4e:	4b54      	ldr	r3, [pc, #336]	; (8000ca0 <Gestion_Commandes+0x588>)
 8000b50:	2206      	movs	r2, #6
 8000b52:	701a      	strb	r2, [r3, #0]
				Mode = ACTIF;
 8000b54:	4b53      	ldr	r3, [pc, #332]	; (8000ca4 <Gestion_Commandes+0x58c>)
 8000b56:	2201      	movs	r2, #1
 8000b58:	701a      	strb	r2, [r3, #0]
				break;
 8000b5a:	e097      	b.n	8000c8c <Gestion_Commandes+0x574>
			}
			case RV2: {
				_DirG = RECULE;
 8000b5c:	4b4c      	ldr	r3, [pc, #304]	; (8000c90 <Gestion_Commandes+0x578>)
 8000b5e:	2200      	movs	r2, #0
 8000b60:	801a      	strh	r2, [r3, #0]
				_DirD = RECULE;
 8000b62:	4b4c      	ldr	r3, [pc, #304]	; (8000c94 <Gestion_Commandes+0x57c>)
 8000b64:	2200      	movs	r2, #0
 8000b66:	801a      	strh	r2, [r3, #0]
				_CVitG = V3;
 8000b68:	4b4b      	ldr	r3, [pc, #300]	; (8000c98 <Gestion_Commandes+0x580>)
 8000b6a:	224c      	movs	r2, #76	; 0x4c
 8000b6c:	801a      	strh	r2, [r3, #0]
				_CVitD = V3;
 8000b6e:	4b4b      	ldr	r3, [pc, #300]	; (8000c9c <Gestion_Commandes+0x584>)
 8000b70:	224c      	movs	r2, #76	; 0x4c
 8000b72:	801a      	strh	r2, [r3, #0]
				Etat = RV3;
 8000b74:	4b4a      	ldr	r3, [pc, #296]	; (8000ca0 <Gestion_Commandes+0x588>)
 8000b76:	2207      	movs	r2, #7
 8000b78:	701a      	strb	r2, [r3, #0]
				Mode = ACTIF;
 8000b7a:	4b4a      	ldr	r3, [pc, #296]	; (8000ca4 <Gestion_Commandes+0x58c>)
 8000b7c:	2201      	movs	r2, #1
 8000b7e:	701a      	strb	r2, [r3, #0]
				break;
 8000b80:	e084      	b.n	8000c8c <Gestion_Commandes+0x574>
			}
			case RV3: {
				_DirG = RECULE;
 8000b82:	4b43      	ldr	r3, [pc, #268]	; (8000c90 <Gestion_Commandes+0x578>)
 8000b84:	2200      	movs	r2, #0
 8000b86:	801a      	strh	r2, [r3, #0]
				_DirD = RECULE;
 8000b88:	4b42      	ldr	r3, [pc, #264]	; (8000c94 <Gestion_Commandes+0x57c>)
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	801a      	strh	r2, [r3, #0]
				_CVitG = V3;
 8000b8e:	4b42      	ldr	r3, [pc, #264]	; (8000c98 <Gestion_Commandes+0x580>)
 8000b90:	224c      	movs	r2, #76	; 0x4c
 8000b92:	801a      	strh	r2, [r3, #0]
				_CVitD = V3;
 8000b94:	4b41      	ldr	r3, [pc, #260]	; (8000c9c <Gestion_Commandes+0x584>)
 8000b96:	224c      	movs	r2, #76	; 0x4c
 8000b98:	801a      	strh	r2, [r3, #0]
				Etat = RV3;
 8000b9a:	4b41      	ldr	r3, [pc, #260]	; (8000ca0 <Gestion_Commandes+0x588>)
 8000b9c:	2207      	movs	r2, #7
 8000b9e:	701a      	strb	r2, [r3, #0]
				Mode = ACTIF;
 8000ba0:	4b40      	ldr	r3, [pc, #256]	; (8000ca4 <Gestion_Commandes+0x58c>)
 8000ba2:	2201      	movs	r2, #1
 8000ba4:	701a      	strb	r2, [r3, #0]
				break;
 8000ba6:	e071      	b.n	8000c8c <Gestion_Commandes+0x574>
			}
			case DV1: {
				_DirG = RECULE;
 8000ba8:	4b39      	ldr	r3, [pc, #228]	; (8000c90 <Gestion_Commandes+0x578>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	801a      	strh	r2, [r3, #0]
				_DirD = RECULE;
 8000bae:	4b39      	ldr	r3, [pc, #228]	; (8000c94 <Gestion_Commandes+0x57c>)
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	801a      	strh	r2, [r3, #0]
				_CVitG = V1;
 8000bb4:	4b38      	ldr	r3, [pc, #224]	; (8000c98 <Gestion_Commandes+0x580>)
 8000bb6:	2226      	movs	r2, #38	; 0x26
 8000bb8:	801a      	strh	r2, [r3, #0]
				_CVitD = V1;
 8000bba:	4b38      	ldr	r3, [pc, #224]	; (8000c9c <Gestion_Commandes+0x584>)
 8000bbc:	2226      	movs	r2, #38	; 0x26
 8000bbe:	801a      	strh	r2, [r3, #0]
				Etat = RV1;
 8000bc0:	4b37      	ldr	r3, [pc, #220]	; (8000ca0 <Gestion_Commandes+0x588>)
 8000bc2:	2205      	movs	r2, #5
 8000bc4:	701a      	strb	r2, [r3, #0]
				Mode = ACTIF;
 8000bc6:	4b37      	ldr	r3, [pc, #220]	; (8000ca4 <Gestion_Commandes+0x58c>)
 8000bc8:	2201      	movs	r2, #1
 8000bca:	701a      	strb	r2, [r3, #0]
				break;
 8000bcc:	e05e      	b.n	8000c8c <Gestion_Commandes+0x574>
			}
			case DV2: {
				_DirG = RECULE;
 8000bce:	4b30      	ldr	r3, [pc, #192]	; (8000c90 <Gestion_Commandes+0x578>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	801a      	strh	r2, [r3, #0]
				_DirD = RECULE;
 8000bd4:	4b2f      	ldr	r3, [pc, #188]	; (8000c94 <Gestion_Commandes+0x57c>)
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	801a      	strh	r2, [r3, #0]
				_CVitG = V2;
 8000bda:	4b2f      	ldr	r3, [pc, #188]	; (8000c98 <Gestion_Commandes+0x580>)
 8000bdc:	2238      	movs	r2, #56	; 0x38
 8000bde:	801a      	strh	r2, [r3, #0]
				_CVitD = V2;
 8000be0:	4b2e      	ldr	r3, [pc, #184]	; (8000c9c <Gestion_Commandes+0x584>)
 8000be2:	2238      	movs	r2, #56	; 0x38
 8000be4:	801a      	strh	r2, [r3, #0]
				Etat = RV2;
 8000be6:	4b2e      	ldr	r3, [pc, #184]	; (8000ca0 <Gestion_Commandes+0x588>)
 8000be8:	2206      	movs	r2, #6
 8000bea:	701a      	strb	r2, [r3, #0]
				Mode = ACTIF;
 8000bec:	4b2d      	ldr	r3, [pc, #180]	; (8000ca4 <Gestion_Commandes+0x58c>)
 8000bee:	2201      	movs	r2, #1
 8000bf0:	701a      	strb	r2, [r3, #0]
				break;
 8000bf2:	e04b      	b.n	8000c8c <Gestion_Commandes+0x574>
			}
			case DV3: {
				_DirG = RECULE;
 8000bf4:	4b26      	ldr	r3, [pc, #152]	; (8000c90 <Gestion_Commandes+0x578>)
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	801a      	strh	r2, [r3, #0]
				_DirD = RECULE;
 8000bfa:	4b26      	ldr	r3, [pc, #152]	; (8000c94 <Gestion_Commandes+0x57c>)
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	801a      	strh	r2, [r3, #0]
				_CVitG = V3;
 8000c00:	4b25      	ldr	r3, [pc, #148]	; (8000c98 <Gestion_Commandes+0x580>)
 8000c02:	224c      	movs	r2, #76	; 0x4c
 8000c04:	801a      	strh	r2, [r3, #0]
				_CVitD = V3;
 8000c06:	4b25      	ldr	r3, [pc, #148]	; (8000c9c <Gestion_Commandes+0x584>)
 8000c08:	224c      	movs	r2, #76	; 0x4c
 8000c0a:	801a      	strh	r2, [r3, #0]
				Etat = RV3;
 8000c0c:	4b24      	ldr	r3, [pc, #144]	; (8000ca0 <Gestion_Commandes+0x588>)
 8000c0e:	2207      	movs	r2, #7
 8000c10:	701a      	strb	r2, [r3, #0]
				Mode = ACTIF;
 8000c12:	4b24      	ldr	r3, [pc, #144]	; (8000ca4 <Gestion_Commandes+0x58c>)
 8000c14:	2201      	movs	r2, #1
 8000c16:	701a      	strb	r2, [r3, #0]
				break;
 8000c18:	e038      	b.n	8000c8c <Gestion_Commandes+0x574>
			}
			case GV1: {
				_DirG = RECULE;
 8000c1a:	4b1d      	ldr	r3, [pc, #116]	; (8000c90 <Gestion_Commandes+0x578>)
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	801a      	strh	r2, [r3, #0]
				_DirD = RECULE;
 8000c20:	4b1c      	ldr	r3, [pc, #112]	; (8000c94 <Gestion_Commandes+0x57c>)
 8000c22:	2200      	movs	r2, #0
 8000c24:	801a      	strh	r2, [r3, #0]
				_CVitG = V1;
 8000c26:	4b1c      	ldr	r3, [pc, #112]	; (8000c98 <Gestion_Commandes+0x580>)
 8000c28:	2226      	movs	r2, #38	; 0x26
 8000c2a:	801a      	strh	r2, [r3, #0]
				_CVitD = V1;
 8000c2c:	4b1b      	ldr	r3, [pc, #108]	; (8000c9c <Gestion_Commandes+0x584>)
 8000c2e:	2226      	movs	r2, #38	; 0x26
 8000c30:	801a      	strh	r2, [r3, #0]
				Etat = RV1;
 8000c32:	4b1b      	ldr	r3, [pc, #108]	; (8000ca0 <Gestion_Commandes+0x588>)
 8000c34:	2205      	movs	r2, #5
 8000c36:	701a      	strb	r2, [r3, #0]
				Mode = ACTIF;
 8000c38:	4b1a      	ldr	r3, [pc, #104]	; (8000ca4 <Gestion_Commandes+0x58c>)
 8000c3a:	2201      	movs	r2, #1
 8000c3c:	701a      	strb	r2, [r3, #0]
				break;
 8000c3e:	e025      	b.n	8000c8c <Gestion_Commandes+0x574>
			}
			case GV2: {
				_DirG = RECULE;
 8000c40:	4b13      	ldr	r3, [pc, #76]	; (8000c90 <Gestion_Commandes+0x578>)
 8000c42:	2200      	movs	r2, #0
 8000c44:	801a      	strh	r2, [r3, #0]
				_DirD = RECULE;
 8000c46:	4b13      	ldr	r3, [pc, #76]	; (8000c94 <Gestion_Commandes+0x57c>)
 8000c48:	2200      	movs	r2, #0
 8000c4a:	801a      	strh	r2, [r3, #0]
				_CVitG = V2;
 8000c4c:	4b12      	ldr	r3, [pc, #72]	; (8000c98 <Gestion_Commandes+0x580>)
 8000c4e:	2238      	movs	r2, #56	; 0x38
 8000c50:	801a      	strh	r2, [r3, #0]
				_CVitD = V2;
 8000c52:	4b12      	ldr	r3, [pc, #72]	; (8000c9c <Gestion_Commandes+0x584>)
 8000c54:	2238      	movs	r2, #56	; 0x38
 8000c56:	801a      	strh	r2, [r3, #0]
				Etat = RV2;
 8000c58:	4b11      	ldr	r3, [pc, #68]	; (8000ca0 <Gestion_Commandes+0x588>)
 8000c5a:	2206      	movs	r2, #6
 8000c5c:	701a      	strb	r2, [r3, #0]
				Mode = ACTIF;
 8000c5e:	4b11      	ldr	r3, [pc, #68]	; (8000ca4 <Gestion_Commandes+0x58c>)
 8000c60:	2201      	movs	r2, #1
 8000c62:	701a      	strb	r2, [r3, #0]
				break;
 8000c64:	e012      	b.n	8000c8c <Gestion_Commandes+0x574>
			}
			case GV3: {
				_DirG = RECULE;
 8000c66:	4b0a      	ldr	r3, [pc, #40]	; (8000c90 <Gestion_Commandes+0x578>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	801a      	strh	r2, [r3, #0]
				_DirD = RECULE;
 8000c6c:	4b09      	ldr	r3, [pc, #36]	; (8000c94 <Gestion_Commandes+0x57c>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	801a      	strh	r2, [r3, #0]
				_CVitG = V3;
 8000c72:	4b09      	ldr	r3, [pc, #36]	; (8000c98 <Gestion_Commandes+0x580>)
 8000c74:	224c      	movs	r2, #76	; 0x4c
 8000c76:	801a      	strh	r2, [r3, #0]
				_CVitD = V3;
 8000c78:	4b08      	ldr	r3, [pc, #32]	; (8000c9c <Gestion_Commandes+0x584>)
 8000c7a:	224c      	movs	r2, #76	; 0x4c
 8000c7c:	801a      	strh	r2, [r3, #0]
				Etat = RV3;
 8000c7e:	4b08      	ldr	r3, [pc, #32]	; (8000ca0 <Gestion_Commandes+0x588>)
 8000c80:	2207      	movs	r2, #7
 8000c82:	701a      	strb	r2, [r3, #0]
				Mode = ACTIF;
 8000c84:	4b07      	ldr	r3, [pc, #28]	; (8000ca4 <Gestion_Commandes+0x58c>)
 8000c86:	2201      	movs	r2, #1
 8000c88:	701a      	strb	r2, [r3, #0]
				break;
 8000c8a:	bf00      	nop
			}
			}
			break;
 8000c8c:	e27f      	b.n	800118e <Gestion_Commandes+0xa76>
 8000c8e:	bf00      	nop
 8000c90:	200000ca 	.word	0x200000ca
 8000c94:	200000cc 	.word	0x200000cc
 8000c98:	200000d8 	.word	0x200000d8
 8000c9c:	200000d6 	.word	0x200000d6
 8000ca0:	20000140 	.word	0x20000140
 8000ca4:	200000a2 	.word	0x200000a2
		}
		case DROITE: {
			switch (Etat) {
 8000ca8:	4ba7      	ldr	r3, [pc, #668]	; (8000f48 <Gestion_Commandes+0x830>)
 8000caa:	781b      	ldrb	r3, [r3, #0]
 8000cac:	2b0d      	cmp	r3, #13
 8000cae:	f200 8270 	bhi.w	8001192 <Gestion_Commandes+0xa7a>
 8000cb2:	a201      	add	r2, pc, #4	; (adr r2, 8000cb8 <Gestion_Commandes+0x5a0>)
 8000cb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000cb8:	08000cf1 	.word	0x08000cf1
 8000cbc:	08000cff 	.word	0x08000cff
 8000cc0:	08000d25 	.word	0x08000d25
 8000cc4:	08000d4b 	.word	0x08000d4b
 8000cc8:	08000d71 	.word	0x08000d71
 8000ccc:	08000d97 	.word	0x08000d97
 8000cd0:	08000dbd 	.word	0x08000dbd
 8000cd4:	08000de3 	.word	0x08000de3
 8000cd8:	08000e09 	.word	0x08000e09
 8000cdc:	08000e2f 	.word	0x08000e2f
 8000ce0:	08000e55 	.word	0x08000e55
 8000ce4:	08000e7b 	.word	0x08000e7b
 8000ce8:	08000ea1 	.word	0x08000ea1
 8000cec:	08000ec7 	.word	0x08000ec7
			case VEILLE: {
				Etat = VEILLE;
 8000cf0:	4b95      	ldr	r3, [pc, #596]	; (8000f48 <Gestion_Commandes+0x830>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	701a      	strb	r2, [r3, #0]
				Mode = SLEEP;
 8000cf6:	4b95      	ldr	r3, [pc, #596]	; (8000f4c <Gestion_Commandes+0x834>)
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	701a      	strb	r2, [r3, #0]
				break;
 8000cfc:	e0f6      	b.n	8000eec <Gestion_Commandes+0x7d4>
			}
			case ARRET: {
				_DirG = AVANCE;
 8000cfe:	4b94      	ldr	r3, [pc, #592]	; (8000f50 <Gestion_Commandes+0x838>)
 8000d00:	2201      	movs	r2, #1
 8000d02:	801a      	strh	r2, [r3, #0]
				_DirD = RECULE;
 8000d04:	4b93      	ldr	r3, [pc, #588]	; (8000f54 <Gestion_Commandes+0x83c>)
 8000d06:	2200      	movs	r2, #0
 8000d08:	801a      	strh	r2, [r3, #0]
				_CVitG = V1;
 8000d0a:	4b93      	ldr	r3, [pc, #588]	; (8000f58 <Gestion_Commandes+0x840>)
 8000d0c:	2226      	movs	r2, #38	; 0x26
 8000d0e:	801a      	strh	r2, [r3, #0]
				_CVitD = V1;
 8000d10:	4b92      	ldr	r3, [pc, #584]	; (8000f5c <Gestion_Commandes+0x844>)
 8000d12:	2226      	movs	r2, #38	; 0x26
 8000d14:	801a      	strh	r2, [r3, #0]
				Etat = DV1;
 8000d16:	4b8c      	ldr	r3, [pc, #560]	; (8000f48 <Gestion_Commandes+0x830>)
 8000d18:	2208      	movs	r2, #8
 8000d1a:	701a      	strb	r2, [r3, #0]
				Mode = ACTIF;
 8000d1c:	4b8b      	ldr	r3, [pc, #556]	; (8000f4c <Gestion_Commandes+0x834>)
 8000d1e:	2201      	movs	r2, #1
 8000d20:	701a      	strb	r2, [r3, #0]
				break;
 8000d22:	e0e3      	b.n	8000eec <Gestion_Commandes+0x7d4>
			}
			case AV1: {
				_DirG = AVANCE;
 8000d24:	4b8a      	ldr	r3, [pc, #552]	; (8000f50 <Gestion_Commandes+0x838>)
 8000d26:	2201      	movs	r2, #1
 8000d28:	801a      	strh	r2, [r3, #0]
				_DirD = RECULE;
 8000d2a:	4b8a      	ldr	r3, [pc, #552]	; (8000f54 <Gestion_Commandes+0x83c>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	801a      	strh	r2, [r3, #0]
				_CVitG = V1;
 8000d30:	4b89      	ldr	r3, [pc, #548]	; (8000f58 <Gestion_Commandes+0x840>)
 8000d32:	2226      	movs	r2, #38	; 0x26
 8000d34:	801a      	strh	r2, [r3, #0]
				_CVitD = V1;
 8000d36:	4b89      	ldr	r3, [pc, #548]	; (8000f5c <Gestion_Commandes+0x844>)
 8000d38:	2226      	movs	r2, #38	; 0x26
 8000d3a:	801a      	strh	r2, [r3, #0]
				Etat = DV1;
 8000d3c:	4b82      	ldr	r3, [pc, #520]	; (8000f48 <Gestion_Commandes+0x830>)
 8000d3e:	2208      	movs	r2, #8
 8000d40:	701a      	strb	r2, [r3, #0]
				Mode = ACTIF;
 8000d42:	4b82      	ldr	r3, [pc, #520]	; (8000f4c <Gestion_Commandes+0x834>)
 8000d44:	2201      	movs	r2, #1
 8000d46:	701a      	strb	r2, [r3, #0]
				break;
 8000d48:	e0d0      	b.n	8000eec <Gestion_Commandes+0x7d4>
			}
			case AV2: {
				_DirG = AVANCE;
 8000d4a:	4b81      	ldr	r3, [pc, #516]	; (8000f50 <Gestion_Commandes+0x838>)
 8000d4c:	2201      	movs	r2, #1
 8000d4e:	801a      	strh	r2, [r3, #0]
				_DirD = RECULE;
 8000d50:	4b80      	ldr	r3, [pc, #512]	; (8000f54 <Gestion_Commandes+0x83c>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	801a      	strh	r2, [r3, #0]
				_CVitG = V2;
 8000d56:	4b80      	ldr	r3, [pc, #512]	; (8000f58 <Gestion_Commandes+0x840>)
 8000d58:	2238      	movs	r2, #56	; 0x38
 8000d5a:	801a      	strh	r2, [r3, #0]
				_CVitD = V2;
 8000d5c:	4b7f      	ldr	r3, [pc, #508]	; (8000f5c <Gestion_Commandes+0x844>)
 8000d5e:	2238      	movs	r2, #56	; 0x38
 8000d60:	801a      	strh	r2, [r3, #0]
				Etat = DV2;
 8000d62:	4b79      	ldr	r3, [pc, #484]	; (8000f48 <Gestion_Commandes+0x830>)
 8000d64:	2209      	movs	r2, #9
 8000d66:	701a      	strb	r2, [r3, #0]
				Mode = ACTIF;
 8000d68:	4b78      	ldr	r3, [pc, #480]	; (8000f4c <Gestion_Commandes+0x834>)
 8000d6a:	2201      	movs	r2, #1
 8000d6c:	701a      	strb	r2, [r3, #0]
				break;
 8000d6e:	e0bd      	b.n	8000eec <Gestion_Commandes+0x7d4>
			}
			case AV3: {
				_DirG = AVANCE;
 8000d70:	4b77      	ldr	r3, [pc, #476]	; (8000f50 <Gestion_Commandes+0x838>)
 8000d72:	2201      	movs	r2, #1
 8000d74:	801a      	strh	r2, [r3, #0]
				_DirD = RECULE;
 8000d76:	4b77      	ldr	r3, [pc, #476]	; (8000f54 <Gestion_Commandes+0x83c>)
 8000d78:	2200      	movs	r2, #0
 8000d7a:	801a      	strh	r2, [r3, #0]
				_CVitG = V3;
 8000d7c:	4b76      	ldr	r3, [pc, #472]	; (8000f58 <Gestion_Commandes+0x840>)
 8000d7e:	224c      	movs	r2, #76	; 0x4c
 8000d80:	801a      	strh	r2, [r3, #0]
				_CVitD = V3;
 8000d82:	4b76      	ldr	r3, [pc, #472]	; (8000f5c <Gestion_Commandes+0x844>)
 8000d84:	224c      	movs	r2, #76	; 0x4c
 8000d86:	801a      	strh	r2, [r3, #0]
				Etat = DV3;
 8000d88:	4b6f      	ldr	r3, [pc, #444]	; (8000f48 <Gestion_Commandes+0x830>)
 8000d8a:	220a      	movs	r2, #10
 8000d8c:	701a      	strb	r2, [r3, #0]
				Mode = ACTIF;
 8000d8e:	4b6f      	ldr	r3, [pc, #444]	; (8000f4c <Gestion_Commandes+0x834>)
 8000d90:	2201      	movs	r2, #1
 8000d92:	701a      	strb	r2, [r3, #0]
				break;
 8000d94:	e0aa      	b.n	8000eec <Gestion_Commandes+0x7d4>
			}
			case RV1: {
				_DirG = AVANCE;
 8000d96:	4b6e      	ldr	r3, [pc, #440]	; (8000f50 <Gestion_Commandes+0x838>)
 8000d98:	2201      	movs	r2, #1
 8000d9a:	801a      	strh	r2, [r3, #0]
				_DirD = RECULE;
 8000d9c:	4b6d      	ldr	r3, [pc, #436]	; (8000f54 <Gestion_Commandes+0x83c>)
 8000d9e:	2200      	movs	r2, #0
 8000da0:	801a      	strh	r2, [r3, #0]
				_CVitG = V1;
 8000da2:	4b6d      	ldr	r3, [pc, #436]	; (8000f58 <Gestion_Commandes+0x840>)
 8000da4:	2226      	movs	r2, #38	; 0x26
 8000da6:	801a      	strh	r2, [r3, #0]
				_CVitD = V1;
 8000da8:	4b6c      	ldr	r3, [pc, #432]	; (8000f5c <Gestion_Commandes+0x844>)
 8000daa:	2226      	movs	r2, #38	; 0x26
 8000dac:	801a      	strh	r2, [r3, #0]
				Etat = DV1;
 8000dae:	4b66      	ldr	r3, [pc, #408]	; (8000f48 <Gestion_Commandes+0x830>)
 8000db0:	2208      	movs	r2, #8
 8000db2:	701a      	strb	r2, [r3, #0]
				Mode = ACTIF;
 8000db4:	4b65      	ldr	r3, [pc, #404]	; (8000f4c <Gestion_Commandes+0x834>)
 8000db6:	2201      	movs	r2, #1
 8000db8:	701a      	strb	r2, [r3, #0]
				break;
 8000dba:	e097      	b.n	8000eec <Gestion_Commandes+0x7d4>
			}
			case RV2: {
				_DirG = AVANCE;
 8000dbc:	4b64      	ldr	r3, [pc, #400]	; (8000f50 <Gestion_Commandes+0x838>)
 8000dbe:	2201      	movs	r2, #1
 8000dc0:	801a      	strh	r2, [r3, #0]
				_DirD = RECULE;
 8000dc2:	4b64      	ldr	r3, [pc, #400]	; (8000f54 <Gestion_Commandes+0x83c>)
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	801a      	strh	r2, [r3, #0]
				_CVitG = V2;
 8000dc8:	4b63      	ldr	r3, [pc, #396]	; (8000f58 <Gestion_Commandes+0x840>)
 8000dca:	2238      	movs	r2, #56	; 0x38
 8000dcc:	801a      	strh	r2, [r3, #0]
				_CVitD = V2;
 8000dce:	4b63      	ldr	r3, [pc, #396]	; (8000f5c <Gestion_Commandes+0x844>)
 8000dd0:	2238      	movs	r2, #56	; 0x38
 8000dd2:	801a      	strh	r2, [r3, #0]
				Etat = DV2;
 8000dd4:	4b5c      	ldr	r3, [pc, #368]	; (8000f48 <Gestion_Commandes+0x830>)
 8000dd6:	2209      	movs	r2, #9
 8000dd8:	701a      	strb	r2, [r3, #0]
				Mode = ACTIF;
 8000dda:	4b5c      	ldr	r3, [pc, #368]	; (8000f4c <Gestion_Commandes+0x834>)
 8000ddc:	2201      	movs	r2, #1
 8000dde:	701a      	strb	r2, [r3, #0]
				break;
 8000de0:	e084      	b.n	8000eec <Gestion_Commandes+0x7d4>
			}
			case RV3: {
				_DirG = AVANCE;
 8000de2:	4b5b      	ldr	r3, [pc, #364]	; (8000f50 <Gestion_Commandes+0x838>)
 8000de4:	2201      	movs	r2, #1
 8000de6:	801a      	strh	r2, [r3, #0]
				_DirD = RECULE;
 8000de8:	4b5a      	ldr	r3, [pc, #360]	; (8000f54 <Gestion_Commandes+0x83c>)
 8000dea:	2200      	movs	r2, #0
 8000dec:	801a      	strh	r2, [r3, #0]
				_CVitG = V3;
 8000dee:	4b5a      	ldr	r3, [pc, #360]	; (8000f58 <Gestion_Commandes+0x840>)
 8000df0:	224c      	movs	r2, #76	; 0x4c
 8000df2:	801a      	strh	r2, [r3, #0]
				_CVitD = V3;
 8000df4:	4b59      	ldr	r3, [pc, #356]	; (8000f5c <Gestion_Commandes+0x844>)
 8000df6:	224c      	movs	r2, #76	; 0x4c
 8000df8:	801a      	strh	r2, [r3, #0]
				Etat = DV3;
 8000dfa:	4b53      	ldr	r3, [pc, #332]	; (8000f48 <Gestion_Commandes+0x830>)
 8000dfc:	220a      	movs	r2, #10
 8000dfe:	701a      	strb	r2, [r3, #0]
				Mode = ACTIF;
 8000e00:	4b52      	ldr	r3, [pc, #328]	; (8000f4c <Gestion_Commandes+0x834>)
 8000e02:	2201      	movs	r2, #1
 8000e04:	701a      	strb	r2, [r3, #0]
				break;
 8000e06:	e071      	b.n	8000eec <Gestion_Commandes+0x7d4>
			}
			case DV1: {
				_DirG = AVANCE;
 8000e08:	4b51      	ldr	r3, [pc, #324]	; (8000f50 <Gestion_Commandes+0x838>)
 8000e0a:	2201      	movs	r2, #1
 8000e0c:	801a      	strh	r2, [r3, #0]
				_DirD = RECULE;
 8000e0e:	4b51      	ldr	r3, [pc, #324]	; (8000f54 <Gestion_Commandes+0x83c>)
 8000e10:	2200      	movs	r2, #0
 8000e12:	801a      	strh	r2, [r3, #0]
				_CVitG = V2;
 8000e14:	4b50      	ldr	r3, [pc, #320]	; (8000f58 <Gestion_Commandes+0x840>)
 8000e16:	2238      	movs	r2, #56	; 0x38
 8000e18:	801a      	strh	r2, [r3, #0]
				_CVitD = V2;
 8000e1a:	4b50      	ldr	r3, [pc, #320]	; (8000f5c <Gestion_Commandes+0x844>)
 8000e1c:	2238      	movs	r2, #56	; 0x38
 8000e1e:	801a      	strh	r2, [r3, #0]
				Etat = DV2;
 8000e20:	4b49      	ldr	r3, [pc, #292]	; (8000f48 <Gestion_Commandes+0x830>)
 8000e22:	2209      	movs	r2, #9
 8000e24:	701a      	strb	r2, [r3, #0]
				Mode = ACTIF;
 8000e26:	4b49      	ldr	r3, [pc, #292]	; (8000f4c <Gestion_Commandes+0x834>)
 8000e28:	2201      	movs	r2, #1
 8000e2a:	701a      	strb	r2, [r3, #0]
				break;
 8000e2c:	e05e      	b.n	8000eec <Gestion_Commandes+0x7d4>
			}
			case DV2: {
				_DirG = AVANCE;
 8000e2e:	4b48      	ldr	r3, [pc, #288]	; (8000f50 <Gestion_Commandes+0x838>)
 8000e30:	2201      	movs	r2, #1
 8000e32:	801a      	strh	r2, [r3, #0]
				_DirD = RECULE;
 8000e34:	4b47      	ldr	r3, [pc, #284]	; (8000f54 <Gestion_Commandes+0x83c>)
 8000e36:	2200      	movs	r2, #0
 8000e38:	801a      	strh	r2, [r3, #0]
				_CVitG = V3;
 8000e3a:	4b47      	ldr	r3, [pc, #284]	; (8000f58 <Gestion_Commandes+0x840>)
 8000e3c:	224c      	movs	r2, #76	; 0x4c
 8000e3e:	801a      	strh	r2, [r3, #0]
				_CVitD = V3;
 8000e40:	4b46      	ldr	r3, [pc, #280]	; (8000f5c <Gestion_Commandes+0x844>)
 8000e42:	224c      	movs	r2, #76	; 0x4c
 8000e44:	801a      	strh	r2, [r3, #0]
				Etat = DV3;
 8000e46:	4b40      	ldr	r3, [pc, #256]	; (8000f48 <Gestion_Commandes+0x830>)
 8000e48:	220a      	movs	r2, #10
 8000e4a:	701a      	strb	r2, [r3, #0]
				Mode = ACTIF;
 8000e4c:	4b3f      	ldr	r3, [pc, #252]	; (8000f4c <Gestion_Commandes+0x834>)
 8000e4e:	2201      	movs	r2, #1
 8000e50:	701a      	strb	r2, [r3, #0]
				break;
 8000e52:	e04b      	b.n	8000eec <Gestion_Commandes+0x7d4>
			}
			case DV3: {
				_DirG = AVANCE;
 8000e54:	4b3e      	ldr	r3, [pc, #248]	; (8000f50 <Gestion_Commandes+0x838>)
 8000e56:	2201      	movs	r2, #1
 8000e58:	801a      	strh	r2, [r3, #0]
				_DirD = RECULE;
 8000e5a:	4b3e      	ldr	r3, [pc, #248]	; (8000f54 <Gestion_Commandes+0x83c>)
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	801a      	strh	r2, [r3, #0]
				_CVitG = V3;
 8000e60:	4b3d      	ldr	r3, [pc, #244]	; (8000f58 <Gestion_Commandes+0x840>)
 8000e62:	224c      	movs	r2, #76	; 0x4c
 8000e64:	801a      	strh	r2, [r3, #0]
				_CVitD = V3;
 8000e66:	4b3d      	ldr	r3, [pc, #244]	; (8000f5c <Gestion_Commandes+0x844>)
 8000e68:	224c      	movs	r2, #76	; 0x4c
 8000e6a:	801a      	strh	r2, [r3, #0]
				Etat = DV3;
 8000e6c:	4b36      	ldr	r3, [pc, #216]	; (8000f48 <Gestion_Commandes+0x830>)
 8000e6e:	220a      	movs	r2, #10
 8000e70:	701a      	strb	r2, [r3, #0]
				Mode = ACTIF;
 8000e72:	4b36      	ldr	r3, [pc, #216]	; (8000f4c <Gestion_Commandes+0x834>)
 8000e74:	2201      	movs	r2, #1
 8000e76:	701a      	strb	r2, [r3, #0]
				break;
 8000e78:	e038      	b.n	8000eec <Gestion_Commandes+0x7d4>
			}
			case GV1: {
				_DirG = RECULE;
 8000e7a:	4b35      	ldr	r3, [pc, #212]	; (8000f50 <Gestion_Commandes+0x838>)
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	801a      	strh	r2, [r3, #0]
				_DirD = RECULE;
 8000e80:	4b34      	ldr	r3, [pc, #208]	; (8000f54 <Gestion_Commandes+0x83c>)
 8000e82:	2200      	movs	r2, #0
 8000e84:	801a      	strh	r2, [r3, #0]
				_CVitG = 0;
 8000e86:	4b34      	ldr	r3, [pc, #208]	; (8000f58 <Gestion_Commandes+0x840>)
 8000e88:	2200      	movs	r2, #0
 8000e8a:	801a      	strh	r2, [r3, #0]
				_CVitD = 0;
 8000e8c:	4b33      	ldr	r3, [pc, #204]	; (8000f5c <Gestion_Commandes+0x844>)
 8000e8e:	2200      	movs	r2, #0
 8000e90:	801a      	strh	r2, [r3, #0]
				Etat = ARRET;
 8000e92:	4b2d      	ldr	r3, [pc, #180]	; (8000f48 <Gestion_Commandes+0x830>)
 8000e94:	2201      	movs	r2, #1
 8000e96:	701a      	strb	r2, [r3, #0]
				Mode = SLEEP;
 8000e98:	4b2c      	ldr	r3, [pc, #176]	; (8000f4c <Gestion_Commandes+0x834>)
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	701a      	strb	r2, [r3, #0]

				break;
 8000e9e:	e025      	b.n	8000eec <Gestion_Commandes+0x7d4>
			}
			case GV2: {
				_DirG = RECULE;
 8000ea0:	4b2b      	ldr	r3, [pc, #172]	; (8000f50 <Gestion_Commandes+0x838>)
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	801a      	strh	r2, [r3, #0]
				_DirD = AVANCE;
 8000ea6:	4b2b      	ldr	r3, [pc, #172]	; (8000f54 <Gestion_Commandes+0x83c>)
 8000ea8:	2201      	movs	r2, #1
 8000eaa:	801a      	strh	r2, [r3, #0]
				_CVitG = V1;
 8000eac:	4b2a      	ldr	r3, [pc, #168]	; (8000f58 <Gestion_Commandes+0x840>)
 8000eae:	2226      	movs	r2, #38	; 0x26
 8000eb0:	801a      	strh	r2, [r3, #0]
				_CVitD = V1;
 8000eb2:	4b2a      	ldr	r3, [pc, #168]	; (8000f5c <Gestion_Commandes+0x844>)
 8000eb4:	2226      	movs	r2, #38	; 0x26
 8000eb6:	801a      	strh	r2, [r3, #0]
				Etat = GV1;
 8000eb8:	4b23      	ldr	r3, [pc, #140]	; (8000f48 <Gestion_Commandes+0x830>)
 8000eba:	220b      	movs	r2, #11
 8000ebc:	701a      	strb	r2, [r3, #0]
				Mode = ACTIF;
 8000ebe:	4b23      	ldr	r3, [pc, #140]	; (8000f4c <Gestion_Commandes+0x834>)
 8000ec0:	2201      	movs	r2, #1
 8000ec2:	701a      	strb	r2, [r3, #0]
				break;
 8000ec4:	e012      	b.n	8000eec <Gestion_Commandes+0x7d4>
			}
			case GV3: {
				_DirG = RECULE;
 8000ec6:	4b22      	ldr	r3, [pc, #136]	; (8000f50 <Gestion_Commandes+0x838>)
 8000ec8:	2200      	movs	r2, #0
 8000eca:	801a      	strh	r2, [r3, #0]
				_DirD = AVANCE;
 8000ecc:	4b21      	ldr	r3, [pc, #132]	; (8000f54 <Gestion_Commandes+0x83c>)
 8000ece:	2201      	movs	r2, #1
 8000ed0:	801a      	strh	r2, [r3, #0]
				_CVitG = V2;
 8000ed2:	4b21      	ldr	r3, [pc, #132]	; (8000f58 <Gestion_Commandes+0x840>)
 8000ed4:	2238      	movs	r2, #56	; 0x38
 8000ed6:	801a      	strh	r2, [r3, #0]
				_CVitD = V2;
 8000ed8:	4b20      	ldr	r3, [pc, #128]	; (8000f5c <Gestion_Commandes+0x844>)
 8000eda:	2238      	movs	r2, #56	; 0x38
 8000edc:	801a      	strh	r2, [r3, #0]
				Etat = GV2;
 8000ede:	4b1a      	ldr	r3, [pc, #104]	; (8000f48 <Gestion_Commandes+0x830>)
 8000ee0:	220c      	movs	r2, #12
 8000ee2:	701a      	strb	r2, [r3, #0]
				Mode = ACTIF;
 8000ee4:	4b19      	ldr	r3, [pc, #100]	; (8000f4c <Gestion_Commandes+0x834>)
 8000ee6:	2201      	movs	r2, #1
 8000ee8:	701a      	strb	r2, [r3, #0]
				break;
 8000eea:	bf00      	nop
			}
			}
			break;
 8000eec:	e151      	b.n	8001192 <Gestion_Commandes+0xa7a>
		}
		case GAUCHE: {
			switch (Etat) {
 8000eee:	4b16      	ldr	r3, [pc, #88]	; (8000f48 <Gestion_Commandes+0x830>)
 8000ef0:	781b      	ldrb	r3, [r3, #0]
 8000ef2:	2b0d      	cmp	r3, #13
 8000ef4:	f200 814f 	bhi.w	8001196 <Gestion_Commandes+0xa7e>
 8000ef8:	a201      	add	r2, pc, #4	; (adr r2, 8000f00 <Gestion_Commandes+0x7e8>)
 8000efa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000efe:	bf00      	nop
 8000f00:	08000f39 	.word	0x08000f39
 8000f04:	08000f61 	.word	0x08000f61
 8000f08:	08000f87 	.word	0x08000f87
 8000f0c:	08000fad 	.word	0x08000fad
 8000f10:	08000fd3 	.word	0x08000fd3
 8000f14:	08000ff9 	.word	0x08000ff9
 8000f18:	0800101f 	.word	0x0800101f
 8000f1c:	08001045 	.word	0x08001045
 8000f20:	0800106b 	.word	0x0800106b
 8000f24:	08001091 	.word	0x08001091
 8000f28:	080010b7 	.word	0x080010b7
 8000f2c:	080010dd 	.word	0x080010dd
 8000f30:	08001103 	.word	0x08001103
 8000f34:	08001129 	.word	0x08001129
			case VEILLE: {
				Etat = VEILLE;
 8000f38:	4b03      	ldr	r3, [pc, #12]	; (8000f48 <Gestion_Commandes+0x830>)
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	701a      	strb	r2, [r3, #0]
				Mode = SLEEP;
 8000f3e:	4b03      	ldr	r3, [pc, #12]	; (8000f4c <Gestion_Commandes+0x834>)
 8000f40:	2200      	movs	r2, #0
 8000f42:	701a      	strb	r2, [r3, #0]
				break;
 8000f44:	e103      	b.n	800114e <Gestion_Commandes+0xa36>
 8000f46:	bf00      	nop
 8000f48:	20000140 	.word	0x20000140
 8000f4c:	200000a2 	.word	0x200000a2
 8000f50:	200000ca 	.word	0x200000ca
 8000f54:	200000cc 	.word	0x200000cc
 8000f58:	200000d8 	.word	0x200000d8
 8000f5c:	200000d6 	.word	0x200000d6
			}
			case ARRET: {
				_DirG = RECULE;
 8000f60:	4b8e      	ldr	r3, [pc, #568]	; (800119c <Gestion_Commandes+0xa84>)
 8000f62:	2200      	movs	r2, #0
 8000f64:	801a      	strh	r2, [r3, #0]
				_DirD = AVANCE;
 8000f66:	4b8e      	ldr	r3, [pc, #568]	; (80011a0 <Gestion_Commandes+0xa88>)
 8000f68:	2201      	movs	r2, #1
 8000f6a:	801a      	strh	r2, [r3, #0]
				_CVitG = V1;
 8000f6c:	4b8d      	ldr	r3, [pc, #564]	; (80011a4 <Gestion_Commandes+0xa8c>)
 8000f6e:	2226      	movs	r2, #38	; 0x26
 8000f70:	801a      	strh	r2, [r3, #0]
				_CVitD = V1;
 8000f72:	4b8d      	ldr	r3, [pc, #564]	; (80011a8 <Gestion_Commandes+0xa90>)
 8000f74:	2226      	movs	r2, #38	; 0x26
 8000f76:	801a      	strh	r2, [r3, #0]
				Etat = GV1;
 8000f78:	4b8c      	ldr	r3, [pc, #560]	; (80011ac <Gestion_Commandes+0xa94>)
 8000f7a:	220b      	movs	r2, #11
 8000f7c:	701a      	strb	r2, [r3, #0]
				Mode = ACTIF;
 8000f7e:	4b8c      	ldr	r3, [pc, #560]	; (80011b0 <Gestion_Commandes+0xa98>)
 8000f80:	2201      	movs	r2, #1
 8000f82:	701a      	strb	r2, [r3, #0]
				break;
 8000f84:	e0e3      	b.n	800114e <Gestion_Commandes+0xa36>
			}
			case AV1: {
				_DirG = RECULE;
 8000f86:	4b85      	ldr	r3, [pc, #532]	; (800119c <Gestion_Commandes+0xa84>)
 8000f88:	2200      	movs	r2, #0
 8000f8a:	801a      	strh	r2, [r3, #0]
				_DirD = AVANCE;
 8000f8c:	4b84      	ldr	r3, [pc, #528]	; (80011a0 <Gestion_Commandes+0xa88>)
 8000f8e:	2201      	movs	r2, #1
 8000f90:	801a      	strh	r2, [r3, #0]
				_CVitG = V1;
 8000f92:	4b84      	ldr	r3, [pc, #528]	; (80011a4 <Gestion_Commandes+0xa8c>)
 8000f94:	2226      	movs	r2, #38	; 0x26
 8000f96:	801a      	strh	r2, [r3, #0]
				_CVitD = V1;
 8000f98:	4b83      	ldr	r3, [pc, #524]	; (80011a8 <Gestion_Commandes+0xa90>)
 8000f9a:	2226      	movs	r2, #38	; 0x26
 8000f9c:	801a      	strh	r2, [r3, #0]
				Etat = GV1;
 8000f9e:	4b83      	ldr	r3, [pc, #524]	; (80011ac <Gestion_Commandes+0xa94>)
 8000fa0:	220b      	movs	r2, #11
 8000fa2:	701a      	strb	r2, [r3, #0]
				Mode = ACTIF;
 8000fa4:	4b82      	ldr	r3, [pc, #520]	; (80011b0 <Gestion_Commandes+0xa98>)
 8000fa6:	2201      	movs	r2, #1
 8000fa8:	701a      	strb	r2, [r3, #0]
				break;
 8000faa:	e0d0      	b.n	800114e <Gestion_Commandes+0xa36>
			}
			case AV2: {
				_DirG = RECULE;
 8000fac:	4b7b      	ldr	r3, [pc, #492]	; (800119c <Gestion_Commandes+0xa84>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	801a      	strh	r2, [r3, #0]
				_DirD = AVANCE;
 8000fb2:	4b7b      	ldr	r3, [pc, #492]	; (80011a0 <Gestion_Commandes+0xa88>)
 8000fb4:	2201      	movs	r2, #1
 8000fb6:	801a      	strh	r2, [r3, #0]
				_CVitG = V2;
 8000fb8:	4b7a      	ldr	r3, [pc, #488]	; (80011a4 <Gestion_Commandes+0xa8c>)
 8000fba:	2238      	movs	r2, #56	; 0x38
 8000fbc:	801a      	strh	r2, [r3, #0]
				_CVitD = V2;
 8000fbe:	4b7a      	ldr	r3, [pc, #488]	; (80011a8 <Gestion_Commandes+0xa90>)
 8000fc0:	2238      	movs	r2, #56	; 0x38
 8000fc2:	801a      	strh	r2, [r3, #0]
				Etat = GV2;
 8000fc4:	4b79      	ldr	r3, [pc, #484]	; (80011ac <Gestion_Commandes+0xa94>)
 8000fc6:	220c      	movs	r2, #12
 8000fc8:	701a      	strb	r2, [r3, #0]
				Mode = ACTIF;
 8000fca:	4b79      	ldr	r3, [pc, #484]	; (80011b0 <Gestion_Commandes+0xa98>)
 8000fcc:	2201      	movs	r2, #1
 8000fce:	701a      	strb	r2, [r3, #0]
				break;
 8000fd0:	e0bd      	b.n	800114e <Gestion_Commandes+0xa36>
			}
			case AV3: {
				_DirG = RECULE;
 8000fd2:	4b72      	ldr	r3, [pc, #456]	; (800119c <Gestion_Commandes+0xa84>)
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	801a      	strh	r2, [r3, #0]
				_DirD = AVANCE;
 8000fd8:	4b71      	ldr	r3, [pc, #452]	; (80011a0 <Gestion_Commandes+0xa88>)
 8000fda:	2201      	movs	r2, #1
 8000fdc:	801a      	strh	r2, [r3, #0]
				_CVitG = V3;
 8000fde:	4b71      	ldr	r3, [pc, #452]	; (80011a4 <Gestion_Commandes+0xa8c>)
 8000fe0:	224c      	movs	r2, #76	; 0x4c
 8000fe2:	801a      	strh	r2, [r3, #0]
				_CVitD = V3;
 8000fe4:	4b70      	ldr	r3, [pc, #448]	; (80011a8 <Gestion_Commandes+0xa90>)
 8000fe6:	224c      	movs	r2, #76	; 0x4c
 8000fe8:	801a      	strh	r2, [r3, #0]
				Etat = GV3;
 8000fea:	4b70      	ldr	r3, [pc, #448]	; (80011ac <Gestion_Commandes+0xa94>)
 8000fec:	220d      	movs	r2, #13
 8000fee:	701a      	strb	r2, [r3, #0]
				Mode = ACTIF;
 8000ff0:	4b6f      	ldr	r3, [pc, #444]	; (80011b0 <Gestion_Commandes+0xa98>)
 8000ff2:	2201      	movs	r2, #1
 8000ff4:	701a      	strb	r2, [r3, #0]
				break;
 8000ff6:	e0aa      	b.n	800114e <Gestion_Commandes+0xa36>
			}
			case RV1: {
				_DirG = RECULE;
 8000ff8:	4b68      	ldr	r3, [pc, #416]	; (800119c <Gestion_Commandes+0xa84>)
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	801a      	strh	r2, [r3, #0]
				_DirD = AVANCE;
 8000ffe:	4b68      	ldr	r3, [pc, #416]	; (80011a0 <Gestion_Commandes+0xa88>)
 8001000:	2201      	movs	r2, #1
 8001002:	801a      	strh	r2, [r3, #0]
				_CVitG = V1;
 8001004:	4b67      	ldr	r3, [pc, #412]	; (80011a4 <Gestion_Commandes+0xa8c>)
 8001006:	2226      	movs	r2, #38	; 0x26
 8001008:	801a      	strh	r2, [r3, #0]
				_CVitD = V1;
 800100a:	4b67      	ldr	r3, [pc, #412]	; (80011a8 <Gestion_Commandes+0xa90>)
 800100c:	2226      	movs	r2, #38	; 0x26
 800100e:	801a      	strh	r2, [r3, #0]
				Etat = GV1;
 8001010:	4b66      	ldr	r3, [pc, #408]	; (80011ac <Gestion_Commandes+0xa94>)
 8001012:	220b      	movs	r2, #11
 8001014:	701a      	strb	r2, [r3, #0]
				Mode = ACTIF;
 8001016:	4b66      	ldr	r3, [pc, #408]	; (80011b0 <Gestion_Commandes+0xa98>)
 8001018:	2201      	movs	r2, #1
 800101a:	701a      	strb	r2, [r3, #0]
				break;
 800101c:	e097      	b.n	800114e <Gestion_Commandes+0xa36>
			}
			case RV2: {
				_DirG = RECULE;
 800101e:	4b5f      	ldr	r3, [pc, #380]	; (800119c <Gestion_Commandes+0xa84>)
 8001020:	2200      	movs	r2, #0
 8001022:	801a      	strh	r2, [r3, #0]
				_DirD = AVANCE;
 8001024:	4b5e      	ldr	r3, [pc, #376]	; (80011a0 <Gestion_Commandes+0xa88>)
 8001026:	2201      	movs	r2, #1
 8001028:	801a      	strh	r2, [r3, #0]
				_CVitG = V2;
 800102a:	4b5e      	ldr	r3, [pc, #376]	; (80011a4 <Gestion_Commandes+0xa8c>)
 800102c:	2238      	movs	r2, #56	; 0x38
 800102e:	801a      	strh	r2, [r3, #0]
				_CVitD = V2;
 8001030:	4b5d      	ldr	r3, [pc, #372]	; (80011a8 <Gestion_Commandes+0xa90>)
 8001032:	2238      	movs	r2, #56	; 0x38
 8001034:	801a      	strh	r2, [r3, #0]
				Etat = GV2;
 8001036:	4b5d      	ldr	r3, [pc, #372]	; (80011ac <Gestion_Commandes+0xa94>)
 8001038:	220c      	movs	r2, #12
 800103a:	701a      	strb	r2, [r3, #0]
				Mode = ACTIF;
 800103c:	4b5c      	ldr	r3, [pc, #368]	; (80011b0 <Gestion_Commandes+0xa98>)
 800103e:	2201      	movs	r2, #1
 8001040:	701a      	strb	r2, [r3, #0]
				break;
 8001042:	e084      	b.n	800114e <Gestion_Commandes+0xa36>
			}
			case RV3: {
				_DirG = RECULE;
 8001044:	4b55      	ldr	r3, [pc, #340]	; (800119c <Gestion_Commandes+0xa84>)
 8001046:	2200      	movs	r2, #0
 8001048:	801a      	strh	r2, [r3, #0]
				_DirD = AVANCE;
 800104a:	4b55      	ldr	r3, [pc, #340]	; (80011a0 <Gestion_Commandes+0xa88>)
 800104c:	2201      	movs	r2, #1
 800104e:	801a      	strh	r2, [r3, #0]
				_CVitG = V3;
 8001050:	4b54      	ldr	r3, [pc, #336]	; (80011a4 <Gestion_Commandes+0xa8c>)
 8001052:	224c      	movs	r2, #76	; 0x4c
 8001054:	801a      	strh	r2, [r3, #0]
				_CVitD = V3;
 8001056:	4b54      	ldr	r3, [pc, #336]	; (80011a8 <Gestion_Commandes+0xa90>)
 8001058:	224c      	movs	r2, #76	; 0x4c
 800105a:	801a      	strh	r2, [r3, #0]
				Etat = GV3;
 800105c:	4b53      	ldr	r3, [pc, #332]	; (80011ac <Gestion_Commandes+0xa94>)
 800105e:	220d      	movs	r2, #13
 8001060:	701a      	strb	r2, [r3, #0]
				Mode = ACTIF;
 8001062:	4b53      	ldr	r3, [pc, #332]	; (80011b0 <Gestion_Commandes+0xa98>)
 8001064:	2201      	movs	r2, #1
 8001066:	701a      	strb	r2, [r3, #0]
				break;
 8001068:	e071      	b.n	800114e <Gestion_Commandes+0xa36>
			}
			case DV1: {
				_DirG = RECULE;
 800106a:	4b4c      	ldr	r3, [pc, #304]	; (800119c <Gestion_Commandes+0xa84>)
 800106c:	2200      	movs	r2, #0
 800106e:	801a      	strh	r2, [r3, #0]
				_DirD = RECULE;
 8001070:	4b4b      	ldr	r3, [pc, #300]	; (80011a0 <Gestion_Commandes+0xa88>)
 8001072:	2200      	movs	r2, #0
 8001074:	801a      	strh	r2, [r3, #0]
				_CVitG = 0;
 8001076:	4b4b      	ldr	r3, [pc, #300]	; (80011a4 <Gestion_Commandes+0xa8c>)
 8001078:	2200      	movs	r2, #0
 800107a:	801a      	strh	r2, [r3, #0]
				_CVitD = 0;
 800107c:	4b4a      	ldr	r3, [pc, #296]	; (80011a8 <Gestion_Commandes+0xa90>)
 800107e:	2200      	movs	r2, #0
 8001080:	801a      	strh	r2, [r3, #0]
				Etat = ARRET;
 8001082:	4b4a      	ldr	r3, [pc, #296]	; (80011ac <Gestion_Commandes+0xa94>)
 8001084:	2201      	movs	r2, #1
 8001086:	701a      	strb	r2, [r3, #0]
				Mode = SLEEP;
 8001088:	4b49      	ldr	r3, [pc, #292]	; (80011b0 <Gestion_Commandes+0xa98>)
 800108a:	2200      	movs	r2, #0
 800108c:	701a      	strb	r2, [r3, #0]

				break;
 800108e:	e05e      	b.n	800114e <Gestion_Commandes+0xa36>
			}
			case DV2: {
				_DirG = AVANCE;
 8001090:	4b42      	ldr	r3, [pc, #264]	; (800119c <Gestion_Commandes+0xa84>)
 8001092:	2201      	movs	r2, #1
 8001094:	801a      	strh	r2, [r3, #0]
				_DirD = RECULE;
 8001096:	4b42      	ldr	r3, [pc, #264]	; (80011a0 <Gestion_Commandes+0xa88>)
 8001098:	2200      	movs	r2, #0
 800109a:	801a      	strh	r2, [r3, #0]
				_CVitG = V1;
 800109c:	4b41      	ldr	r3, [pc, #260]	; (80011a4 <Gestion_Commandes+0xa8c>)
 800109e:	2226      	movs	r2, #38	; 0x26
 80010a0:	801a      	strh	r2, [r3, #0]
				_CVitD = V1;
 80010a2:	4b41      	ldr	r3, [pc, #260]	; (80011a8 <Gestion_Commandes+0xa90>)
 80010a4:	2226      	movs	r2, #38	; 0x26
 80010a6:	801a      	strh	r2, [r3, #0]
				Etat = DV1;
 80010a8:	4b40      	ldr	r3, [pc, #256]	; (80011ac <Gestion_Commandes+0xa94>)
 80010aa:	2208      	movs	r2, #8
 80010ac:	701a      	strb	r2, [r3, #0]
				Mode = ACTIF;
 80010ae:	4b40      	ldr	r3, [pc, #256]	; (80011b0 <Gestion_Commandes+0xa98>)
 80010b0:	2201      	movs	r2, #1
 80010b2:	701a      	strb	r2, [r3, #0]
				break;
 80010b4:	e04b      	b.n	800114e <Gestion_Commandes+0xa36>
			}
			case DV3: {
				_DirG = AVANCE;
 80010b6:	4b39      	ldr	r3, [pc, #228]	; (800119c <Gestion_Commandes+0xa84>)
 80010b8:	2201      	movs	r2, #1
 80010ba:	801a      	strh	r2, [r3, #0]
				_DirD = RECULE;
 80010bc:	4b38      	ldr	r3, [pc, #224]	; (80011a0 <Gestion_Commandes+0xa88>)
 80010be:	2200      	movs	r2, #0
 80010c0:	801a      	strh	r2, [r3, #0]
				_CVitG = V2;
 80010c2:	4b38      	ldr	r3, [pc, #224]	; (80011a4 <Gestion_Commandes+0xa8c>)
 80010c4:	2238      	movs	r2, #56	; 0x38
 80010c6:	801a      	strh	r2, [r3, #0]
				_CVitD = V2;
 80010c8:	4b37      	ldr	r3, [pc, #220]	; (80011a8 <Gestion_Commandes+0xa90>)
 80010ca:	2238      	movs	r2, #56	; 0x38
 80010cc:	801a      	strh	r2, [r3, #0]
				Etat = DV2;
 80010ce:	4b37      	ldr	r3, [pc, #220]	; (80011ac <Gestion_Commandes+0xa94>)
 80010d0:	2209      	movs	r2, #9
 80010d2:	701a      	strb	r2, [r3, #0]
				Mode = ACTIF;
 80010d4:	4b36      	ldr	r3, [pc, #216]	; (80011b0 <Gestion_Commandes+0xa98>)
 80010d6:	2201      	movs	r2, #1
 80010d8:	701a      	strb	r2, [r3, #0]
				break;
 80010da:	e038      	b.n	800114e <Gestion_Commandes+0xa36>
			}
			case GV1: {
				_DirG = RECULE;
 80010dc:	4b2f      	ldr	r3, [pc, #188]	; (800119c <Gestion_Commandes+0xa84>)
 80010de:	2200      	movs	r2, #0
 80010e0:	801a      	strh	r2, [r3, #0]
				_DirD = AVANCE;
 80010e2:	4b2f      	ldr	r3, [pc, #188]	; (80011a0 <Gestion_Commandes+0xa88>)
 80010e4:	2201      	movs	r2, #1
 80010e6:	801a      	strh	r2, [r3, #0]
				_CVitG = V2;
 80010e8:	4b2e      	ldr	r3, [pc, #184]	; (80011a4 <Gestion_Commandes+0xa8c>)
 80010ea:	2238      	movs	r2, #56	; 0x38
 80010ec:	801a      	strh	r2, [r3, #0]
				_CVitD = V2;
 80010ee:	4b2e      	ldr	r3, [pc, #184]	; (80011a8 <Gestion_Commandes+0xa90>)
 80010f0:	2238      	movs	r2, #56	; 0x38
 80010f2:	801a      	strh	r2, [r3, #0]
				Etat = GV2;
 80010f4:	4b2d      	ldr	r3, [pc, #180]	; (80011ac <Gestion_Commandes+0xa94>)
 80010f6:	220c      	movs	r2, #12
 80010f8:	701a      	strb	r2, [r3, #0]
				Mode = ACTIF;
 80010fa:	4b2d      	ldr	r3, [pc, #180]	; (80011b0 <Gestion_Commandes+0xa98>)
 80010fc:	2201      	movs	r2, #1
 80010fe:	701a      	strb	r2, [r3, #0]
				break;
 8001100:	e025      	b.n	800114e <Gestion_Commandes+0xa36>
			}
			case GV2: {
				_DirG = RECULE;
 8001102:	4b26      	ldr	r3, [pc, #152]	; (800119c <Gestion_Commandes+0xa84>)
 8001104:	2200      	movs	r2, #0
 8001106:	801a      	strh	r2, [r3, #0]
				_DirD = AVANCE;
 8001108:	4b25      	ldr	r3, [pc, #148]	; (80011a0 <Gestion_Commandes+0xa88>)
 800110a:	2201      	movs	r2, #1
 800110c:	801a      	strh	r2, [r3, #0]
				_CVitG = V3;
 800110e:	4b25      	ldr	r3, [pc, #148]	; (80011a4 <Gestion_Commandes+0xa8c>)
 8001110:	224c      	movs	r2, #76	; 0x4c
 8001112:	801a      	strh	r2, [r3, #0]
				_CVitD = V3;
 8001114:	4b24      	ldr	r3, [pc, #144]	; (80011a8 <Gestion_Commandes+0xa90>)
 8001116:	224c      	movs	r2, #76	; 0x4c
 8001118:	801a      	strh	r2, [r3, #0]
				Etat = GV3;
 800111a:	4b24      	ldr	r3, [pc, #144]	; (80011ac <Gestion_Commandes+0xa94>)
 800111c:	220d      	movs	r2, #13
 800111e:	701a      	strb	r2, [r3, #0]
				Mode = ACTIF;
 8001120:	4b23      	ldr	r3, [pc, #140]	; (80011b0 <Gestion_Commandes+0xa98>)
 8001122:	2201      	movs	r2, #1
 8001124:	701a      	strb	r2, [r3, #0]
				break;
 8001126:	e012      	b.n	800114e <Gestion_Commandes+0xa36>
			}
			case GV3: {
				_DirG = RECULE;
 8001128:	4b1c      	ldr	r3, [pc, #112]	; (800119c <Gestion_Commandes+0xa84>)
 800112a:	2200      	movs	r2, #0
 800112c:	801a      	strh	r2, [r3, #0]
				_DirD = AVANCE;
 800112e:	4b1c      	ldr	r3, [pc, #112]	; (80011a0 <Gestion_Commandes+0xa88>)
 8001130:	2201      	movs	r2, #1
 8001132:	801a      	strh	r2, [r3, #0]
				_CVitG = V3;
 8001134:	4b1b      	ldr	r3, [pc, #108]	; (80011a4 <Gestion_Commandes+0xa8c>)
 8001136:	224c      	movs	r2, #76	; 0x4c
 8001138:	801a      	strh	r2, [r3, #0]
				_CVitD = V3;
 800113a:	4b1b      	ldr	r3, [pc, #108]	; (80011a8 <Gestion_Commandes+0xa90>)
 800113c:	224c      	movs	r2, #76	; 0x4c
 800113e:	801a      	strh	r2, [r3, #0]
				Etat = GV3;
 8001140:	4b1a      	ldr	r3, [pc, #104]	; (80011ac <Gestion_Commandes+0xa94>)
 8001142:	220d      	movs	r2, #13
 8001144:	701a      	strb	r2, [r3, #0]
				Mode = ACTIF;
 8001146:	4b1a      	ldr	r3, [pc, #104]	; (80011b0 <Gestion_Commandes+0xa98>)
 8001148:	2201      	movs	r2, #1
 800114a:	701a      	strb	r2, [r3, #0]
				break;
 800114c:	bf00      	nop
			}

		}
			break;
 800114e:	e022      	b.n	8001196 <Gestion_Commandes+0xa7e>
		}
		case SERVO_ROTATE_0: {
			ServoAngle(0);
 8001150:	2000      	movs	r0, #0
 8001152:	f000 fd83 	bl	8001c5c <ServoAngle>
			break;
 8001156:	e01f      	b.n	8001198 <Gestion_Commandes+0xa80>
		}
		case SERVO_ROTATE_90: {
			ServoAngle(90);
 8001158:	205a      	movs	r0, #90	; 0x5a
 800115a:	f000 fd7f 	bl	8001c5c <ServoAngle>
			break;
 800115e:	e01b      	b.n	8001198 <Gestion_Commandes+0xa80>
		}
		case SERVO_ROTATE_180: {
			ServoAngle(180);
 8001160:	20b4      	movs	r0, #180	; 0xb4
 8001162:	f000 fd7b 	bl	8001c5c <ServoAngle>
			break;
 8001166:	e017      	b.n	8001198 <Gestion_Commandes+0xa80>
		}
		case PARK: {
			//Mesure_On = 1;
			Mesure_Park_On = 1;
 8001168:	4b12      	ldr	r3, [pc, #72]	; (80011b4 <Gestion_Commandes+0xa9c>)
 800116a:	2201      	movs	r2, #1
 800116c:	701a      	strb	r2, [r3, #0]
			Mesure_State = SERVO_ROTATE_Y;
 800116e:	4b12      	ldr	r3, [pc, #72]	; (80011b8 <Gestion_Commandes+0xaa0>)
 8001170:	2200      	movs	r2, #0
 8001172:	701a      	strb	r2, [r3, #0]
			break;
 8001174:	e010      	b.n	8001198 <Gestion_Commandes+0xa80>
		}
		case MOV_PARK: {
			MovPark_On        = 1;
 8001176:	4b11      	ldr	r3, [pc, #68]	; (80011bc <Gestion_Commandes+0xaa4>)
 8001178:	2201      	movs	r2, #1
 800117a:	701a      	strb	r2, [r3, #0]
			MovPark_State    = FORWARD;
 800117c:	4b10      	ldr	r3, [pc, #64]	; (80011c0 <Gestion_Commandes+0xaa8>)
 800117e:	2200      	movs	r2, #0
 8001180:	701a      	strb	r2, [r3, #0]
			TurnServoCounter = 0;
 8001182:	4b10      	ldr	r3, [pc, #64]	; (80011c4 <Gestion_Commandes+0xaac>)
 8001184:	2200      	movs	r2, #0
 8001186:	801a      	strh	r2, [r3, #0]
			break;
 8001188:	e006      	b.n	8001198 <Gestion_Commandes+0xa80>
			break;
 800118a:	bf00      	nop
 800118c:	e004      	b.n	8001198 <Gestion_Commandes+0xa80>
			break;
 800118e:	bf00      	nop
 8001190:	e002      	b.n	8001198 <Gestion_Commandes+0xa80>
			break;
 8001192:	bf00      	nop
 8001194:	e000      	b.n	8001198 <Gestion_Commandes+0xa80>
			break;
 8001196:	bf00      	nop
		}
	}
}
}
 8001198:	bf00      	nop
 800119a:	bd80      	pop	{r7, pc}
 800119c:	200000ca 	.word	0x200000ca
 80011a0:	200000cc 	.word	0x200000cc
 80011a4:	200000d8 	.word	0x200000d8
 80011a8:	200000d6 	.word	0x200000d6
 80011ac:	20000140 	.word	0x20000140
 80011b0:	200000a2 	.word	0x200000a2
 80011b4:	20000124 	.word	0x20000124
 80011b8:	20000001 	.word	0x20000001
 80011bc:	20000125 	.word	0x20000125
 80011c0:	20000000 	.word	0x20000000
 80011c4:	2000011c 	.word	0x2000011c

080011c8 <controle>:
void controle(void) {
 80011c8:	b580      	push	{r7, lr}
 80011ca:	af00      	add	r7, sp, #0

	if (Tech >= T_200_MS) {
 80011cc:	4b07      	ldr	r3, [pc, #28]	; (80011ec <controle+0x24>)
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	2b63      	cmp	r3, #99	; 0x63
 80011d2:	d908      	bls.n	80011e6 <controle+0x1e>
		Tech = 0;
 80011d4:	4b05      	ldr	r3, [pc, #20]	; (80011ec <controle+0x24>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	601a      	str	r2, [r3, #0]
		ACS();
 80011da:	f000 f809 	bl	80011f0 <ACS>
		Calcul_Vit();
 80011de:	f000 f997 	bl	8001510 <Calcul_Vit>
		regulateur();
 80011e2:	f000 f9f7 	bl	80015d4 <regulateur>
	}

}
 80011e6:	bf00      	nop
 80011e8:	bd80      	pop	{r7, pc}
 80011ea:	bf00      	nop
 80011ec:	200000b0 	.word	0x200000b0

080011f0 <ACS>:

void ACS(void) {
 80011f0:	b480      	push	{r7}
 80011f2:	af00      	add	r7, sp, #0
	static uint16_t Delta1 = 0;
	static uint16_t Delta2 = 0;
	static uint16_t Delta3 = 0;
	static uint16_t Delta4 = 0;

	switch (Etat) {
 80011f4:	4b81      	ldr	r3, [pc, #516]	; (80013fc <ACS+0x20c>)
 80011f6:	781b      	ldrb	r3, [r3, #0]
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d002      	beq.n	8001202 <ACS+0x12>
 80011fc:	2b01      	cmp	r3, #1
 80011fe:	d01a      	beq.n	8001236 <ACS+0x46>
			DirG = _DirG;
		}
		break;
	}
	}
}
 8001200:	e16b      	b.n	80014da <ACS+0x2ea>
		if (Mode == ACTIF )
 8001202:	4b7f      	ldr	r3, [pc, #508]	; (8001400 <ACS+0x210>)
 8001204:	781b      	ldrb	r3, [r3, #0]
 8001206:	b2db      	uxtb	r3, r3
 8001208:	2b01      	cmp	r3, #1
 800120a:	d103      	bne.n	8001214 <ACS+0x24>
			Etat = ACTIF;
 800120c:	4b7b      	ldr	r3, [pc, #492]	; (80013fc <ACS+0x20c>)
 800120e:	2201      	movs	r2, #1
 8001210:	701a      	strb	r2, [r3, #0]
		break;
 8001212:	e162      	b.n	80014da <ACS+0x2ea>
			CVitD = _CVitD;
 8001214:	4b7b      	ldr	r3, [pc, #492]	; (8001404 <ACS+0x214>)
 8001216:	881a      	ldrh	r2, [r3, #0]
 8001218:	4b7b      	ldr	r3, [pc, #492]	; (8001408 <ACS+0x218>)
 800121a:	801a      	strh	r2, [r3, #0]
			CVitG = _CVitG;
 800121c:	4b7b      	ldr	r3, [pc, #492]	; (800140c <ACS+0x21c>)
 800121e:	881a      	ldrh	r2, [r3, #0]
 8001220:	4b7b      	ldr	r3, [pc, #492]	; (8001410 <ACS+0x220>)
 8001222:	801a      	strh	r2, [r3, #0]
			DirD = _DirD;
 8001224:	4b7b      	ldr	r3, [pc, #492]	; (8001414 <ACS+0x224>)
 8001226:	881a      	ldrh	r2, [r3, #0]
 8001228:	4b7b      	ldr	r3, [pc, #492]	; (8001418 <ACS+0x228>)
 800122a:	801a      	strh	r2, [r3, #0]
			DirG = _DirG;
 800122c:	4b7b      	ldr	r3, [pc, #492]	; (800141c <ACS+0x22c>)
 800122e:	881a      	ldrh	r2, [r3, #0]
 8001230:	4b7b      	ldr	r3, [pc, #492]	; (8001420 <ACS+0x230>)
 8001232:	801a      	strh	r2, [r3, #0]
		break;
 8001234:	e151      	b.n	80014da <ACS+0x2ea>
		if (Mode == SLEEP)
 8001236:	4b72      	ldr	r3, [pc, #456]	; (8001400 <ACS+0x210>)
 8001238:	781b      	ldrb	r3, [r3, #0]
 800123a:	b2db      	uxtb	r3, r3
 800123c:	2b00      	cmp	r3, #0
 800123e:	d102      	bne.n	8001246 <ACS+0x56>
			Etat = ARRET;
 8001240:	4b6e      	ldr	r3, [pc, #440]	; (80013fc <ACS+0x20c>)
 8001242:	2200      	movs	r2, #0
 8001244:	701a      	strb	r2, [r3, #0]
		if (_DirD == AVANCE && _DirG == AVANCE) {
 8001246:	4b73      	ldr	r3, [pc, #460]	; (8001414 <ACS+0x224>)
 8001248:	881b      	ldrh	r3, [r3, #0]
 800124a:	2b01      	cmp	r3, #1
 800124c:	f040 8084 	bne.w	8001358 <ACS+0x168>
 8001250:	4b72      	ldr	r3, [pc, #456]	; (800141c <ACS+0x22c>)
 8001252:	881b      	ldrh	r3, [r3, #0]
 8001254:	2b01      	cmp	r3, #1
 8001256:	d17f      	bne.n	8001358 <ACS+0x168>
			if ((Dist_ACS_1 < Seuil_Dist_1 - Delta1)
 8001258:	4b72      	ldr	r3, [pc, #456]	; (8001424 <ACS+0x234>)
 800125a:	881b      	ldrh	r3, [r3, #0]
 800125c:	b29b      	uxth	r3, r3
 800125e:	461a      	mov	r2, r3
 8001260:	4b71      	ldr	r3, [pc, #452]	; (8001428 <ACS+0x238>)
 8001262:	881b      	ldrh	r3, [r3, #0]
 8001264:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 8001268:	429a      	cmp	r2, r3
 800126a:	da21      	bge.n	80012b0 <ACS+0xc0>
					&& (Dist_ACS_2 < Seuil_Dist_2 - Delta2)) {
 800126c:	4b6f      	ldr	r3, [pc, #444]	; (800142c <ACS+0x23c>)
 800126e:	881b      	ldrh	r3, [r3, #0]
 8001270:	b29b      	uxth	r3, r3
 8001272:	461a      	mov	r2, r3
 8001274:	4b6e      	ldr	r3, [pc, #440]	; (8001430 <ACS+0x240>)
 8001276:	881b      	ldrh	r3, [r3, #0]
 8001278:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 800127c:	429a      	cmp	r2, r3
 800127e:	da17      	bge.n	80012b0 <ACS+0xc0>
				CVitD = _CVitD;
 8001280:	4b60      	ldr	r3, [pc, #384]	; (8001404 <ACS+0x214>)
 8001282:	881a      	ldrh	r2, [r3, #0]
 8001284:	4b60      	ldr	r3, [pc, #384]	; (8001408 <ACS+0x218>)
 8001286:	801a      	strh	r2, [r3, #0]
				CVitG = _CVitG;
 8001288:	4b60      	ldr	r3, [pc, #384]	; (800140c <ACS+0x21c>)
 800128a:	881a      	ldrh	r2, [r3, #0]
 800128c:	4b60      	ldr	r3, [pc, #384]	; (8001410 <ACS+0x220>)
 800128e:	801a      	strh	r2, [r3, #0]
				DirD = _DirD;
 8001290:	4b60      	ldr	r3, [pc, #384]	; (8001414 <ACS+0x224>)
 8001292:	881a      	ldrh	r2, [r3, #0]
 8001294:	4b60      	ldr	r3, [pc, #384]	; (8001418 <ACS+0x228>)
 8001296:	801a      	strh	r2, [r3, #0]
				DirG = _DirG;
 8001298:	4b60      	ldr	r3, [pc, #384]	; (800141c <ACS+0x22c>)
 800129a:	881a      	ldrh	r2, [r3, #0]
 800129c:	4b60      	ldr	r3, [pc, #384]	; (8001420 <ACS+0x230>)
 800129e:	801a      	strh	r2, [r3, #0]
				Delta1 = Delta2 = 0;
 80012a0:	4b63      	ldr	r3, [pc, #396]	; (8001430 <ACS+0x240>)
 80012a2:	2200      	movs	r2, #0
 80012a4:	801a      	strh	r2, [r3, #0]
 80012a6:	4b62      	ldr	r3, [pc, #392]	; (8001430 <ACS+0x240>)
 80012a8:	881a      	ldrh	r2, [r3, #0]
 80012aa:	4b5f      	ldr	r3, [pc, #380]	; (8001428 <ACS+0x238>)
 80012ac:	801a      	strh	r2, [r3, #0]
 80012ae:	e052      	b.n	8001356 <ACS+0x166>
			} else if ((Dist_ACS_1 < Seuil_Dist_1)
 80012b0:	4b5c      	ldr	r3, [pc, #368]	; (8001424 <ACS+0x234>)
 80012b2:	881b      	ldrh	r3, [r3, #0]
 80012b4:	b29b      	uxth	r3, r3
 80012b6:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80012ba:	d215      	bcs.n	80012e8 <ACS+0xf8>
					&& (Dist_ACS_2 > Seuil_Dist_2)) {
 80012bc:	4b5b      	ldr	r3, [pc, #364]	; (800142c <ACS+0x23c>)
 80012be:	881b      	ldrh	r3, [r3, #0]
 80012c0:	b29b      	uxth	r3, r3
 80012c2:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80012c6:	d90f      	bls.n	80012e8 <ACS+0xf8>
				CVitD = V1;
 80012c8:	4b4f      	ldr	r3, [pc, #316]	; (8001408 <ACS+0x218>)
 80012ca:	2226      	movs	r2, #38	; 0x26
 80012cc:	801a      	strh	r2, [r3, #0]
				CVitG = V1;
 80012ce:	4b50      	ldr	r3, [pc, #320]	; (8001410 <ACS+0x220>)
 80012d0:	2226      	movs	r2, #38	; 0x26
 80012d2:	801a      	strh	r2, [r3, #0]
				DirG = AVANCE;
 80012d4:	4b52      	ldr	r3, [pc, #328]	; (8001420 <ACS+0x230>)
 80012d6:	2201      	movs	r2, #1
 80012d8:	801a      	strh	r2, [r3, #0]
				DirD = RECULE;
 80012da:	4b4f      	ldr	r3, [pc, #316]	; (8001418 <ACS+0x228>)
 80012dc:	2200      	movs	r2, #0
 80012de:	801a      	strh	r2, [r3, #0]
				Delta2 = DELTA;
 80012e0:	4b53      	ldr	r3, [pc, #332]	; (8001430 <ACS+0x240>)
 80012e2:	2250      	movs	r2, #80	; 0x50
 80012e4:	801a      	strh	r2, [r3, #0]
 80012e6:	e036      	b.n	8001356 <ACS+0x166>
			} else if ((Dist_ACS_1 > Seuil_Dist_1)
 80012e8:	4b4e      	ldr	r3, [pc, #312]	; (8001424 <ACS+0x234>)
 80012ea:	881b      	ldrh	r3, [r3, #0]
 80012ec:	b29b      	uxth	r3, r3
 80012ee:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80012f2:	d915      	bls.n	8001320 <ACS+0x130>
					&& (Dist_ACS_2 < Seuil_Dist_2)) {
 80012f4:	4b4d      	ldr	r3, [pc, #308]	; (800142c <ACS+0x23c>)
 80012f6:	881b      	ldrh	r3, [r3, #0]
 80012f8:	b29b      	uxth	r3, r3
 80012fa:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80012fe:	d20f      	bcs.n	8001320 <ACS+0x130>
				CVitD = V1;
 8001300:	4b41      	ldr	r3, [pc, #260]	; (8001408 <ACS+0x218>)
 8001302:	2226      	movs	r2, #38	; 0x26
 8001304:	801a      	strh	r2, [r3, #0]
				CVitG = V1;
 8001306:	4b42      	ldr	r3, [pc, #264]	; (8001410 <ACS+0x220>)
 8001308:	2226      	movs	r2, #38	; 0x26
 800130a:	801a      	strh	r2, [r3, #0]
				DirD = AVANCE;
 800130c:	4b42      	ldr	r3, [pc, #264]	; (8001418 <ACS+0x228>)
 800130e:	2201      	movs	r2, #1
 8001310:	801a      	strh	r2, [r3, #0]
				DirG = RECULE;
 8001312:	4b43      	ldr	r3, [pc, #268]	; (8001420 <ACS+0x230>)
 8001314:	2200      	movs	r2, #0
 8001316:	801a      	strh	r2, [r3, #0]
				Delta1 = DELTA;
 8001318:	4b43      	ldr	r3, [pc, #268]	; (8001428 <ACS+0x238>)
 800131a:	2250      	movs	r2, #80	; 0x50
 800131c:	801a      	strh	r2, [r3, #0]
 800131e:	e01a      	b.n	8001356 <ACS+0x166>
			} else if ((Dist_ACS_1 > Seuil_Dist_1)
 8001320:	4b40      	ldr	r3, [pc, #256]	; (8001424 <ACS+0x234>)
 8001322:	881b      	ldrh	r3, [r3, #0]
 8001324:	b29b      	uxth	r3, r3
 8001326:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800132a:	f240 80d2 	bls.w	80014d2 <ACS+0x2e2>
					&& (Dist_ACS_2 > Seuil_Dist_2)) {
 800132e:	4b3f      	ldr	r3, [pc, #252]	; (800142c <ACS+0x23c>)
 8001330:	881b      	ldrh	r3, [r3, #0]
 8001332:	b29b      	uxth	r3, r3
 8001334:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8001338:	f240 80cb 	bls.w	80014d2 <ACS+0x2e2>
				CVitD = 0;
 800133c:	4b32      	ldr	r3, [pc, #200]	; (8001408 <ACS+0x218>)
 800133e:	2200      	movs	r2, #0
 8001340:	801a      	strh	r2, [r3, #0]
				CVitG = 0;
 8001342:	4b33      	ldr	r3, [pc, #204]	; (8001410 <ACS+0x220>)
 8001344:	2200      	movs	r2, #0
 8001346:	801a      	strh	r2, [r3, #0]
				DirD = RECULE;
 8001348:	4b33      	ldr	r3, [pc, #204]	; (8001418 <ACS+0x228>)
 800134a:	2200      	movs	r2, #0
 800134c:	801a      	strh	r2, [r3, #0]
				DirG = RECULE;
 800134e:	4b34      	ldr	r3, [pc, #208]	; (8001420 <ACS+0x230>)
 8001350:	2200      	movs	r2, #0
 8001352:	801a      	strh	r2, [r3, #0]
			if ((Dist_ACS_1 < Seuil_Dist_1 - Delta1)
 8001354:	e0bd      	b.n	80014d2 <ACS+0x2e2>
 8001356:	e0bc      	b.n	80014d2 <ACS+0x2e2>
		} else if (_DirD == RECULE && _DirG == RECULE) {
 8001358:	4b2e      	ldr	r3, [pc, #184]	; (8001414 <ACS+0x224>)
 800135a:	881b      	ldrh	r3, [r3, #0]
 800135c:	2b00      	cmp	r3, #0
 800135e:	f040 80a7 	bne.w	80014b0 <ACS+0x2c0>
 8001362:	4b2e      	ldr	r3, [pc, #184]	; (800141c <ACS+0x22c>)
 8001364:	881b      	ldrh	r3, [r3, #0]
 8001366:	2b00      	cmp	r3, #0
 8001368:	f040 80a2 	bne.w	80014b0 <ACS+0x2c0>
			if ((Dist_ACS_3 < Seuil_Dist_3 - Delta3)
 800136c:	4b31      	ldr	r3, [pc, #196]	; (8001434 <ACS+0x244>)
 800136e:	881b      	ldrh	r3, [r3, #0]
 8001370:	b29b      	uxth	r3, r3
 8001372:	461a      	mov	r2, r3
 8001374:	4b30      	ldr	r3, [pc, #192]	; (8001438 <ACS+0x248>)
 8001376:	881b      	ldrh	r3, [r3, #0]
 8001378:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 800137c:	429a      	cmp	r2, r3
 800137e:	da21      	bge.n	80013c4 <ACS+0x1d4>
					&& (Dist_ACS_4 < Seuil_Dist_4 - Delta4)) {
 8001380:	4b2e      	ldr	r3, [pc, #184]	; (800143c <ACS+0x24c>)
 8001382:	881b      	ldrh	r3, [r3, #0]
 8001384:	b29b      	uxth	r3, r3
 8001386:	461a      	mov	r2, r3
 8001388:	4b2d      	ldr	r3, [pc, #180]	; (8001440 <ACS+0x250>)
 800138a:	881b      	ldrh	r3, [r3, #0]
 800138c:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 8001390:	429a      	cmp	r2, r3
 8001392:	da17      	bge.n	80013c4 <ACS+0x1d4>
				CVitD = _CVitD;
 8001394:	4b1b      	ldr	r3, [pc, #108]	; (8001404 <ACS+0x214>)
 8001396:	881a      	ldrh	r2, [r3, #0]
 8001398:	4b1b      	ldr	r3, [pc, #108]	; (8001408 <ACS+0x218>)
 800139a:	801a      	strh	r2, [r3, #0]
				CVitG = _CVitG;
 800139c:	4b1b      	ldr	r3, [pc, #108]	; (800140c <ACS+0x21c>)
 800139e:	881a      	ldrh	r2, [r3, #0]
 80013a0:	4b1b      	ldr	r3, [pc, #108]	; (8001410 <ACS+0x220>)
 80013a2:	801a      	strh	r2, [r3, #0]
				DirD = _DirD;
 80013a4:	4b1b      	ldr	r3, [pc, #108]	; (8001414 <ACS+0x224>)
 80013a6:	881a      	ldrh	r2, [r3, #0]
 80013a8:	4b1b      	ldr	r3, [pc, #108]	; (8001418 <ACS+0x228>)
 80013aa:	801a      	strh	r2, [r3, #0]
				DirG = _DirG;
 80013ac:	4b1b      	ldr	r3, [pc, #108]	; (800141c <ACS+0x22c>)
 80013ae:	881a      	ldrh	r2, [r3, #0]
 80013b0:	4b1b      	ldr	r3, [pc, #108]	; (8001420 <ACS+0x230>)
 80013b2:	801a      	strh	r2, [r3, #0]
				Delta3 = Delta4 = 0;
 80013b4:	4b22      	ldr	r3, [pc, #136]	; (8001440 <ACS+0x250>)
 80013b6:	2200      	movs	r2, #0
 80013b8:	801a      	strh	r2, [r3, #0]
 80013ba:	4b21      	ldr	r3, [pc, #132]	; (8001440 <ACS+0x250>)
 80013bc:	881a      	ldrh	r2, [r3, #0]
 80013be:	4b1e      	ldr	r3, [pc, #120]	; (8001438 <ACS+0x248>)
 80013c0:	801a      	strh	r2, [r3, #0]
 80013c2:	e074      	b.n	80014ae <ACS+0x2be>
			} else if ((Dist_ACS_3 > Seuil_Dist_3)
 80013c4:	4b1b      	ldr	r3, [pc, #108]	; (8001434 <ACS+0x244>)
 80013c6:	881b      	ldrh	r3, [r3, #0]
 80013c8:	b29b      	uxth	r3, r3
 80013ca:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80013ce:	d939      	bls.n	8001444 <ACS+0x254>
					&& (Dist_ACS_4 < Seuil_Dist_4)) {
 80013d0:	4b1a      	ldr	r3, [pc, #104]	; (800143c <ACS+0x24c>)
 80013d2:	881b      	ldrh	r3, [r3, #0]
 80013d4:	b29b      	uxth	r3, r3
 80013d6:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80013da:	d233      	bcs.n	8001444 <ACS+0x254>
				CVitD = V1;
 80013dc:	4b0a      	ldr	r3, [pc, #40]	; (8001408 <ACS+0x218>)
 80013de:	2226      	movs	r2, #38	; 0x26
 80013e0:	801a      	strh	r2, [r3, #0]
				CVitG = V1;
 80013e2:	4b0b      	ldr	r3, [pc, #44]	; (8001410 <ACS+0x220>)
 80013e4:	2226      	movs	r2, #38	; 0x26
 80013e6:	801a      	strh	r2, [r3, #0]
				DirD = AVANCE;
 80013e8:	4b0b      	ldr	r3, [pc, #44]	; (8001418 <ACS+0x228>)
 80013ea:	2201      	movs	r2, #1
 80013ec:	801a      	strh	r2, [r3, #0]
				DirG = RECULE;
 80013ee:	4b0c      	ldr	r3, [pc, #48]	; (8001420 <ACS+0x230>)
 80013f0:	2200      	movs	r2, #0
 80013f2:	801a      	strh	r2, [r3, #0]
				Delta3 = DELTA;
 80013f4:	4b10      	ldr	r3, [pc, #64]	; (8001438 <ACS+0x248>)
 80013f6:	2250      	movs	r2, #80	; 0x50
 80013f8:	801a      	strh	r2, [r3, #0]
 80013fa:	e058      	b.n	80014ae <ACS+0x2be>
 80013fc:	20000141 	.word	0x20000141
 8001400:	200000a2 	.word	0x200000a2
 8001404:	200000d6 	.word	0x200000d6
 8001408:	200000d0 	.word	0x200000d0
 800140c:	200000d8 	.word	0x200000d8
 8001410:	200000ce 	.word	0x200000ce
 8001414:	200000cc 	.word	0x200000cc
 8001418:	200000d2 	.word	0x200000d2
 800141c:	200000ca 	.word	0x200000ca
 8001420:	200000d4 	.word	0x200000d4
 8001424:	200000a4 	.word	0x200000a4
 8001428:	20000142 	.word	0x20000142
 800142c:	200000a6 	.word	0x200000a6
 8001430:	20000144 	.word	0x20000144
 8001434:	200000a8 	.word	0x200000a8
 8001438:	20000146 	.word	0x20000146
 800143c:	200000aa 	.word	0x200000aa
 8001440:	20000148 	.word	0x20000148
			} else if ((Dist_ACS_3 < Seuil_Dist_3)
 8001444:	4b27      	ldr	r3, [pc, #156]	; (80014e4 <ACS+0x2f4>)
 8001446:	881b      	ldrh	r3, [r3, #0]
 8001448:	b29b      	uxth	r3, r3
 800144a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800144e:	d215      	bcs.n	800147c <ACS+0x28c>
					&& (Dist_ACS_4 > Seuil_Dist_4)) {
 8001450:	4b25      	ldr	r3, [pc, #148]	; (80014e8 <ACS+0x2f8>)
 8001452:	881b      	ldrh	r3, [r3, #0]
 8001454:	b29b      	uxth	r3, r3
 8001456:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800145a:	d90f      	bls.n	800147c <ACS+0x28c>
				CVitD = V1;
 800145c:	4b23      	ldr	r3, [pc, #140]	; (80014ec <ACS+0x2fc>)
 800145e:	2226      	movs	r2, #38	; 0x26
 8001460:	801a      	strh	r2, [r3, #0]
				CVitG = V1;
 8001462:	4b23      	ldr	r3, [pc, #140]	; (80014f0 <ACS+0x300>)
 8001464:	2226      	movs	r2, #38	; 0x26
 8001466:	801a      	strh	r2, [r3, #0]
				DirG = AVANCE;
 8001468:	4b22      	ldr	r3, [pc, #136]	; (80014f4 <ACS+0x304>)
 800146a:	2201      	movs	r2, #1
 800146c:	801a      	strh	r2, [r3, #0]
				DirD = RECULE;
 800146e:	4b22      	ldr	r3, [pc, #136]	; (80014f8 <ACS+0x308>)
 8001470:	2200      	movs	r2, #0
 8001472:	801a      	strh	r2, [r3, #0]
				Delta4 = DELTA;
 8001474:	4b21      	ldr	r3, [pc, #132]	; (80014fc <ACS+0x30c>)
 8001476:	2250      	movs	r2, #80	; 0x50
 8001478:	801a      	strh	r2, [r3, #0]
 800147a:	e018      	b.n	80014ae <ACS+0x2be>
			} else if ((Dist_ACS_3 > Seuil_Dist_3)
 800147c:	4b19      	ldr	r3, [pc, #100]	; (80014e4 <ACS+0x2f4>)
 800147e:	881b      	ldrh	r3, [r3, #0]
 8001480:	b29b      	uxth	r3, r3
 8001482:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8001486:	d926      	bls.n	80014d6 <ACS+0x2e6>
					&& (Dist_ACS_4 > Seuil_Dist_4)) {
 8001488:	4b17      	ldr	r3, [pc, #92]	; (80014e8 <ACS+0x2f8>)
 800148a:	881b      	ldrh	r3, [r3, #0]
 800148c:	b29b      	uxth	r3, r3
 800148e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8001492:	d920      	bls.n	80014d6 <ACS+0x2e6>
				CVitD = 0;
 8001494:	4b15      	ldr	r3, [pc, #84]	; (80014ec <ACS+0x2fc>)
 8001496:	2200      	movs	r2, #0
 8001498:	801a      	strh	r2, [r3, #0]
				CVitG = 0;
 800149a:	4b15      	ldr	r3, [pc, #84]	; (80014f0 <ACS+0x300>)
 800149c:	2200      	movs	r2, #0
 800149e:	801a      	strh	r2, [r3, #0]
				DirD = RECULE;
 80014a0:	4b15      	ldr	r3, [pc, #84]	; (80014f8 <ACS+0x308>)
 80014a2:	2200      	movs	r2, #0
 80014a4:	801a      	strh	r2, [r3, #0]
				DirG = RECULE;
 80014a6:	4b13      	ldr	r3, [pc, #76]	; (80014f4 <ACS+0x304>)
 80014a8:	2200      	movs	r2, #0
 80014aa:	801a      	strh	r2, [r3, #0]
			if ((Dist_ACS_3 < Seuil_Dist_3 - Delta3)
 80014ac:	e013      	b.n	80014d6 <ACS+0x2e6>
 80014ae:	e012      	b.n	80014d6 <ACS+0x2e6>
			CVitD = _CVitD;
 80014b0:	4b13      	ldr	r3, [pc, #76]	; (8001500 <ACS+0x310>)
 80014b2:	881a      	ldrh	r2, [r3, #0]
 80014b4:	4b0d      	ldr	r3, [pc, #52]	; (80014ec <ACS+0x2fc>)
 80014b6:	801a      	strh	r2, [r3, #0]
			CVitG = _CVitG;
 80014b8:	4b12      	ldr	r3, [pc, #72]	; (8001504 <ACS+0x314>)
 80014ba:	881a      	ldrh	r2, [r3, #0]
 80014bc:	4b0c      	ldr	r3, [pc, #48]	; (80014f0 <ACS+0x300>)
 80014be:	801a      	strh	r2, [r3, #0]
			DirD = _DirD;
 80014c0:	4b11      	ldr	r3, [pc, #68]	; (8001508 <ACS+0x318>)
 80014c2:	881a      	ldrh	r2, [r3, #0]
 80014c4:	4b0c      	ldr	r3, [pc, #48]	; (80014f8 <ACS+0x308>)
 80014c6:	801a      	strh	r2, [r3, #0]
			DirG = _DirG;
 80014c8:	4b10      	ldr	r3, [pc, #64]	; (800150c <ACS+0x31c>)
 80014ca:	881a      	ldrh	r2, [r3, #0]
 80014cc:	4b09      	ldr	r3, [pc, #36]	; (80014f4 <ACS+0x304>)
 80014ce:	801a      	strh	r2, [r3, #0]
		break;
 80014d0:	e002      	b.n	80014d8 <ACS+0x2e8>
			if ((Dist_ACS_1 < Seuil_Dist_1 - Delta1)
 80014d2:	bf00      	nop
 80014d4:	e000      	b.n	80014d8 <ACS+0x2e8>
			if ((Dist_ACS_3 < Seuil_Dist_3 - Delta3)
 80014d6:	bf00      	nop
		break;
 80014d8:	bf00      	nop
}
 80014da:	bf00      	nop
 80014dc:	46bd      	mov	sp, r7
 80014de:	bc80      	pop	{r7}
 80014e0:	4770      	bx	lr
 80014e2:	bf00      	nop
 80014e4:	200000a8 	.word	0x200000a8
 80014e8:	200000aa 	.word	0x200000aa
 80014ec:	200000d0 	.word	0x200000d0
 80014f0:	200000ce 	.word	0x200000ce
 80014f4:	200000d4 	.word	0x200000d4
 80014f8:	200000d2 	.word	0x200000d2
 80014fc:	20000148 	.word	0x20000148
 8001500:	200000d6 	.word	0x200000d6
 8001504:	200000d8 	.word	0x200000d8
 8001508:	200000cc 	.word	0x200000cc
 800150c:	200000ca 	.word	0x200000ca

08001510 <Calcul_Vit>:

void Calcul_Vit(void) {
 8001510:	b480      	push	{r7}
 8001512:	af00      	add	r7, sp, #0

	DistD = __HAL_TIM_GET_COUNTER(&htim3);
 8001514:	4b24      	ldr	r3, [pc, #144]	; (80015a8 <Calcul_Vit+0x98>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800151a:	b21a      	sxth	r2, r3
 800151c:	4b23      	ldr	r3, [pc, #140]	; (80015ac <Calcul_Vit+0x9c>)
 800151e:	801a      	strh	r2, [r3, #0]
	DistG = __HAL_TIM_GET_COUNTER(&htim4);
 8001520:	4b23      	ldr	r3, [pc, #140]	; (80015b0 <Calcul_Vit+0xa0>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001526:	b21a      	sxth	r2, r3
 8001528:	4b22      	ldr	r3, [pc, #136]	; (80015b4 <Calcul_Vit+0xa4>)
 800152a:	801a      	strh	r2, [r3, #0]
	VitD = abs(DistD - DistD_old);
 800152c:	4b1f      	ldr	r3, [pc, #124]	; (80015ac <Calcul_Vit+0x9c>)
 800152e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001532:	461a      	mov	r2, r3
 8001534:	4b20      	ldr	r3, [pc, #128]	; (80015b8 <Calcul_Vit+0xa8>)
 8001536:	f9b3 3000 	ldrsh.w	r3, [r3]
 800153a:	1ad3      	subs	r3, r2, r3
 800153c:	2b00      	cmp	r3, #0
 800153e:	bfb8      	it	lt
 8001540:	425b      	neglt	r3, r3
 8001542:	b29a      	uxth	r2, r3
 8001544:	4b1d      	ldr	r3, [pc, #116]	; (80015bc <Calcul_Vit+0xac>)
 8001546:	801a      	strh	r2, [r3, #0]
	VitG = abs(DistG - DistG_old);
 8001548:	4b1a      	ldr	r3, [pc, #104]	; (80015b4 <Calcul_Vit+0xa4>)
 800154a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800154e:	461a      	mov	r2, r3
 8001550:	4b1b      	ldr	r3, [pc, #108]	; (80015c0 <Calcul_Vit+0xb0>)
 8001552:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001556:	1ad3      	subs	r3, r2, r3
 8001558:	2b00      	cmp	r3, #0
 800155a:	bfb8      	it	lt
 800155c:	425b      	neglt	r3, r3
 800155e:	b29a      	uxth	r2, r3
 8001560:	4b18      	ldr	r3, [pc, #96]	; (80015c4 <Calcul_Vit+0xb4>)
 8001562:	801a      	strh	r2, [r3, #0]
	DistD_old = DistD;
 8001564:	4b11      	ldr	r3, [pc, #68]	; (80015ac <Calcul_Vit+0x9c>)
 8001566:	f9b3 2000 	ldrsh.w	r2, [r3]
 800156a:	4b13      	ldr	r3, [pc, #76]	; (80015b8 <Calcul_Vit+0xa8>)
 800156c:	801a      	strh	r2, [r3, #0]
	DistG_old = DistG;
 800156e:	4b11      	ldr	r3, [pc, #68]	; (80015b4 <Calcul_Vit+0xa4>)
 8001570:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001574:	4b12      	ldr	r3, [pc, #72]	; (80015c0 <Calcul_Vit+0xb0>)
 8001576:	801a      	strh	r2, [r3, #0]
	if (DirD == DirG) {
 8001578:	4b13      	ldr	r3, [pc, #76]	; (80015c8 <Calcul_Vit+0xb8>)
 800157a:	881a      	ldrh	r2, [r3, #0]
 800157c:	4b13      	ldr	r3, [pc, #76]	; (80015cc <Calcul_Vit+0xbc>)
 800157e:	881b      	ldrh	r3, [r3, #0]
 8001580:	429a      	cmp	r2, r3
 8001582:	d10c      	bne.n	800159e <Calcul_Vit+0x8e>
		Dist_parcours = Dist_parcours + ((VitD + VitG) >> 1);
 8001584:	4b0d      	ldr	r3, [pc, #52]	; (80015bc <Calcul_Vit+0xac>)
 8001586:	881b      	ldrh	r3, [r3, #0]
 8001588:	461a      	mov	r2, r3
 800158a:	4b0e      	ldr	r3, [pc, #56]	; (80015c4 <Calcul_Vit+0xb4>)
 800158c:	881b      	ldrh	r3, [r3, #0]
 800158e:	4413      	add	r3, r2
 8001590:	105b      	asrs	r3, r3, #1
 8001592:	461a      	mov	r2, r3
 8001594:	4b0e      	ldr	r3, [pc, #56]	; (80015d0 <Calcul_Vit+0xc0>)
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	4413      	add	r3, r2
 800159a:	4a0d      	ldr	r2, [pc, #52]	; (80015d0 <Calcul_Vit+0xc0>)
 800159c:	6013      	str	r3, [r2, #0]
	}
}
 800159e:	bf00      	nop
 80015a0:	46bd      	mov	sp, r7
 80015a2:	bc80      	pop	{r7}
 80015a4:	4770      	bx	lr
 80015a6:	bf00      	nop
 80015a8:	200001e0 	.word	0x200001e0
 80015ac:	200000de 	.word	0x200000de
 80015b0:	20000220 	.word	0x20000220
 80015b4:	200000e0 	.word	0x200000e0
 80015b8:	200000e2 	.word	0x200000e2
 80015bc:	200000da 	.word	0x200000da
 80015c0:	200000e4 	.word	0x200000e4
 80015c4:	200000dc 	.word	0x200000dc
 80015c8:	200000d2 	.word	0x200000d2
 80015cc:	200000d4 	.word	0x200000d4
 80015d0:	200000f0 	.word	0x200000f0

080015d4 <regulateur>:

void regulateur(void) {
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b084      	sub	sp, #16
 80015d8:	af00      	add	r7, sp, #0
	enum ETAT {
		ARRET, ACTIF
	};
	static enum ETAT Etat = ARRET;
	uint16_t Kp_D = CKp_D;
 80015da:	2364      	movs	r3, #100	; 0x64
 80015dc:	81fb      	strh	r3, [r7, #14]
	uint16_t Kp_G = CKp_G;
 80015de:	2364      	movs	r3, #100	; 0x64
 80015e0:	81bb      	strh	r3, [r7, #12]
	uint16_t Ki_D = CKi_D;
 80015e2:	2350      	movs	r3, #80	; 0x50
 80015e4:	817b      	strh	r3, [r7, #10]
	uint16_t Ki_G = CKi_G;
 80015e6:	2350      	movs	r3, #80	; 0x50
 80015e8:	813b      	strh	r3, [r7, #8]
	uint16_t Kd_D = CKd_D;
 80015ea:	2300      	movs	r3, #0
 80015ec:	80fb      	strh	r3, [r7, #6]
	uint16_t Kd_G = CKd_G;
 80015ee:	2300      	movs	r3, #0
 80015f0:	80bb      	strh	r3, [r7, #4]
	static int16_t S_erreursD = 0;
	static int16_t S_erreursG = 0;
	static int16_t V_erreurD = 0;
	static int16_t V_erreurG = 0;

	switch (Etat) {
 80015f2:	4b98      	ldr	r3, [pc, #608]	; (8001854 <regulateur+0x280>)
 80015f4:	781b      	ldrb	r3, [r3, #0]
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d002      	beq.n	8001600 <regulateur+0x2c>
 80015fa:	2b01      	cmp	r3, #1
 80015fc:	d049      	beq.n	8001692 <regulateur+0xbe>

		}
		break;
	}
	}
}
 80015fe:	e125      	b.n	800184c <regulateur+0x278>
		if (Mode == ACTIF)
 8001600:	4b95      	ldr	r3, [pc, #596]	; (8001858 <regulateur+0x284>)
 8001602:	781b      	ldrb	r3, [r3, #0]
 8001604:	b2db      	uxtb	r3, r3
 8001606:	2b01      	cmp	r3, #1
 8001608:	d103      	bne.n	8001612 <regulateur+0x3e>
			Etat = ACTIF;
 800160a:	4b92      	ldr	r3, [pc, #584]	; (8001854 <regulateur+0x280>)
 800160c:	2201      	movs	r2, #1
 800160e:	701a      	strb	r2, [r3, #0]
		break;
 8001610:	e11c      	b.n	800184c <regulateur+0x278>
			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, 0);
 8001612:	4b92      	ldr	r3, [pc, #584]	; (800185c <regulateur+0x288>)
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	2200      	movs	r2, #0
 8001618:	641a      	str	r2, [r3, #64]	; 0x40
			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 0);
 800161a:	4b90      	ldr	r3, [pc, #576]	; (800185c <regulateur+0x288>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	2200      	movs	r2, #0
 8001620:	635a      	str	r2, [r3, #52]	; 0x34
			HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_4);
 8001622:	210c      	movs	r1, #12
 8001624:	488d      	ldr	r0, [pc, #564]	; (800185c <regulateur+0x288>)
 8001626:	f003 fc07 	bl	8004e38 <HAL_TIM_PWM_Stop>
			HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_1);
 800162a:	2100      	movs	r1, #0
 800162c:	488b      	ldr	r0, [pc, #556]	; (800185c <regulateur+0x288>)
 800162e:	f003 fc03 	bl	8004e38 <HAL_TIM_PWM_Stop>
			HAL_GPIO_WritePin(IR3_out_GPIO_Port, IR3_out_Pin, GPIO_PIN_RESET);
 8001632:	2200      	movs	r2, #0
 8001634:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001638:	4889      	ldr	r0, [pc, #548]	; (8001860 <regulateur+0x28c>)
 800163a:	f002 fe01 	bl	8004240 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(IR4_out_GPIO_Port, IR4_out_Pin, GPIO_PIN_RESET);
 800163e:	2200      	movs	r2, #0
 8001640:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001644:	4887      	ldr	r0, [pc, #540]	; (8001864 <regulateur+0x290>)
 8001646:	f002 fdfb 	bl	8004240 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(IR1_out_GPIO_Port, IR1_out_Pin, GPIO_PIN_RESET);
 800164a:	2200      	movs	r2, #0
 800164c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001650:	4884      	ldr	r0, [pc, #528]	; (8001864 <regulateur+0x290>)
 8001652:	f002 fdf5 	bl	8004240 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(IR2_out_GPIO_Port, IR2_out_Pin, GPIO_PIN_RESET);
 8001656:	2200      	movs	r2, #0
 8001658:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800165c:	4881      	ldr	r0, [pc, #516]	; (8001864 <regulateur+0x290>)
 800165e:	f002 fdef 	bl	8004240 <HAL_GPIO_WritePin>
			HAL_PWR_EnterSLEEPMode(PWR_LOWPOWERREGULATOR_ON,
 8001662:	2101      	movs	r1, #1
 8001664:	2001      	movs	r0, #1
 8001666:	f002 fe1b 	bl	80042a0 <HAL_PWR_EnterSLEEPMode>
			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, 0);
 800166a:	4b7c      	ldr	r3, [pc, #496]	; (800185c <regulateur+0x288>)
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	2200      	movs	r2, #0
 8001670:	641a      	str	r2, [r3, #64]	; 0x40
			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 0);
 8001672:	4b7a      	ldr	r3, [pc, #488]	; (800185c <regulateur+0x288>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	2200      	movs	r2, #0
 8001678:	635a      	str	r2, [r3, #52]	; 0x34
			HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 800167a:	210c      	movs	r1, #12
 800167c:	4877      	ldr	r0, [pc, #476]	; (800185c <regulateur+0x288>)
 800167e:	f003 fba9 	bl	8004dd4 <HAL_TIM_PWM_Start>
			HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8001682:	2100      	movs	r1, #0
 8001684:	4875      	ldr	r0, [pc, #468]	; (800185c <regulateur+0x288>)
 8001686:	f003 fba5 	bl	8004dd4 <HAL_TIM_PWM_Start>
			Time = 0;
 800168a:	4b77      	ldr	r3, [pc, #476]	; (8001868 <regulateur+0x294>)
 800168c:	2200      	movs	r2, #0
 800168e:	601a      	str	r2, [r3, #0]
		break;
 8001690:	e0dc      	b.n	800184c <regulateur+0x278>
		if ((CVitD != 0) && (CVitG != 0))
 8001692:	4b76      	ldr	r3, [pc, #472]	; (800186c <regulateur+0x298>)
 8001694:	881b      	ldrh	r3, [r3, #0]
 8001696:	2b00      	cmp	r3, #0
 8001698:	d006      	beq.n	80016a8 <regulateur+0xd4>
 800169a:	4b75      	ldr	r3, [pc, #468]	; (8001870 <regulateur+0x29c>)
 800169c:	881b      	ldrh	r3, [r3, #0]
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d002      	beq.n	80016a8 <regulateur+0xd4>
			Time = 0;
 80016a2:	4b71      	ldr	r3, [pc, #452]	; (8001868 <regulateur+0x294>)
 80016a4:	2200      	movs	r2, #0
 80016a6:	601a      	str	r2, [r3, #0]
		if ((Mode == SLEEP) && (VitD == 0) && (VitG == 0) && Time > T_2_S)
 80016a8:	4b6b      	ldr	r3, [pc, #428]	; (8001858 <regulateur+0x284>)
 80016aa:	781b      	ldrb	r3, [r3, #0]
 80016ac:	b2db      	uxtb	r3, r3
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d110      	bne.n	80016d4 <regulateur+0x100>
 80016b2:	4b70      	ldr	r3, [pc, #448]	; (8001874 <regulateur+0x2a0>)
 80016b4:	881b      	ldrh	r3, [r3, #0]
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d10c      	bne.n	80016d4 <regulateur+0x100>
 80016ba:	4b6f      	ldr	r3, [pc, #444]	; (8001878 <regulateur+0x2a4>)
 80016bc:	881b      	ldrh	r3, [r3, #0]
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d108      	bne.n	80016d4 <regulateur+0x100>
 80016c2:	4b69      	ldr	r3, [pc, #420]	; (8001868 <regulateur+0x294>)
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80016ca:	d903      	bls.n	80016d4 <regulateur+0x100>
			Etat = ARRET;
 80016cc:	4b61      	ldr	r3, [pc, #388]	; (8001854 <regulateur+0x280>)
 80016ce:	2200      	movs	r2, #0
 80016d0:	701a      	strb	r2, [r3, #0]
		break;
 80016d2:	e0ba      	b.n	800184a <regulateur+0x276>
			ErreurD = CVitD - VitD;
 80016d4:	4b65      	ldr	r3, [pc, #404]	; (800186c <regulateur+0x298>)
 80016d6:	881a      	ldrh	r2, [r3, #0]
 80016d8:	4b66      	ldr	r3, [pc, #408]	; (8001874 <regulateur+0x2a0>)
 80016da:	881b      	ldrh	r3, [r3, #0]
 80016dc:	1ad3      	subs	r3, r2, r3
 80016de:	b29b      	uxth	r3, r3
 80016e0:	b21a      	sxth	r2, r3
 80016e2:	4b66      	ldr	r3, [pc, #408]	; (800187c <regulateur+0x2a8>)
 80016e4:	801a      	strh	r2, [r3, #0]
			ErreurG = CVitG - VitG;
 80016e6:	4b62      	ldr	r3, [pc, #392]	; (8001870 <regulateur+0x29c>)
 80016e8:	881a      	ldrh	r2, [r3, #0]
 80016ea:	4b63      	ldr	r3, [pc, #396]	; (8001878 <regulateur+0x2a4>)
 80016ec:	881b      	ldrh	r3, [r3, #0]
 80016ee:	1ad3      	subs	r3, r2, r3
 80016f0:	b29b      	uxth	r3, r3
 80016f2:	b21a      	sxth	r2, r3
 80016f4:	4b62      	ldr	r3, [pc, #392]	; (8001880 <regulateur+0x2ac>)
 80016f6:	801a      	strh	r2, [r3, #0]
			S_erreursD += ErreurD;
 80016f8:	4b62      	ldr	r3, [pc, #392]	; (8001884 <regulateur+0x2b0>)
 80016fa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016fe:	b29a      	uxth	r2, r3
 8001700:	4b5e      	ldr	r3, [pc, #376]	; (800187c <regulateur+0x2a8>)
 8001702:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001706:	b29b      	uxth	r3, r3
 8001708:	4413      	add	r3, r2
 800170a:	b29b      	uxth	r3, r3
 800170c:	b21a      	sxth	r2, r3
 800170e:	4b5d      	ldr	r3, [pc, #372]	; (8001884 <regulateur+0x2b0>)
 8001710:	801a      	strh	r2, [r3, #0]
			S_erreursG += ErreurG;
 8001712:	4b5d      	ldr	r3, [pc, #372]	; (8001888 <regulateur+0x2b4>)
 8001714:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001718:	b29a      	uxth	r2, r3
 800171a:	4b59      	ldr	r3, [pc, #356]	; (8001880 <regulateur+0x2ac>)
 800171c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001720:	b29b      	uxth	r3, r3
 8001722:	4413      	add	r3, r2
 8001724:	b29b      	uxth	r3, r3
 8001726:	b21a      	sxth	r2, r3
 8001728:	4b57      	ldr	r3, [pc, #348]	; (8001888 <regulateur+0x2b4>)
 800172a:	801a      	strh	r2, [r3, #0]
			V_erreurD = ErreurD - ErreurD_old;
 800172c:	4b53      	ldr	r3, [pc, #332]	; (800187c <regulateur+0x2a8>)
 800172e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001732:	b29a      	uxth	r2, r3
 8001734:	4b55      	ldr	r3, [pc, #340]	; (800188c <regulateur+0x2b8>)
 8001736:	f9b3 3000 	ldrsh.w	r3, [r3]
 800173a:	b29b      	uxth	r3, r3
 800173c:	1ad3      	subs	r3, r2, r3
 800173e:	b29b      	uxth	r3, r3
 8001740:	b21a      	sxth	r2, r3
 8001742:	4b53      	ldr	r3, [pc, #332]	; (8001890 <regulateur+0x2bc>)
 8001744:	801a      	strh	r2, [r3, #0]
			V_erreurG = ErreurG - ErreurG_old;
 8001746:	4b4e      	ldr	r3, [pc, #312]	; (8001880 <regulateur+0x2ac>)
 8001748:	f9b3 3000 	ldrsh.w	r3, [r3]
 800174c:	b29a      	uxth	r2, r3
 800174e:	4b51      	ldr	r3, [pc, #324]	; (8001894 <regulateur+0x2c0>)
 8001750:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001754:	b29b      	uxth	r3, r3
 8001756:	1ad3      	subs	r3, r2, r3
 8001758:	b29b      	uxth	r3, r3
 800175a:	b21a      	sxth	r2, r3
 800175c:	4b4e      	ldr	r3, [pc, #312]	; (8001898 <regulateur+0x2c4>)
 800175e:	801a      	strh	r2, [r3, #0]
			ErreurD_old = ErreurD;
 8001760:	4b46      	ldr	r3, [pc, #280]	; (800187c <regulateur+0x2a8>)
 8001762:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001766:	4b49      	ldr	r3, [pc, #292]	; (800188c <regulateur+0x2b8>)
 8001768:	801a      	strh	r2, [r3, #0]
			ErreurG_old = ErreurG;
 800176a:	4b45      	ldr	r3, [pc, #276]	; (8001880 <regulateur+0x2ac>)
 800176c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001770:	4b48      	ldr	r3, [pc, #288]	; (8001894 <regulateur+0x2c0>)
 8001772:	801a      	strh	r2, [r3, #0]
			Cmde_VitD = (unsigned int) Kp_D * (int) (ErreurD)
 8001774:	89fb      	ldrh	r3, [r7, #14]
 8001776:	4a41      	ldr	r2, [pc, #260]	; (800187c <regulateur+0x2a8>)
 8001778:	f9b2 2000 	ldrsh.w	r2, [r2]
 800177c:	fb03 f202 	mul.w	r2, r3, r2
					+ (unsigned int) Ki_D * ((int) S_erreursD)
 8001780:	897b      	ldrh	r3, [r7, #10]
 8001782:	4940      	ldr	r1, [pc, #256]	; (8001884 <regulateur+0x2b0>)
 8001784:	f9b1 1000 	ldrsh.w	r1, [r1]
 8001788:	fb01 f303 	mul.w	r3, r1, r3
 800178c:	441a      	add	r2, r3
					+ (unsigned int) Kd_D * (int) V_erreurD;
 800178e:	88fb      	ldrh	r3, [r7, #6]
 8001790:	493f      	ldr	r1, [pc, #252]	; (8001890 <regulateur+0x2bc>)
 8001792:	f9b1 1000 	ldrsh.w	r1, [r1]
 8001796:	fb01 f303 	mul.w	r3, r1, r3
 800179a:	4413      	add	r3, r2
 800179c:	461a      	mov	r2, r3
			Cmde_VitD = (unsigned int) Kp_D * (int) (ErreurD)
 800179e:	4b3f      	ldr	r3, [pc, #252]	; (800189c <regulateur+0x2c8>)
 80017a0:	601a      	str	r2, [r3, #0]
			Cmde_VitG = (unsigned int) Kp_G * (int) (ErreurG)
 80017a2:	89bb      	ldrh	r3, [r7, #12]
 80017a4:	4a36      	ldr	r2, [pc, #216]	; (8001880 <regulateur+0x2ac>)
 80017a6:	f9b2 2000 	ldrsh.w	r2, [r2]
 80017aa:	fb03 f202 	mul.w	r2, r3, r2
					+ (unsigned int) Ki_G * ((int) S_erreursG)
 80017ae:	893b      	ldrh	r3, [r7, #8]
 80017b0:	4935      	ldr	r1, [pc, #212]	; (8001888 <regulateur+0x2b4>)
 80017b2:	f9b1 1000 	ldrsh.w	r1, [r1]
 80017b6:	fb01 f303 	mul.w	r3, r1, r3
 80017ba:	441a      	add	r2, r3
					+ (unsigned int) Kd_G * (int) V_erreurG;
 80017bc:	88bb      	ldrh	r3, [r7, #4]
 80017be:	4936      	ldr	r1, [pc, #216]	; (8001898 <regulateur+0x2c4>)
 80017c0:	f9b1 1000 	ldrsh.w	r1, [r1]
 80017c4:	fb01 f303 	mul.w	r3, r1, r3
 80017c8:	4413      	add	r3, r2
 80017ca:	461a      	mov	r2, r3
			Cmde_VitG = (unsigned int) Kp_G * (int) (ErreurG)
 80017cc:	4b34      	ldr	r3, [pc, #208]	; (80018a0 <regulateur+0x2cc>)
 80017ce:	601a      	str	r2, [r3, #0]
			if (Cmde_VitD < 0)
 80017d0:	4b32      	ldr	r3, [pc, #200]	; (800189c <regulateur+0x2c8>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	da02      	bge.n	80017de <regulateur+0x20a>
				Cmde_VitD = 0;
 80017d8:	4b30      	ldr	r3, [pc, #192]	; (800189c <regulateur+0x2c8>)
 80017da:	2200      	movs	r2, #0
 80017dc:	601a      	str	r2, [r3, #0]
			if (Cmde_VitG < 0)
 80017de:	4b30      	ldr	r3, [pc, #192]	; (80018a0 <regulateur+0x2cc>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	da02      	bge.n	80017ec <regulateur+0x218>
				Cmde_VitG = 0;
 80017e6:	4b2e      	ldr	r3, [pc, #184]	; (80018a0 <regulateur+0x2cc>)
 80017e8:	2200      	movs	r2, #0
 80017ea:	601a      	str	r2, [r3, #0]
			if (Cmde_VitD > 100 * POURCENT)
 80017ec:	4b2b      	ldr	r3, [pc, #172]	; (800189c <regulateur+0x2c8>)
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	f5b3 4f7a 	cmp.w	r3, #64000	; 0xfa00
 80017f4:	dd03      	ble.n	80017fe <regulateur+0x22a>
				Cmde_VitD = 100 * POURCENT;
 80017f6:	4b29      	ldr	r3, [pc, #164]	; (800189c <regulateur+0x2c8>)
 80017f8:	f44f 427a 	mov.w	r2, #64000	; 0xfa00
 80017fc:	601a      	str	r2, [r3, #0]
			if (Cmde_VitG > 100 * POURCENT)
 80017fe:	4b28      	ldr	r3, [pc, #160]	; (80018a0 <regulateur+0x2cc>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f5b3 4f7a 	cmp.w	r3, #64000	; 0xfa00
 8001806:	dd03      	ble.n	8001810 <regulateur+0x23c>
				Cmde_VitG = 100 * POURCENT;
 8001808:	4b25      	ldr	r3, [pc, #148]	; (80018a0 <regulateur+0x2cc>)
 800180a:	f44f 427a 	mov.w	r2, #64000	; 0xfa00
 800180e:	601a      	str	r2, [r3, #0]
			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, (uint16_t ) Cmde_VitG);
 8001810:	4b23      	ldr	r3, [pc, #140]	; (80018a0 <regulateur+0x2cc>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	b29a      	uxth	r2, r3
 8001816:	4b11      	ldr	r3, [pc, #68]	; (800185c <regulateur+0x288>)
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, (uint16_t ) Cmde_VitD);
 800181c:	4b1f      	ldr	r3, [pc, #124]	; (800189c <regulateur+0x2c8>)
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	b29a      	uxth	r2, r3
 8001822:	4b0e      	ldr	r3, [pc, #56]	; (800185c <regulateur+0x288>)
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	641a      	str	r2, [r3, #64]	; 0x40
			HAL_GPIO_WritePin(DIR1_GPIO_Port, DIR1_Pin, (GPIO_PinState) DirD);
 8001828:	4b1e      	ldr	r3, [pc, #120]	; (80018a4 <regulateur+0x2d0>)
 800182a:	881b      	ldrh	r3, [r3, #0]
 800182c:	b2db      	uxtb	r3, r3
 800182e:	461a      	mov	r2, r3
 8001830:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001834:	481c      	ldr	r0, [pc, #112]	; (80018a8 <regulateur+0x2d4>)
 8001836:	f002 fd03 	bl	8004240 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(DIR2_GPIO_Port, DIR2_Pin, (GPIO_PinState) DirG);
 800183a:	4b1c      	ldr	r3, [pc, #112]	; (80018ac <regulateur+0x2d8>)
 800183c:	881b      	ldrh	r3, [r3, #0]
 800183e:	b2db      	uxtb	r3, r3
 8001840:	461a      	mov	r2, r3
 8001842:	2104      	movs	r1, #4
 8001844:	4807      	ldr	r0, [pc, #28]	; (8001864 <regulateur+0x290>)
 8001846:	f002 fcfb 	bl	8004240 <HAL_GPIO_WritePin>
		break;
 800184a:	bf00      	nop
}
 800184c:	bf00      	nop
 800184e:	3710      	adds	r7, #16
 8001850:	46bd      	mov	sp, r7
 8001852:	bd80      	pop	{r7, pc}
 8001854:	2000014a 	.word	0x2000014a
 8001858:	200000a2 	.word	0x200000a2
 800185c:	200001a0 	.word	0x200001a0
 8001860:	40010800 	.word	0x40010800
 8001864:	40010c00 	.word	0x40010c00
 8001868:	200000ac 	.word	0x200000ac
 800186c:	200000d0 	.word	0x200000d0
 8001870:	200000ce 	.word	0x200000ce
 8001874:	200000da 	.word	0x200000da
 8001878:	200000dc 	.word	0x200000dc
 800187c:	2000014c 	.word	0x2000014c
 8001880:	2000014e 	.word	0x2000014e
 8001884:	20000150 	.word	0x20000150
 8001888:	20000152 	.word	0x20000152
 800188c:	20000154 	.word	0x20000154
 8001890:	20000156 	.word	0x20000156
 8001894:	20000158 	.word	0x20000158
 8001898:	2000015a 	.word	0x2000015a
 800189c:	200000e8 	.word	0x200000e8
 80018a0:	200000ec 	.word	0x200000ec
 80018a4:	200000d2 	.word	0x200000d2
 80018a8:	40011000 	.word	0x40011000
 80018ac:	200000d4 	.word	0x200000d4

080018b0 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b082      	sub	sp, #8
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART3) {
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	4a3b      	ldr	r2, [pc, #236]	; (80019ac <HAL_UART_RxCpltCallback+0xfc>)
 80018be:	4293      	cmp	r3, r2
 80018c0:	d16f      	bne.n	80019a2 <HAL_UART_RxCpltCallback+0xf2>

		switch (BLUE_RX) {
 80018c2:	4b3b      	ldr	r3, [pc, #236]	; (80019b0 <HAL_UART_RxCpltCallback+0x100>)
 80018c4:	781b      	ldrb	r3, [r3, #0]
 80018c6:	3b42      	subs	r3, #66	; 0x42
 80018c8:	2b18      	cmp	r3, #24
 80018ca:	d860      	bhi.n	800198e <HAL_UART_RxCpltCallback+0xde>
 80018cc:	a201      	add	r2, pc, #4	; (adr r2, 80018d4 <HAL_UART_RxCpltCallback+0x24>)
 80018ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018d2:	bf00      	nop
 80018d4:	08001941 	.word	0x08001941
 80018d8:	0800198f 	.word	0x0800198f
 80018dc:	08001997 	.word	0x08001997
 80018e0:	0800198f 	.word	0x0800198f
 80018e4:	08001939 	.word	0x08001939
 80018e8:	0800198f 	.word	0x0800198f
 80018ec:	0800198f 	.word	0x0800198f
 80018f0:	0800198f 	.word	0x0800198f
 80018f4:	0800198f 	.word	0x0800198f
 80018f8:	0800198f 	.word	0x0800198f
 80018fc:	08001949 	.word	0x08001949
 8001900:	08001961 	.word	0x08001961
 8001904:	0800198f 	.word	0x0800198f
 8001908:	0800198f 	.word	0x0800198f
 800190c:	08001969 	.word	0x08001969
 8001910:	0800198f 	.word	0x0800198f
 8001914:	08001951 	.word	0x08001951
 8001918:	08001971 	.word	0x08001971
 800191c:	0800198f 	.word	0x0800198f
 8001920:	08001979 	.word	0x08001979
 8001924:	0800198f 	.word	0x0800198f
 8001928:	08001981 	.word	0x08001981
 800192c:	0800198f 	.word	0x0800198f
 8001930:	0800198f 	.word	0x0800198f
 8001934:	08001959 	.word	0x08001959
		case 'F': {
			CMDE = AVANT;
 8001938:	4b1e      	ldr	r3, [pc, #120]	; (80019b4 <HAL_UART_RxCpltCallback+0x104>)
 800193a:	2203      	movs	r2, #3
 800193c:	701a      	strb	r2, [r3, #0]
			//New_CMDE = 1;
			break;
 800193e:	e02b      	b.n	8001998 <HAL_UART_RxCpltCallback+0xe8>
		}

		case 'B': {
			CMDE = ARRIERE;
 8001940:	4b1c      	ldr	r3, [pc, #112]	; (80019b4 <HAL_UART_RxCpltCallback+0x104>)
 8001942:	2204      	movs	r2, #4
 8001944:	701a      	strb	r2, [r3, #0]
			//New_CMDE = 1;
			break;
 8001946:	e027      	b.n	8001998 <HAL_UART_RxCpltCallback+0xe8>
		}

		case 'L': {
			CMDE = GAUCHE;
 8001948:	4b1a      	ldr	r3, [pc, #104]	; (80019b4 <HAL_UART_RxCpltCallback+0x104>)
 800194a:	2206      	movs	r2, #6
 800194c:	701a      	strb	r2, [r3, #0]
			//New_CMDE = 1;
			break;
 800194e:	e023      	b.n	8001998 <HAL_UART_RxCpltCallback+0xe8>
		}

		case 'R': {
			CMDE = DROITE;
 8001950:	4b18      	ldr	r3, [pc, #96]	; (80019b4 <HAL_UART_RxCpltCallback+0x104>)
 8001952:	2205      	movs	r2, #5
 8001954:	701a      	strb	r2, [r3, #0]
			//New_CMDE = 1;
			break;
 8001956:	e01f      	b.n	8001998 <HAL_UART_RxCpltCallback+0xe8>
		case 'D':{
			// disconnect bluetooth
			break;
		}
		case 'Z': {
			CMDE = SERVO_ROTATE_0;
 8001958:	4b16      	ldr	r3, [pc, #88]	; (80019b4 <HAL_UART_RxCpltCallback+0x104>)
 800195a:	2207      	movs	r2, #7
 800195c:	701a      	strb	r2, [r3, #0]
			//New_CMDE = 1;
			break;
 800195e:	e01b      	b.n	8001998 <HAL_UART_RxCpltCallback+0xe8>
		}
		case 'M': {
			CMDE = SERVO_ROTATE_90;
 8001960:	4b14      	ldr	r3, [pc, #80]	; (80019b4 <HAL_UART_RxCpltCallback+0x104>)
 8001962:	2208      	movs	r2, #8
 8001964:	701a      	strb	r2, [r3, #0]
			//New_CMDE = 1;
			break;
 8001966:	e017      	b.n	8001998 <HAL_UART_RxCpltCallback+0xe8>
		}
		case 'P': {
			CMDE = SERVO_ROTATE_180;
 8001968:	4b12      	ldr	r3, [pc, #72]	; (80019b4 <HAL_UART_RxCpltCallback+0x104>)
 800196a:	2209      	movs	r2, #9
 800196c:	701a      	strb	r2, [r3, #0]
			//New_CMDE = 1;
			break;
 800196e:	e013      	b.n	8001998 <HAL_UART_RxCpltCallback+0xe8>
		}
		case 'S': {
			CMDE = STOP_ARRET;
 8001970:	4b10      	ldr	r3, [pc, #64]	; (80019b4 <HAL_UART_RxCpltCallback+0x104>)
 8001972:	2202      	movs	r2, #2
 8001974:	701a      	strb	r2, [r3, #0]
			//New_CMDE = 1;
			break;
 8001976:	e00f      	b.n	8001998 <HAL_UART_RxCpltCallback+0xe8>
		}
		case 'U': {
			CMDE = PARK;
 8001978:	4b0e      	ldr	r3, [pc, #56]	; (80019b4 <HAL_UART_RxCpltCallback+0x104>)
 800197a:	220a      	movs	r2, #10
 800197c:	701a      	strb	r2, [r3, #0]
			//New_CMDE = 1;
			break;
 800197e:	e00b      	b.n	8001998 <HAL_UART_RxCpltCallback+0xe8>
		}
		case 'W': {
			CMDE = MOV_PARK;
 8001980:	4b0c      	ldr	r3, [pc, #48]	; (80019b4 <HAL_UART_RxCpltCallback+0x104>)
 8001982:	220b      	movs	r2, #11
 8001984:	701a      	strb	r2, [r3, #0]
			New_CMDE = 1;
 8001986:	4b0c      	ldr	r3, [pc, #48]	; (80019b8 <HAL_UART_RxCpltCallback+0x108>)
 8001988:	2201      	movs	r2, #1
 800198a:	701a      	strb	r2, [r3, #0]
			break;
 800198c:	e004      	b.n	8001998 <HAL_UART_RxCpltCallback+0xe8>
		}
		default:
			New_CMDE = 1;
 800198e:	4b0a      	ldr	r3, [pc, #40]	; (80019b8 <HAL_UART_RxCpltCallback+0x108>)
 8001990:	2201      	movs	r2, #1
 8001992:	701a      	strb	r2, [r3, #0]
 8001994:	e000      	b.n	8001998 <HAL_UART_RxCpltCallback+0xe8>
			break;
 8001996:	bf00      	nop
		}

		HAL_UART_Receive_IT(&huart3, &BLUE_RX, 1);
 8001998:	2201      	movs	r2, #1
 800199a:	4905      	ldr	r1, [pc, #20]	; (80019b0 <HAL_UART_RxCpltCallback+0x100>)
 800199c:	4807      	ldr	r0, [pc, #28]	; (80019bc <HAL_UART_RxCpltCallback+0x10c>)
 800199e:	f004 fd5c 	bl	800645a <HAL_UART_Receive_IT>

	}
}
 80019a2:	bf00      	nop
 80019a4:	3708      	adds	r7, #8
 80019a6:	46bd      	mov	sp, r7
 80019a8:	bd80      	pop	{r7, pc}
 80019aa:	bf00      	nop
 80019ac:	40004800 	.word	0x40004800
 80019b0:	200000c8 	.word	0x200000c8
 80019b4:	200000a1 	.word	0x200000a1
 80019b8:	200000a3 	.word	0x200000a3
 80019bc:	200002a0 	.word	0x200002a0

080019c0 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b082      	sub	sp, #8
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]

	Dist_ACS_3 = adc_buffer[0] - adc_buffer[5];
 80019c8:	4b15      	ldr	r3, [pc, #84]	; (8001a20 <HAL_ADC_ConvCpltCallback+0x60>)
 80019ca:	881a      	ldrh	r2, [r3, #0]
 80019cc:	4b14      	ldr	r3, [pc, #80]	; (8001a20 <HAL_ADC_ConvCpltCallback+0x60>)
 80019ce:	895b      	ldrh	r3, [r3, #10]
 80019d0:	1ad3      	subs	r3, r2, r3
 80019d2:	b29a      	uxth	r2, r3
 80019d4:	4b13      	ldr	r3, [pc, #76]	; (8001a24 <HAL_ADC_ConvCpltCallback+0x64>)
 80019d6:	801a      	strh	r2, [r3, #0]
	Dist_ACS_4 = adc_buffer[3] - adc_buffer[8];
 80019d8:	4b11      	ldr	r3, [pc, #68]	; (8001a20 <HAL_ADC_ConvCpltCallback+0x60>)
 80019da:	88da      	ldrh	r2, [r3, #6]
 80019dc:	4b10      	ldr	r3, [pc, #64]	; (8001a20 <HAL_ADC_ConvCpltCallback+0x60>)
 80019de:	8a1b      	ldrh	r3, [r3, #16]
 80019e0:	1ad3      	subs	r3, r2, r3
 80019e2:	b29a      	uxth	r2, r3
 80019e4:	4b10      	ldr	r3, [pc, #64]	; (8001a28 <HAL_ADC_ConvCpltCallback+0x68>)
 80019e6:	801a      	strh	r2, [r3, #0]
	Dist_ACS_1 = adc_buffer[1] - adc_buffer[6];
 80019e8:	4b0d      	ldr	r3, [pc, #52]	; (8001a20 <HAL_ADC_ConvCpltCallback+0x60>)
 80019ea:	885a      	ldrh	r2, [r3, #2]
 80019ec:	4b0c      	ldr	r3, [pc, #48]	; (8001a20 <HAL_ADC_ConvCpltCallback+0x60>)
 80019ee:	899b      	ldrh	r3, [r3, #12]
 80019f0:	1ad3      	subs	r3, r2, r3
 80019f2:	b29a      	uxth	r2, r3
 80019f4:	4b0d      	ldr	r3, [pc, #52]	; (8001a2c <HAL_ADC_ConvCpltCallback+0x6c>)
 80019f6:	801a      	strh	r2, [r3, #0]
	Dist_ACS_2 = adc_buffer[2] - adc_buffer[7];
 80019f8:	4b09      	ldr	r3, [pc, #36]	; (8001a20 <HAL_ADC_ConvCpltCallback+0x60>)
 80019fa:	889a      	ldrh	r2, [r3, #4]
 80019fc:	4b08      	ldr	r3, [pc, #32]	; (8001a20 <HAL_ADC_ConvCpltCallback+0x60>)
 80019fe:	89db      	ldrh	r3, [r3, #14]
 8001a00:	1ad3      	subs	r3, r2, r3
 8001a02:	b29a      	uxth	r2, r3
 8001a04:	4b0a      	ldr	r3, [pc, #40]	; (8001a30 <HAL_ADC_ConvCpltCallback+0x70>)
 8001a06:	801a      	strh	r2, [r3, #0]
	vbatt = adc_buffer[4];
 8001a08:	4b05      	ldr	r3, [pc, #20]	; (8001a20 <HAL_ADC_ConvCpltCallback+0x60>)
 8001a0a:	891b      	ldrh	r3, [r3, #8]
 8001a0c:	461a      	mov	r2, r3
 8001a0e:	4b09      	ldr	r3, [pc, #36]	; (8001a34 <HAL_ADC_ConvCpltCallback+0x74>)
 8001a10:	601a      	str	r2, [r3, #0]
	HAL_ADC_Stop_DMA(hadc);
 8001a12:	6878      	ldr	r0, [r7, #4]
 8001a14:	f001 fb80 	bl	8003118 <HAL_ADC_Stop_DMA>
}
 8001a18:	bf00      	nop
 8001a1a:	3708      	adds	r7, #8
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	bd80      	pop	{r7, pc}
 8001a20:	200000b4 	.word	0x200000b4
 8001a24:	200000a8 	.word	0x200000a8
 8001a28:	200000aa 	.word	0x200000aa
 8001a2c:	200000a4 	.word	0x200000a4
 8001a30:	200000a6 	.word	0x200000a6
 8001a34:	20000100 	.word	0x20000100

08001a38 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef * htim) {
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b082      	sub	sp, #8
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
	static unsigned char cpt = 0;

	if ( htim->Instance == TIM2) {
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001a48:	d176      	bne.n	8001b38 <HAL_TIM_PeriodElapsedCallback+0x100>
		cpt++;
 8001a4a:	4b3d      	ldr	r3, [pc, #244]	; (8001b40 <HAL_TIM_PeriodElapsedCallback+0x108>)
 8001a4c:	781b      	ldrb	r3, [r3, #0]
 8001a4e:	3301      	adds	r3, #1
 8001a50:	b2da      	uxtb	r2, r3
 8001a52:	4b3b      	ldr	r3, [pc, #236]	; (8001b40 <HAL_TIM_PeriodElapsedCallback+0x108>)
 8001a54:	701a      	strb	r2, [r3, #0]
		Time++;
 8001a56:	4b3b      	ldr	r3, [pc, #236]	; (8001b44 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	3301      	adds	r3, #1
 8001a5c:	4a39      	ldr	r2, [pc, #228]	; (8001b44 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8001a5e:	6013      	str	r3, [r2, #0]
		Tech++;
 8001a60:	4b39      	ldr	r3, [pc, #228]	; (8001b48 <HAL_TIM_PeriodElapsedCallback+0x110>)
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	3301      	adds	r3, #1
 8001a66:	4a38      	ldr	r2, [pc, #224]	; (8001b48 <HAL_TIM_PeriodElapsedCallback+0x110>)
 8001a68:	6013      	str	r3, [r2, #0]

		// Compteurs ajoutés
		TurnServoCounter++;
 8001a6a:	4b38      	ldr	r3, [pc, #224]	; (8001b4c <HAL_TIM_PeriodElapsedCallback+0x114>)
 8001a6c:	881b      	ldrh	r3, [r3, #0]
 8001a6e:	b29b      	uxth	r3, r3
 8001a70:	3301      	adds	r3, #1
 8001a72:	b29a      	uxth	r2, r3
 8001a74:	4b35      	ldr	r3, [pc, #212]	; (8001b4c <HAL_TIM_PeriodElapsedCallback+0x114>)
 8001a76:	801a      	strh	r2, [r3, #0]
		tour_dist++;
 8001a78:	4b35      	ldr	r3, [pc, #212]	; (8001b50 <HAL_TIM_PeriodElapsedCallback+0x118>)
 8001a7a:	881b      	ldrh	r3, [r3, #0]
 8001a7c:	b29b      	uxth	r3, r3
 8001a7e:	3301      	adds	r3, #1
 8001a80:	b29a      	uxth	r2, r3
 8001a82:	4b33      	ldr	r3, [pc, #204]	; (8001b50 <HAL_TIM_PeriodElapsedCallback+0x118>)
 8001a84:	801a      	strh	r2, [r3, #0]
		TurnCounter++;
 8001a86:	4b33      	ldr	r3, [pc, #204]	; (8001b54 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 8001a88:	881b      	ldrh	r3, [r3, #0]
 8001a8a:	b29b      	uxth	r3, r3
 8001a8c:	3301      	adds	r3, #1
 8001a8e:	b29a      	uxth	r2, r3
 8001a90:	4b30      	ldr	r3, [pc, #192]	; (8001b54 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 8001a92:	801a      	strh	r2, [r3, #0]

		switch (cpt) {
 8001a94:	4b2a      	ldr	r3, [pc, #168]	; (8001b40 <HAL_TIM_PeriodElapsedCallback+0x108>)
 8001a96:	781b      	ldrb	r3, [r3, #0]
 8001a98:	3b01      	subs	r3, #1
 8001a9a:	2b03      	cmp	r3, #3
 8001a9c:	d848      	bhi.n	8001b30 <HAL_TIM_PeriodElapsedCallback+0xf8>
 8001a9e:	a201      	add	r2, pc, #4	; (adr r2, 8001aa4 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8001aa0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001aa4:	08001ab5 	.word	0x08001ab5
 8001aa8:	08001ae7 	.word	0x08001ae7
 8001aac:	08001af3 	.word	0x08001af3
 8001ab0:	08001b25 	.word	0x08001b25
		case 1: {
			HAL_GPIO_WritePin(IR3_out_GPIO_Port, IR3_out_Pin, GPIO_PIN_SET);
 8001ab4:	2201      	movs	r2, #1
 8001ab6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001aba:	4827      	ldr	r0, [pc, #156]	; (8001b58 <HAL_TIM_PeriodElapsedCallback+0x120>)
 8001abc:	f002 fbc0 	bl	8004240 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(IR4_out_GPIO_Port, IR4_out_Pin, GPIO_PIN_SET);
 8001ac0:	2201      	movs	r2, #1
 8001ac2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001ac6:	4825      	ldr	r0, [pc, #148]	; (8001b5c <HAL_TIM_PeriodElapsedCallback+0x124>)
 8001ac8:	f002 fbba 	bl	8004240 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(IR1_out_GPIO_Port, IR1_out_Pin, GPIO_PIN_SET);
 8001acc:	2201      	movs	r2, #1
 8001ace:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001ad2:	4822      	ldr	r0, [pc, #136]	; (8001b5c <HAL_TIM_PeriodElapsedCallback+0x124>)
 8001ad4:	f002 fbb4 	bl	8004240 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(IR2_out_GPIO_Port, IR2_out_Pin, GPIO_PIN_SET);
 8001ad8:	2201      	movs	r2, #1
 8001ada:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001ade:	481f      	ldr	r0, [pc, #124]	; (8001b5c <HAL_TIM_PeriodElapsedCallback+0x124>)
 8001ae0:	f002 fbae 	bl	8004240 <HAL_GPIO_WritePin>
			break;
 8001ae4:	e028      	b.n	8001b38 <HAL_TIM_PeriodElapsedCallback+0x100>
		}
		case 2: {
			HAL_ADC_Start_DMA(&hadc1, (uint32_t *) adc_buffer, 10);
 8001ae6:	220a      	movs	r2, #10
 8001ae8:	491d      	ldr	r1, [pc, #116]	; (8001b60 <HAL_TIM_PeriodElapsedCallback+0x128>)
 8001aea:	481e      	ldr	r0, [pc, #120]	; (8001b64 <HAL_TIM_PeriodElapsedCallback+0x12c>)
 8001aec:	f001 fa36 	bl	8002f5c <HAL_ADC_Start_DMA>
			break;
 8001af0:	e022      	b.n	8001b38 <HAL_TIM_PeriodElapsedCallback+0x100>
		}
		case 3: {
			HAL_GPIO_WritePin(IR3_out_GPIO_Port, IR3_out_Pin, GPIO_PIN_RESET);
 8001af2:	2200      	movs	r2, #0
 8001af4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001af8:	4817      	ldr	r0, [pc, #92]	; (8001b58 <HAL_TIM_PeriodElapsedCallback+0x120>)
 8001afa:	f002 fba1 	bl	8004240 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(IR4_out_GPIO_Port, IR4_out_Pin, GPIO_PIN_RESET);
 8001afe:	2200      	movs	r2, #0
 8001b00:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001b04:	4815      	ldr	r0, [pc, #84]	; (8001b5c <HAL_TIM_PeriodElapsedCallback+0x124>)
 8001b06:	f002 fb9b 	bl	8004240 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(IR1_out_GPIO_Port, IR1_out_Pin, GPIO_PIN_RESET);
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001b10:	4812      	ldr	r0, [pc, #72]	; (8001b5c <HAL_TIM_PeriodElapsedCallback+0x124>)
 8001b12:	f002 fb95 	bl	8004240 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(IR2_out_GPIO_Port, IR2_out_Pin, GPIO_PIN_RESET);
 8001b16:	2200      	movs	r2, #0
 8001b18:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001b1c:	480f      	ldr	r0, [pc, #60]	; (8001b5c <HAL_TIM_PeriodElapsedCallback+0x124>)
 8001b1e:	f002 fb8f 	bl	8004240 <HAL_GPIO_WritePin>
			break;
 8001b22:	e009      	b.n	8001b38 <HAL_TIM_PeriodElapsedCallback+0x100>
		}
		case 4: {
			HAL_ADC_Start_DMA(&hadc1, (uint32_t *) adc_buffer, 10);
 8001b24:	220a      	movs	r2, #10
 8001b26:	490e      	ldr	r1, [pc, #56]	; (8001b60 <HAL_TIM_PeriodElapsedCallback+0x128>)
 8001b28:	480e      	ldr	r0, [pc, #56]	; (8001b64 <HAL_TIM_PeriodElapsedCallback+0x12c>)
 8001b2a:	f001 fa17 	bl	8002f5c <HAL_ADC_Start_DMA>
			break;
 8001b2e:	e003      	b.n	8001b38 <HAL_TIM_PeriodElapsedCallback+0x100>
		}
		default:
			cpt = 0;
 8001b30:	4b03      	ldr	r3, [pc, #12]	; (8001b40 <HAL_TIM_PeriodElapsedCallback+0x108>)
 8001b32:	2200      	movs	r2, #0
 8001b34:	701a      	strb	r2, [r3, #0]
		}
	}
}
 8001b36:	e7ff      	b.n	8001b38 <HAL_TIM_PeriodElapsedCallback+0x100>
 8001b38:	bf00      	nop
 8001b3a:	3708      	adds	r7, #8
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	bd80      	pop	{r7, pc}
 8001b40:	2000015c 	.word	0x2000015c
 8001b44:	200000ac 	.word	0x200000ac
 8001b48:	200000b0 	.word	0x200000b0
 8001b4c:	2000011c 	.word	0x2000011c
 8001b50:	20000120 	.word	0x20000120
 8001b54:	2000011e 	.word	0x2000011e
 8001b58:	40010800 	.word	0x40010800
 8001b5c:	40010c00 	.word	0x40010c00
 8001b60:	200000b4 	.word	0x200000b4
 8001b64:	2000002c 	.word	0x2000002c

08001b68 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8001b68:	b480      	push	{r7}
 8001b6a:	b083      	sub	sp, #12
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	4603      	mov	r3, r0
 8001b70:	80fb      	strh	r3, [r7, #6]

	static unsigned char TOGGLE = 0;

	if (TOGGLE)
 8001b72:	4b0c      	ldr	r3, [pc, #48]	; (8001ba4 <HAL_GPIO_EXTI_Callback+0x3c>)
 8001b74:	781b      	ldrb	r3, [r3, #0]
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d003      	beq.n	8001b82 <HAL_GPIO_EXTI_Callback+0x1a>
		CMDE = STOP;
 8001b7a:	4b0b      	ldr	r3, [pc, #44]	; (8001ba8 <HAL_GPIO_EXTI_Callback+0x40>)
 8001b7c:	2201      	movs	r2, #1
 8001b7e:	701a      	strb	r2, [r3, #0]
 8001b80:	e002      	b.n	8001b88 <HAL_GPIO_EXTI_Callback+0x20>
	else
		CMDE = START;
 8001b82:	4b09      	ldr	r3, [pc, #36]	; (8001ba8 <HAL_GPIO_EXTI_Callback+0x40>)
 8001b84:	2200      	movs	r2, #0
 8001b86:	701a      	strb	r2, [r3, #0]
	TOGGLE = ~TOGGLE;
 8001b88:	4b06      	ldr	r3, [pc, #24]	; (8001ba4 <HAL_GPIO_EXTI_Callback+0x3c>)
 8001b8a:	781b      	ldrb	r3, [r3, #0]
 8001b8c:	43db      	mvns	r3, r3
 8001b8e:	b2da      	uxtb	r2, r3
 8001b90:	4b04      	ldr	r3, [pc, #16]	; (8001ba4 <HAL_GPIO_EXTI_Callback+0x3c>)
 8001b92:	701a      	strb	r2, [r3, #0]
	New_CMDE = 1;
 8001b94:	4b05      	ldr	r3, [pc, #20]	; (8001bac <HAL_GPIO_EXTI_Callback+0x44>)
 8001b96:	2201      	movs	r2, #1
 8001b98:	701a      	strb	r2, [r3, #0]
}
 8001b9a:	bf00      	nop
 8001b9c:	370c      	adds	r7, #12
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	bc80      	pop	{r7}
 8001ba2:	4770      	bx	lr
 8001ba4:	2000015d 	.word	0x2000015d
 8001ba8:	200000a1 	.word	0x200000a1
 8001bac:	200000a3 	.word	0x200000a3

08001bb0 <HAL_ADC_LevelOutOfWindowCallback>:

// LED TÉMOIN BATTERIE
void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc){
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b082      	sub	sp, #8
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8001bb8:	2201      	movs	r2, #1
 8001bba:	2120      	movs	r1, #32
 8001bbc:	4803      	ldr	r0, [pc, #12]	; (8001bcc <HAL_ADC_LevelOutOfWindowCallback+0x1c>)
 8001bbe:	f002 fb3f 	bl	8004240 <HAL_GPIO_WritePin>
}
 8001bc2:	bf00      	nop
 8001bc4:	3708      	adds	r7, #8
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	bd80      	pop	{r7, pc}
 8001bca:	bf00      	nop
 8001bcc:	40010800 	.word	0x40010800

08001bd0 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef * htim) {
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b082      	sub	sp, #8
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
	if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2) {
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	7f1b      	ldrb	r3, [r3, #28]
 8001bdc:	2b02      	cmp	r3, #2
 8001bde:	d117      	bne.n	8001c10 <HAL_TIM_IC_CaptureCallback+0x40>
		Dist_Obst = HAL_TIM_ReadCapturedValue(&htim1, TIM_CHANNEL_2);
 8001be0:	2104      	movs	r1, #4
 8001be2:	480d      	ldr	r0, [pc, #52]	; (8001c18 <HAL_TIM_IC_CaptureCallback+0x48>)
 8001be4:	f003 fea6 	bl	8005934 <HAL_TIM_ReadCapturedValue>
 8001be8:	4603      	mov	r3, r0
 8001bea:	4a0c      	ldr	r2, [pc, #48]	; (8001c1c <HAL_TIM_IC_CaptureCallback+0x4c>)
 8001bec:	6013      	str	r3, [r2, #0]
		Dist_Obst_ = Dist_Obst;
 8001bee:	4b0b      	ldr	r3, [pc, #44]	; (8001c1c <HAL_TIM_IC_CaptureCallback+0x4c>)
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	4a0b      	ldr	r2, [pc, #44]	; (8001c20 <HAL_TIM_IC_CaptureCallback+0x50>)
 8001bf4:	6013      	str	r3, [r2, #0]
		Dist_Obst_cm = 645*Dist_Obst_/65535;
 8001bf6:	4b0a      	ldr	r3, [pc, #40]	; (8001c20 <HAL_TIM_IC_CaptureCallback+0x50>)
 8001bf8:	681a      	ldr	r2, [r3, #0]
 8001bfa:	4613      	mov	r3, r2
 8001bfc:	009b      	lsls	r3, r3, #2
 8001bfe:	4413      	add	r3, r2
 8001c00:	01da      	lsls	r2, r3, #7
 8001c02:	4413      	add	r3, r2
 8001c04:	4a07      	ldr	r2, [pc, #28]	; (8001c24 <HAL_TIM_IC_CaptureCallback+0x54>)
 8001c06:	fba2 2303 	umull	r2, r3, r2, r3
 8001c0a:	0bdb      	lsrs	r3, r3, #15
 8001c0c:	4a06      	ldr	r2, [pc, #24]	; (8001c28 <HAL_TIM_IC_CaptureCallback+0x58>)
 8001c0e:	6013      	str	r3, [r2, #0]
	}
}
 8001c10:	bf00      	nop
 8001c12:	3708      	adds	r7, #8
 8001c14:	46bd      	mov	sp, r7
 8001c16:	bd80      	pop	{r7, pc}
 8001c18:	20000160 	.word	0x20000160
 8001c1c:	200000f4 	.word	0x200000f4
 8001c20:	200000f8 	.word	0x200000f8
 8001c24:	80008001 	.word	0x80008001
 8001c28:	200000fc 	.word	0x200000fc

08001c2c <SonarStart>:

void SonarStart(void){
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(TRIG_SONAR_GPIO_Port, TRIG_SONAR_Pin, GPIO_PIN_SET);
 8001c30:	2201      	movs	r2, #1
 8001c32:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001c36:	4802      	ldr	r0, [pc, #8]	; (8001c40 <SonarStart+0x14>)
 8001c38:	f002 fb02 	bl	8004240 <HAL_GPIO_WritePin>
}
 8001c3c:	bf00      	nop
 8001c3e:	bd80      	pop	{r7, pc}
 8001c40:	40010c00 	.word	0x40010c00

08001c44 <SonarStop>:

void SonarStop(void){
 8001c44:	b580      	push	{r7, lr}
 8001c46:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(TRIG_SONAR_GPIO_Port, TRIG_SONAR_Pin, GPIO_PIN_RESET);
 8001c48:	2200      	movs	r2, #0
 8001c4a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001c4e:	4802      	ldr	r0, [pc, #8]	; (8001c58 <SonarStop+0x14>)
 8001c50:	f002 faf6 	bl	8004240 <HAL_GPIO_WritePin>
}
 8001c54:	bf00      	nop
 8001c56:	bd80      	pop	{r7, pc}
 8001c58:	40010c00 	.word	0x40010c00

08001c5c <ServoAngle>:

void ServoAngle(int16_t angle){
 8001c5c:	b480      	push	{r7}
 8001c5e:	b083      	sub	sp, #12
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	4603      	mov	r3, r0
 8001c64:	80fb      	strh	r3, [r7, #6]
	switch(angle){
 8001c66:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001c6a:	2bb4      	cmp	r3, #180	; 0xb4
 8001c6c:	d012      	beq.n	8001c94 <ServoAngle+0x38>
 8001c6e:	2bb4      	cmp	r3, #180	; 0xb4
 8001c70:	dc16      	bgt.n	8001ca0 <ServoAngle+0x44>
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d002      	beq.n	8001c7c <ServoAngle+0x20>
 8001c76:	2b5a      	cmp	r3, #90	; 0x5a
 8001c78:	d006      	beq.n	8001c88 <ServoAngle+0x2c>
 8001c7a:	e011      	b.n	8001ca0 <ServoAngle+0x44>
			case 0:{
				__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, (uint16_t ) PWM_0);
 8001c7c:	4b0e      	ldr	r3, [pc, #56]	; (8001cb8 <ServoAngle+0x5c>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f640 723c 	movw	r2, #3900	; 0xf3c
 8001c84:	641a      	str	r2, [r3, #64]	; 0x40
				break;
 8001c86:	e011      	b.n	8001cac <ServoAngle+0x50>
			}
			case 90:{
				__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, (uint16_t ) PWM_90);
 8001c88:	4b0b      	ldr	r3, [pc, #44]	; (8001cb8 <ServoAngle+0x5c>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	f640 228c 	movw	r2, #2700	; 0xa8c
 8001c90:	641a      	str	r2, [r3, #64]	; 0x40
				break;
 8001c92:	e00b      	b.n	8001cac <ServoAngle+0x50>
			}
			case 180:{
				__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, (uint16_t ) PWM_180);
 8001c94:	4b08      	ldr	r3, [pc, #32]	; (8001cb8 <ServoAngle+0x5c>)
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8001c9c:	641a      	str	r2, [r3, #64]	; 0x40
				break;
 8001c9e:	e005      	b.n	8001cac <ServoAngle+0x50>
			}
			default:{
				__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, (uint16_t ) PWM_90);
 8001ca0:	4b05      	ldr	r3, [pc, #20]	; (8001cb8 <ServoAngle+0x5c>)
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	f640 228c 	movw	r2, #2700	; 0xa8c
 8001ca8:	641a      	str	r2, [r3, #64]	; 0x40
				break;
 8001caa:	bf00      	nop
			}
	}
}
 8001cac:	bf00      	nop
 8001cae:	370c      	adds	r7, #12
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	bc80      	pop	{r7}
 8001cb4:	4770      	bx	lr
 8001cb6:	bf00      	nop
 8001cb8:	20000160 	.word	0x20000160

08001cbc <MesurePosition>:


void MesurePosition(){
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	af00      	add	r7, sp, #0
	switch (Mesure_State){
 8001cc0:	4b35      	ldr	r3, [pc, #212]	; (8001d98 <MesurePosition+0xdc>)
 8001cc2:	781b      	ldrb	r3, [r3, #0]
 8001cc4:	2b06      	cmp	r3, #6
 8001cc6:	d865      	bhi.n	8001d94 <MesurePosition+0xd8>
 8001cc8:	a201      	add	r2, pc, #4	; (adr r2, 8001cd0 <MesurePosition+0x14>)
 8001cca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001cce:	bf00      	nop
 8001cd0:	08001ced 	.word	0x08001ced
 8001cd4:	08001d01 	.word	0x08001d01
 8001cd8:	08001d1d 	.word	0x08001d1d
 8001cdc:	08001d31 	.word	0x08001d31
 8001ce0:	08001d4d 	.word	0x08001d4d
 8001ce4:	08001d61 	.word	0x08001d61
 8001ce8:	08001d7d 	.word	0x08001d7d
		case SERVO_ROTATE_Y: {
			ServoAngle(0);
 8001cec:	2000      	movs	r0, #0
 8001cee:	f7ff ffb5 	bl	8001c5c <ServoAngle>
			TurnServoCounter = 0;
 8001cf2:	4b2a      	ldr	r3, [pc, #168]	; (8001d9c <MesurePosition+0xe0>)
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	801a      	strh	r2, [r3, #0]
			Mesure_State = MESURE_Y;
 8001cf8:	4b27      	ldr	r3, [pc, #156]	; (8001d98 <MesurePosition+0xdc>)
 8001cfa:	2201      	movs	r2, #1
 8001cfc:	701a      	strb	r2, [r3, #0]
			break;
 8001cfe:	e049      	b.n	8001d94 <MesurePosition+0xd8>
		}
		case MESURE_Y: {
			if (TurnServoCounter >= TURN_SERVO_TIME){
 8001d00:	4b26      	ldr	r3, [pc, #152]	; (8001d9c <MesurePosition+0xe0>)
 8001d02:	881b      	ldrh	r3, [r3, #0]
 8001d04:	b29b      	uxth	r3, r3
 8001d06:	f5b3 7ff9 	cmp.w	r3, #498	; 0x1f2
 8001d0a:	d93e      	bls.n	8001d8a <MesurePosition+0xce>
				z = Dist_Obst_cm;
 8001d0c:	4b24      	ldr	r3, [pc, #144]	; (8001da0 <MesurePosition+0xe4>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	4a24      	ldr	r2, [pc, #144]	; (8001da4 <MesurePosition+0xe8>)
 8001d12:	6013      	str	r3, [r2, #0]
				Mesure_State = SERVO_ROTATE_X;
 8001d14:	4b20      	ldr	r3, [pc, #128]	; (8001d98 <MesurePosition+0xdc>)
 8001d16:	2202      	movs	r2, #2
 8001d18:	701a      	strb	r2, [r3, #0]
			}
			break;
 8001d1a:	e036      	b.n	8001d8a <MesurePosition+0xce>
		}
		case SERVO_ROTATE_X: {
			ServoAngle(90);
 8001d1c:	205a      	movs	r0, #90	; 0x5a
 8001d1e:	f7ff ff9d 	bl	8001c5c <ServoAngle>
			TurnServoCounter = 0;
 8001d22:	4b1e      	ldr	r3, [pc, #120]	; (8001d9c <MesurePosition+0xe0>)
 8001d24:	2200      	movs	r2, #0
 8001d26:	801a      	strh	r2, [r3, #0]
			Mesure_State = MESURE_X;
 8001d28:	4b1b      	ldr	r3, [pc, #108]	; (8001d98 <MesurePosition+0xdc>)
 8001d2a:	2203      	movs	r2, #3
 8001d2c:	701a      	strb	r2, [r3, #0]
			break;
 8001d2e:	e031      	b.n	8001d94 <MesurePosition+0xd8>
		}
		case MESURE_X: {
			if (TurnServoCounter >= TURN_SERVO_TIME){
 8001d30:	4b1a      	ldr	r3, [pc, #104]	; (8001d9c <MesurePosition+0xe0>)
 8001d32:	881b      	ldrh	r3, [r3, #0]
 8001d34:	b29b      	uxth	r3, r3
 8001d36:	f5b3 7ff9 	cmp.w	r3, #498	; 0x1f2
 8001d3a:	d928      	bls.n	8001d8e <MesurePosition+0xd2>
				x = Dist_Obst_cm;
 8001d3c:	4b18      	ldr	r3, [pc, #96]	; (8001da0 <MesurePosition+0xe4>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	4a19      	ldr	r2, [pc, #100]	; (8001da8 <MesurePosition+0xec>)
 8001d42:	6013      	str	r3, [r2, #0]
				Mesure_State = SERVO_ROTATE_Z;
 8001d44:	4b14      	ldr	r3, [pc, #80]	; (8001d98 <MesurePosition+0xdc>)
 8001d46:	2204      	movs	r2, #4
 8001d48:	701a      	strb	r2, [r3, #0]
			}
			break;
 8001d4a:	e020      	b.n	8001d8e <MesurePosition+0xd2>
		}
		case SERVO_ROTATE_Z: {
			ServoAngle(180);
 8001d4c:	20b4      	movs	r0, #180	; 0xb4
 8001d4e:	f7ff ff85 	bl	8001c5c <ServoAngle>
			TurnServoCounter = 0;
 8001d52:	4b12      	ldr	r3, [pc, #72]	; (8001d9c <MesurePosition+0xe0>)
 8001d54:	2200      	movs	r2, #0
 8001d56:	801a      	strh	r2, [r3, #0]
			Mesure_State = MESURE_Z;
 8001d58:	4b0f      	ldr	r3, [pc, #60]	; (8001d98 <MesurePosition+0xdc>)
 8001d5a:	2205      	movs	r2, #5
 8001d5c:	701a      	strb	r2, [r3, #0]
			break;
 8001d5e:	e019      	b.n	8001d94 <MesurePosition+0xd8>
		}
		case MESURE_Z: {
			if (TurnServoCounter >= TURN_SERVO_TIME){
 8001d60:	4b0e      	ldr	r3, [pc, #56]	; (8001d9c <MesurePosition+0xe0>)
 8001d62:	881b      	ldrh	r3, [r3, #0]
 8001d64:	b29b      	uxth	r3, r3
 8001d66:	f5b3 7ff9 	cmp.w	r3, #498	; 0x1f2
 8001d6a:	d912      	bls.n	8001d92 <MesurePosition+0xd6>
				y = Dist_Obst_cm;
 8001d6c:	4b0c      	ldr	r3, [pc, #48]	; (8001da0 <MesurePosition+0xe4>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	4a0e      	ldr	r2, [pc, #56]	; (8001dac <MesurePosition+0xf0>)
 8001d72:	6013      	str	r3, [r2, #0]
				Mesure_State = END;
 8001d74:	4b08      	ldr	r3, [pc, #32]	; (8001d98 <MesurePosition+0xdc>)
 8001d76:	2206      	movs	r2, #6
 8001d78:	701a      	strb	r2, [r3, #0]
			}
			break;
 8001d7a:	e00a      	b.n	8001d92 <MesurePosition+0xd6>
		}
		case END: {
			ServoAngle(90);
 8001d7c:	205a      	movs	r0, #90	; 0x5a
 8001d7e:	f7ff ff6d 	bl	8001c5c <ServoAngle>
			Mesure_On = 0;
 8001d82:	4b0b      	ldr	r3, [pc, #44]	; (8001db0 <MesurePosition+0xf4>)
 8001d84:	2200      	movs	r2, #0
 8001d86:	701a      	strb	r2, [r3, #0]
		}

	}
}
 8001d88:	e004      	b.n	8001d94 <MesurePosition+0xd8>
			break;
 8001d8a:	bf00      	nop
 8001d8c:	e002      	b.n	8001d94 <MesurePosition+0xd8>
			break;
 8001d8e:	bf00      	nop
 8001d90:	e000      	b.n	8001d94 <MesurePosition+0xd8>
			break;
 8001d92:	bf00      	nop
}
 8001d94:	bf00      	nop
 8001d96:	bd80      	pop	{r7, pc}
 8001d98:	20000001 	.word	0x20000001
 8001d9c:	2000011c 	.word	0x2000011c
 8001da0:	200000fc 	.word	0x200000fc
 8001da4:	20000110 	.word	0x20000110
 8001da8:	20000114 	.word	0x20000114
 8001dac:	20000118 	.word	0x20000118
 8001db0:	20000123 	.word	0x20000123

08001db4 <MES_PARK>:


void MES_PARK(){
 8001db4:	b580      	push	{r7, lr}
 8001db6:	af00      	add	r7, sp, #0
	switch (Mesure_State){
 8001db8:	4b35      	ldr	r3, [pc, #212]	; (8001e90 <MES_PARK+0xdc>)
 8001dba:	781b      	ldrb	r3, [r3, #0]
 8001dbc:	2b06      	cmp	r3, #6
 8001dbe:	d865      	bhi.n	8001e8c <MES_PARK+0xd8>
 8001dc0:	a201      	add	r2, pc, #4	; (adr r2, 8001dc8 <MES_PARK+0x14>)
 8001dc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001dc6:	bf00      	nop
 8001dc8:	08001de5 	.word	0x08001de5
 8001dcc:	08001df9 	.word	0x08001df9
 8001dd0:	08001e15 	.word	0x08001e15
 8001dd4:	08001e29 	.word	0x08001e29
 8001dd8:	08001e45 	.word	0x08001e45
 8001ddc:	08001e59 	.word	0x08001e59
 8001de0:	08001e75 	.word	0x08001e75
		case SERVO_ROTATE_Y: {
			ServoAngle(0);
 8001de4:	2000      	movs	r0, #0
 8001de6:	f7ff ff39 	bl	8001c5c <ServoAngle>
			TurnServoCounter = 0;
 8001dea:	4b2a      	ldr	r3, [pc, #168]	; (8001e94 <MES_PARK+0xe0>)
 8001dec:	2200      	movs	r2, #0
 8001dee:	801a      	strh	r2, [r3, #0]
			Mesure_State = MESURE_Y;
 8001df0:	4b27      	ldr	r3, [pc, #156]	; (8001e90 <MES_PARK+0xdc>)
 8001df2:	2201      	movs	r2, #1
 8001df4:	701a      	strb	r2, [r3, #0]
			break;
 8001df6:	e049      	b.n	8001e8c <MES_PARK+0xd8>
		}
		case MESURE_Y: {
			if (TurnServoCounter >= TURN_SERVO_TIME){
 8001df8:	4b26      	ldr	r3, [pc, #152]	; (8001e94 <MES_PARK+0xe0>)
 8001dfa:	881b      	ldrh	r3, [r3, #0]
 8001dfc:	b29b      	uxth	r3, r3
 8001dfe:	f5b3 7ff9 	cmp.w	r3, #498	; 0x1f2
 8001e02:	d93e      	bls.n	8001e82 <MES_PARK+0xce>
				z0 = Dist_Obst_cm;
 8001e04:	4b24      	ldr	r3, [pc, #144]	; (8001e98 <MES_PARK+0xe4>)
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	4a24      	ldr	r2, [pc, #144]	; (8001e9c <MES_PARK+0xe8>)
 8001e0a:	6013      	str	r3, [r2, #0]
				Mesure_State = SERVO_ROTATE_X;
 8001e0c:	4b20      	ldr	r3, [pc, #128]	; (8001e90 <MES_PARK+0xdc>)
 8001e0e:	2202      	movs	r2, #2
 8001e10:	701a      	strb	r2, [r3, #0]
			}
			break;
 8001e12:	e036      	b.n	8001e82 <MES_PARK+0xce>
		}
		case SERVO_ROTATE_X: {
			ServoAngle(90);
 8001e14:	205a      	movs	r0, #90	; 0x5a
 8001e16:	f7ff ff21 	bl	8001c5c <ServoAngle>
			TurnServoCounter = 0;
 8001e1a:	4b1e      	ldr	r3, [pc, #120]	; (8001e94 <MES_PARK+0xe0>)
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	801a      	strh	r2, [r3, #0]
			Mesure_State = MESURE_X;
 8001e20:	4b1b      	ldr	r3, [pc, #108]	; (8001e90 <MES_PARK+0xdc>)
 8001e22:	2203      	movs	r2, #3
 8001e24:	701a      	strb	r2, [r3, #0]
			break;
 8001e26:	e031      	b.n	8001e8c <MES_PARK+0xd8>
		}
		case MESURE_X: {
			if (TurnServoCounter >= TURN_SERVO_TIME){
 8001e28:	4b1a      	ldr	r3, [pc, #104]	; (8001e94 <MES_PARK+0xe0>)
 8001e2a:	881b      	ldrh	r3, [r3, #0]
 8001e2c:	b29b      	uxth	r3, r3
 8001e2e:	f5b3 7ff9 	cmp.w	r3, #498	; 0x1f2
 8001e32:	d928      	bls.n	8001e86 <MES_PARK+0xd2>
				x0 = Dist_Obst_cm;
 8001e34:	4b18      	ldr	r3, [pc, #96]	; (8001e98 <MES_PARK+0xe4>)
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	4a19      	ldr	r2, [pc, #100]	; (8001ea0 <MES_PARK+0xec>)
 8001e3a:	6013      	str	r3, [r2, #0]
				Mesure_State = SERVO_ROTATE_Z;
 8001e3c:	4b14      	ldr	r3, [pc, #80]	; (8001e90 <MES_PARK+0xdc>)
 8001e3e:	2204      	movs	r2, #4
 8001e40:	701a      	strb	r2, [r3, #0]
			}
			break;
 8001e42:	e020      	b.n	8001e86 <MES_PARK+0xd2>
		}
		case SERVO_ROTATE_Z: {
			ServoAngle(180);
 8001e44:	20b4      	movs	r0, #180	; 0xb4
 8001e46:	f7ff ff09 	bl	8001c5c <ServoAngle>
			TurnServoCounter = 0;
 8001e4a:	4b12      	ldr	r3, [pc, #72]	; (8001e94 <MES_PARK+0xe0>)
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	801a      	strh	r2, [r3, #0]
			Mesure_State = MESURE_Z;
 8001e50:	4b0f      	ldr	r3, [pc, #60]	; (8001e90 <MES_PARK+0xdc>)
 8001e52:	2205      	movs	r2, #5
 8001e54:	701a      	strb	r2, [r3, #0]
			break;
 8001e56:	e019      	b.n	8001e8c <MES_PARK+0xd8>
		}
		case MESURE_Z: {
			if (TurnServoCounter >= TURN_SERVO_TIME){
 8001e58:	4b0e      	ldr	r3, [pc, #56]	; (8001e94 <MES_PARK+0xe0>)
 8001e5a:	881b      	ldrh	r3, [r3, #0]
 8001e5c:	b29b      	uxth	r3, r3
 8001e5e:	f5b3 7ff9 	cmp.w	r3, #498	; 0x1f2
 8001e62:	d912      	bls.n	8001e8a <MES_PARK+0xd6>
				y0 = Dist_Obst_cm;
 8001e64:	4b0c      	ldr	r3, [pc, #48]	; (8001e98 <MES_PARK+0xe4>)
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	4a0e      	ldr	r2, [pc, #56]	; (8001ea4 <MES_PARK+0xf0>)
 8001e6a:	6013      	str	r3, [r2, #0]
				Mesure_State = END;
 8001e6c:	4b08      	ldr	r3, [pc, #32]	; (8001e90 <MES_PARK+0xdc>)
 8001e6e:	2206      	movs	r2, #6
 8001e70:	701a      	strb	r2, [r3, #0]
			}
			break;
 8001e72:	e00a      	b.n	8001e8a <MES_PARK+0xd6>
		}
		case END: {
			ServoAngle(90);
 8001e74:	205a      	movs	r0, #90	; 0x5a
 8001e76:	f7ff fef1 	bl	8001c5c <ServoAngle>
			Mesure_Park_On = 0;
 8001e7a:	4b0b      	ldr	r3, [pc, #44]	; (8001ea8 <MES_PARK+0xf4>)
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	701a      	strb	r2, [r3, #0]
		}

	}
}
 8001e80:	e004      	b.n	8001e8c <MES_PARK+0xd8>
			break;
 8001e82:	bf00      	nop
 8001e84:	e002      	b.n	8001e8c <MES_PARK+0xd8>
			break;
 8001e86:	bf00      	nop
 8001e88:	e000      	b.n	8001e8c <MES_PARK+0xd8>
			break;
 8001e8a:	bf00      	nop
}
 8001e8c:	bf00      	nop
 8001e8e:	bd80      	pop	{r7, pc}
 8001e90:	20000001 	.word	0x20000001
 8001e94:	2000011c 	.word	0x2000011c
 8001e98:	200000fc 	.word	0x200000fc
 8001e9c:	20000104 	.word	0x20000104
 8001ea0:	20000108 	.word	0x20000108
 8001ea4:	2000010c 	.word	0x2000010c
 8001ea8:	20000124 	.word	0x20000124

08001eac <TurnRight>:


void TurnRight(){
 8001eac:	b480      	push	{r7}
 8001eae:	af00      	add	r7, sp, #0
	if (TurnCounter >= TURN_RIGHT_TIME){
 8001eb0:	4b0d      	ldr	r3, [pc, #52]	; (8001ee8 <TurnRight+0x3c>)
 8001eb2:	881b      	ldrh	r3, [r3, #0]
 8001eb4:	b29b      	uxth	r3, r3
 8001eb6:	f240 427d 	movw	r2, #1149	; 0x47d
 8001eba:	4293      	cmp	r3, r2
 8001ebc:	d909      	bls.n	8001ed2 <TurnRight+0x26>
		CMDE = STOP_ARRET;
 8001ebe:	4b0b      	ldr	r3, [pc, #44]	; (8001eec <TurnRight+0x40>)
 8001ec0:	2202      	movs	r2, #2
 8001ec2:	701a      	strb	r2, [r3, #0]
		New_CMDE = 1;
 8001ec4:	4b0a      	ldr	r3, [pc, #40]	; (8001ef0 <TurnRight+0x44>)
 8001ec6:	2201      	movs	r2, #1
 8001ec8:	701a      	strb	r2, [r3, #0]
		TurnRightOn = 0;
 8001eca:	4b0a      	ldr	r3, [pc, #40]	; (8001ef4 <TurnRight+0x48>)
 8001ecc:	2200      	movs	r2, #0
 8001ece:	701a      	strb	r2, [r3, #0]
	}
	else{
		CMDE = DROITE;
		New_CMDE = 1;
	}
}
 8001ed0:	e005      	b.n	8001ede <TurnRight+0x32>
		CMDE = DROITE;
 8001ed2:	4b06      	ldr	r3, [pc, #24]	; (8001eec <TurnRight+0x40>)
 8001ed4:	2205      	movs	r2, #5
 8001ed6:	701a      	strb	r2, [r3, #0]
		New_CMDE = 1;
 8001ed8:	4b05      	ldr	r3, [pc, #20]	; (8001ef0 <TurnRight+0x44>)
 8001eda:	2201      	movs	r2, #1
 8001edc:	701a      	strb	r2, [r3, #0]
}
 8001ede:	bf00      	nop
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	bc80      	pop	{r7}
 8001ee4:	4770      	bx	lr
 8001ee6:	bf00      	nop
 8001ee8:	2000011e 	.word	0x2000011e
 8001eec:	200000a1 	.word	0x200000a1
 8001ef0:	200000a3 	.word	0x200000a3
 8001ef4:	20000126 	.word	0x20000126

08001ef8 <TurnLeft>:

void TurnLeft(){
 8001ef8:	b480      	push	{r7}
 8001efa:	af00      	add	r7, sp, #0
	if (TurnCounter >= TURN_LEFT_TIME){
 8001efc:	4b0d      	ldr	r3, [pc, #52]	; (8001f34 <TurnLeft+0x3c>)
 8001efe:	881b      	ldrh	r3, [r3, #0]
 8001f00:	b29b      	uxth	r3, r3
 8001f02:	f240 427d 	movw	r2, #1149	; 0x47d
 8001f06:	4293      	cmp	r3, r2
 8001f08:	d909      	bls.n	8001f1e <TurnLeft+0x26>
		CMDE = STOP_ARRET;
 8001f0a:	4b0b      	ldr	r3, [pc, #44]	; (8001f38 <TurnLeft+0x40>)
 8001f0c:	2202      	movs	r2, #2
 8001f0e:	701a      	strb	r2, [r3, #0]
		New_CMDE = 1;
 8001f10:	4b0a      	ldr	r3, [pc, #40]	; (8001f3c <TurnLeft+0x44>)
 8001f12:	2201      	movs	r2, #1
 8001f14:	701a      	strb	r2, [r3, #0]
		TurnLeftOn = 0;
 8001f16:	4b0a      	ldr	r3, [pc, #40]	; (8001f40 <TurnLeft+0x48>)
 8001f18:	2200      	movs	r2, #0
 8001f1a:	701a      	strb	r2, [r3, #0]
	}
	else{
		CMDE = GAUCHE;
		New_CMDE = 1;
	}
}
 8001f1c:	e005      	b.n	8001f2a <TurnLeft+0x32>
		CMDE = GAUCHE;
 8001f1e:	4b06      	ldr	r3, [pc, #24]	; (8001f38 <TurnLeft+0x40>)
 8001f20:	2206      	movs	r2, #6
 8001f22:	701a      	strb	r2, [r3, #0]
		New_CMDE = 1;
 8001f24:	4b05      	ldr	r3, [pc, #20]	; (8001f3c <TurnLeft+0x44>)
 8001f26:	2201      	movs	r2, #1
 8001f28:	701a      	strb	r2, [r3, #0]
}
 8001f2a:	bf00      	nop
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	bc80      	pop	{r7}
 8001f30:	4770      	bx	lr
 8001f32:	bf00      	nop
 8001f34:	2000011e 	.word	0x2000011e
 8001f38:	200000a1 	.word	0x200000a1
 8001f3c:	200000a3 	.word	0x200000a3
 8001f40:	20000127 	.word	0x20000127

08001f44 <MOVPARK>:

void MOVPARK(){
 8001f44:	b580      	push	{r7, lr}
 8001f46:	af00      	add	r7, sp, #0
	switch (MovPark_State){
 8001f48:	4b73      	ldr	r3, [pc, #460]	; (8002118 <MOVPARK+0x1d4>)
 8001f4a:	781b      	ldrb	r3, [r3, #0]
 8001f4c:	2b09      	cmp	r3, #9
 8001f4e:	f200 80e0 	bhi.w	8002112 <MOVPARK+0x1ce>
 8001f52:	a201      	add	r2, pc, #4	; (adr r2, 8001f58 <MOVPARK+0x14>)
 8001f54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f58:	08001f81 	.word	0x08001f81
 8001f5c:	08001fbb 	.word	0x08001fbb
 8001f60:	08001ffd 	.word	0x08001ffd
 8001f64:	08002029 	.word	0x08002029
 8001f68:	08002013 	.word	0x08002013
 8001f6c:	0800203f 	.word	0x0800203f
 8001f70:	08002079 	.word	0x08002079
 8001f74:	080020ab 	.word	0x080020ab
 8001f78:	08002055 	.word	0x08002055
 8001f7c:	080020dd 	.word	0x080020dd
		case FORWARD: {
			if (TurnServoCounter >= FORWARD_50_TIME){
 8001f80:	4b66      	ldr	r3, [pc, #408]	; (800211c <MOVPARK+0x1d8>)
 8001f82:	881b      	ldrh	r3, [r3, #0]
 8001f84:	b29b      	uxth	r3, r3
 8001f86:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8001f8a:	d306      	bcc.n	8001f9a <MOVPARK+0x56>
				CMDE = AVANT;
 8001f8c:	4b64      	ldr	r3, [pc, #400]	; (8002120 <MOVPARK+0x1dc>)
 8001f8e:	2203      	movs	r2, #3
 8001f90:	701a      	strb	r2, [r3, #0]
				New_CMDE = 1;
 8001f92:	4b64      	ldr	r3, [pc, #400]	; (8002124 <MOVPARK+0x1e0>)
 8001f94:	2201      	movs	r2, #1
 8001f96:	701a      	strb	r2, [r3, #0]
				New_CMDE = 1;
				MovPark_State = POSITION;
				Mesure_State = SERVO_ROTATE_Y;
				Mesure_On = 1;
			}
			break;
 8001f98:	e0bb      	b.n	8002112 <MOVPARK+0x1ce>
				CMDE = STOP_ARRET;
 8001f9a:	4b61      	ldr	r3, [pc, #388]	; (8002120 <MOVPARK+0x1dc>)
 8001f9c:	2202      	movs	r2, #2
 8001f9e:	701a      	strb	r2, [r3, #0]
				New_CMDE = 1;
 8001fa0:	4b60      	ldr	r3, [pc, #384]	; (8002124 <MOVPARK+0x1e0>)
 8001fa2:	2201      	movs	r2, #1
 8001fa4:	701a      	strb	r2, [r3, #0]
				MovPark_State = POSITION;
 8001fa6:	4b5c      	ldr	r3, [pc, #368]	; (8002118 <MOVPARK+0x1d4>)
 8001fa8:	2201      	movs	r2, #1
 8001faa:	701a      	strb	r2, [r3, #0]
				Mesure_State = SERVO_ROTATE_Y;
 8001fac:	4b5e      	ldr	r3, [pc, #376]	; (8002128 <MOVPARK+0x1e4>)
 8001fae:	2200      	movs	r2, #0
 8001fb0:	701a      	strb	r2, [r3, #0]
				Mesure_On = 1;
 8001fb2:	4b5e      	ldr	r3, [pc, #376]	; (800212c <MOVPARK+0x1e8>)
 8001fb4:	2201      	movs	r2, #1
 8001fb6:	701a      	strb	r2, [r3, #0]
			break;
 8001fb8:	e0ab      	b.n	8002112 <MOVPARK+0x1ce>
		}
		case POSITION: {
			MesurePosition();
 8001fba:	f7ff fe7f 	bl	8001cbc <MesurePosition>
			if (!Mesure_On){
 8001fbe:	4b5b      	ldr	r3, [pc, #364]	; (800212c <MOVPARK+0x1e8>)
 8001fc0:	781b      	ldrb	r3, [r3, #0]
 8001fc2:	b2db      	uxtb	r3, r3
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	f040 8095 	bne.w	80020f4 <MOVPARK+0x1b0>
				if (y >= y0+30){
 8001fca:	4b59      	ldr	r3, [pc, #356]	; (8002130 <MOVPARK+0x1ec>)
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f103 021e 	add.w	r2, r3, #30
 8001fd2:	4b58      	ldr	r3, [pc, #352]	; (8002134 <MOVPARK+0x1f0>)
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	429a      	cmp	r2, r3
 8001fd8:	d806      	bhi.n	8001fe8 <MOVPARK+0xa4>
					MovPark_State = TURN_R1;
 8001fda:	4b4f      	ldr	r3, [pc, #316]	; (8002118 <MOVPARK+0x1d4>)
 8001fdc:	2202      	movs	r2, #2
 8001fde:	701a      	strb	r2, [r3, #0]
					TurnRightOn = 1;
 8001fe0:	4b55      	ldr	r3, [pc, #340]	; (8002138 <MOVPARK+0x1f4>)
 8001fe2:	2201      	movs	r2, #1
 8001fe4:	701a      	strb	r2, [r3, #0]
 8001fe6:	e005      	b.n	8001ff4 <MOVPARK+0xb0>
				}
				else {
					MovPark_State = TURN_L1;
 8001fe8:	4b4b      	ldr	r3, [pc, #300]	; (8002118 <MOVPARK+0x1d4>)
 8001fea:	2203      	movs	r2, #3
 8001fec:	701a      	strb	r2, [r3, #0]
					TurnLeftOn = 1;
 8001fee:	4b53      	ldr	r3, [pc, #332]	; (800213c <MOVPARK+0x1f8>)
 8001ff0:	2201      	movs	r2, #1
 8001ff2:	701a      	strb	r2, [r3, #0]
				}
				TurnCounter = 0;
 8001ff4:	4b52      	ldr	r3, [pc, #328]	; (8002140 <MOVPARK+0x1fc>)
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	801a      	strh	r2, [r3, #0]
			}
			break;
 8001ffa:	e07b      	b.n	80020f4 <MOVPARK+0x1b0>
		}
		case TURN_R1: {
			TurnRight();
 8001ffc:	f7ff ff56 	bl	8001eac <TurnRight>
			if (!TurnRightOn)
 8002000:	4b4d      	ldr	r3, [pc, #308]	; (8002138 <MOVPARK+0x1f4>)
 8002002:	781b      	ldrb	r3, [r3, #0]
 8002004:	b2db      	uxtb	r3, r3
 8002006:	2b00      	cmp	r3, #0
 8002008:	d176      	bne.n	80020f8 <MOVPARK+0x1b4>
				MovPark_State = FORWARD_Y;
 800200a:	4b43      	ldr	r3, [pc, #268]	; (8002118 <MOVPARK+0x1d4>)
 800200c:	2206      	movs	r2, #6
 800200e:	701a      	strb	r2, [r3, #0]
			break;
 8002010:	e072      	b.n	80020f8 <MOVPARK+0x1b4>
		}
		case TURN_R2: {
			TurnRight();
 8002012:	f7ff ff4b 	bl	8001eac <TurnRight>
			if (!TurnRightOn)
 8002016:	4b48      	ldr	r3, [pc, #288]	; (8002138 <MOVPARK+0x1f4>)
 8002018:	781b      	ldrb	r3, [r3, #0]
 800201a:	b2db      	uxtb	r3, r3
 800201c:	2b00      	cmp	r3, #0
 800201e:	d16d      	bne.n	80020fc <MOVPARK+0x1b8>
				MovPark_State = FORWARD_X;
 8002020:	4b3d      	ldr	r3, [pc, #244]	; (8002118 <MOVPARK+0x1d4>)
 8002022:	2208      	movs	r2, #8
 8002024:	701a      	strb	r2, [r3, #0]
			break;
 8002026:	e069      	b.n	80020fc <MOVPARK+0x1b8>
		}
		case TURN_L1: {
			TurnLeft();
 8002028:	f7ff ff66 	bl	8001ef8 <TurnLeft>
			if (!TurnLeftOn)
 800202c:	4b43      	ldr	r3, [pc, #268]	; (800213c <MOVPARK+0x1f8>)
 800202e:	781b      	ldrb	r3, [r3, #0]
 8002030:	b2db      	uxtb	r3, r3
 8002032:	2b00      	cmp	r3, #0
 8002034:	d164      	bne.n	8002100 <MOVPARK+0x1bc>
				MovPark_State = FORWARD_Z;
 8002036:	4b38      	ldr	r3, [pc, #224]	; (8002118 <MOVPARK+0x1d4>)
 8002038:	2207      	movs	r2, #7
 800203a:	701a      	strb	r2, [r3, #0]
			break;
 800203c:	e060      	b.n	8002100 <MOVPARK+0x1bc>
		}
		case TURN_L2: {
			TurnLeft();
 800203e:	f7ff ff5b 	bl	8001ef8 <TurnLeft>
			if (!TurnLeftOn)
 8002042:	4b3e      	ldr	r3, [pc, #248]	; (800213c <MOVPARK+0x1f8>)
 8002044:	781b      	ldrb	r3, [r3, #0]
 8002046:	b2db      	uxtb	r3, r3
 8002048:	2b00      	cmp	r3, #0
 800204a:	d15b      	bne.n	8002104 <MOVPARK+0x1c0>
				MovPark_State = FORWARD_X;
 800204c:	4b32      	ldr	r3, [pc, #200]	; (8002118 <MOVPARK+0x1d4>)
 800204e:	2208      	movs	r2, #8
 8002050:	701a      	strb	r2, [r3, #0]
			break;
 8002052:	e057      	b.n	8002104 <MOVPARK+0x1c0>
		}
		case FORWARD_X: {
			CMDE = AVANT;
 8002054:	4b32      	ldr	r3, [pc, #200]	; (8002120 <MOVPARK+0x1dc>)
 8002056:	2203      	movs	r2, #3
 8002058:	701a      	strb	r2, [r3, #0]
			New_CMDE = 1;
 800205a:	4b32      	ldr	r3, [pc, #200]	; (8002124 <MOVPARK+0x1e0>)
 800205c:	2201      	movs	r2, #1
 800205e:	701a      	strb	r2, [r3, #0]
			if ((int)(Dist_Obst_cm) <= x0+10)
 8002060:	4b38      	ldr	r3, [pc, #224]	; (8002144 <MOVPARK+0x200>)
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f103 020a 	add.w	r2, r3, #10
 8002068:	4b37      	ldr	r3, [pc, #220]	; (8002148 <MOVPARK+0x204>)
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	429a      	cmp	r2, r3
 800206e:	d34b      	bcc.n	8002108 <MOVPARK+0x1c4>
				MovPark_State = FINISH;
 8002070:	4b29      	ldr	r3, [pc, #164]	; (8002118 <MOVPARK+0x1d4>)
 8002072:	2209      	movs	r2, #9
 8002074:	701a      	strb	r2, [r3, #0]
			break;
 8002076:	e047      	b.n	8002108 <MOVPARK+0x1c4>
		}
		case FORWARD_Y: {
			CMDE = AVANT;
 8002078:	4b29      	ldr	r3, [pc, #164]	; (8002120 <MOVPARK+0x1dc>)
 800207a:	2203      	movs	r2, #3
 800207c:	701a      	strb	r2, [r3, #0]
			New_CMDE = 1;
 800207e:	4b29      	ldr	r3, [pc, #164]	; (8002124 <MOVPARK+0x1e0>)
 8002080:	2201      	movs	r2, #1
 8002082:	701a      	strb	r2, [r3, #0]
			if ((int)(Dist_Obst_cm) <= y0-30){
 8002084:	4b2a      	ldr	r3, [pc, #168]	; (8002130 <MOVPARK+0x1ec>)
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f1a3 021e 	sub.w	r2, r3, #30
 800208c:	4b2e      	ldr	r3, [pc, #184]	; (8002148 <MOVPARK+0x204>)
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	429a      	cmp	r2, r3
 8002092:	d33b      	bcc.n	800210c <MOVPARK+0x1c8>
				MovPark_State = TURN_L2;
 8002094:	4b20      	ldr	r3, [pc, #128]	; (8002118 <MOVPARK+0x1d4>)
 8002096:	2205      	movs	r2, #5
 8002098:	701a      	strb	r2, [r3, #0]
				TurnLeftOn = 1;
 800209a:	4b28      	ldr	r3, [pc, #160]	; (800213c <MOVPARK+0x1f8>)
 800209c:	2201      	movs	r2, #1
 800209e:	701a      	strb	r2, [r3, #0]
				TurnCounter = 300;
 80020a0:	4b27      	ldr	r3, [pc, #156]	; (8002140 <MOVPARK+0x1fc>)
 80020a2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80020a6:	801a      	strh	r2, [r3, #0]
			}
			break;
 80020a8:	e030      	b.n	800210c <MOVPARK+0x1c8>
		}
		case FORWARD_Z: {
			CMDE = AVANT;
 80020aa:	4b1d      	ldr	r3, [pc, #116]	; (8002120 <MOVPARK+0x1dc>)
 80020ac:	2203      	movs	r2, #3
 80020ae:	701a      	strb	r2, [r3, #0]
			New_CMDE = 1;
 80020b0:	4b1c      	ldr	r3, [pc, #112]	; (8002124 <MOVPARK+0x1e0>)
 80020b2:	2201      	movs	r2, #1
 80020b4:	701a      	strb	r2, [r3, #0]
			if ((int)(Dist_Obst_cm) <= z0+30){
 80020b6:	4b25      	ldr	r3, [pc, #148]	; (800214c <MOVPARK+0x208>)
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f103 021e 	add.w	r2, r3, #30
 80020be:	4b22      	ldr	r3, [pc, #136]	; (8002148 <MOVPARK+0x204>)
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	429a      	cmp	r2, r3
 80020c4:	d324      	bcc.n	8002110 <MOVPARK+0x1cc>
				MovPark_State = TURN_R2;
 80020c6:	4b14      	ldr	r3, [pc, #80]	; (8002118 <MOVPARK+0x1d4>)
 80020c8:	2204      	movs	r2, #4
 80020ca:	701a      	strb	r2, [r3, #0]
				TurnRightOn = 1;
 80020cc:	4b1a      	ldr	r3, [pc, #104]	; (8002138 <MOVPARK+0x1f4>)
 80020ce:	2201      	movs	r2, #1
 80020d0:	701a      	strb	r2, [r3, #0]
				TurnCounter = 300;
 80020d2:	4b1b      	ldr	r3, [pc, #108]	; (8002140 <MOVPARK+0x1fc>)
 80020d4:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80020d8:	801a      	strh	r2, [r3, #0]
			}
			break;
 80020da:	e019      	b.n	8002110 <MOVPARK+0x1cc>
		}
		case FINISH: {
			SonarStop();
 80020dc:	f7ff fdb2 	bl	8001c44 <SonarStop>
			CMDE = STOP_ARRET;
 80020e0:	4b0f      	ldr	r3, [pc, #60]	; (8002120 <MOVPARK+0x1dc>)
 80020e2:	2202      	movs	r2, #2
 80020e4:	701a      	strb	r2, [r3, #0]
			New_CMDE = 1;
 80020e6:	4b0f      	ldr	r3, [pc, #60]	; (8002124 <MOVPARK+0x1e0>)
 80020e8:	2201      	movs	r2, #1
 80020ea:	701a      	strb	r2, [r3, #0]
			MovPark_On = 0;
 80020ec:	4b18      	ldr	r3, [pc, #96]	; (8002150 <MOVPARK+0x20c>)
 80020ee:	2200      	movs	r2, #0
 80020f0:	701a      	strb	r2, [r3, #0]
			break;
 80020f2:	e00e      	b.n	8002112 <MOVPARK+0x1ce>
			break;
 80020f4:	bf00      	nop
 80020f6:	e00c      	b.n	8002112 <MOVPARK+0x1ce>
			break;
 80020f8:	bf00      	nop
 80020fa:	e00a      	b.n	8002112 <MOVPARK+0x1ce>
			break;
 80020fc:	bf00      	nop
 80020fe:	e008      	b.n	8002112 <MOVPARK+0x1ce>
			break;
 8002100:	bf00      	nop
 8002102:	e006      	b.n	8002112 <MOVPARK+0x1ce>
			break;
 8002104:	bf00      	nop
 8002106:	e004      	b.n	8002112 <MOVPARK+0x1ce>
			break;
 8002108:	bf00      	nop
 800210a:	e002      	b.n	8002112 <MOVPARK+0x1ce>
			break;
 800210c:	bf00      	nop
 800210e:	e000      	b.n	8002112 <MOVPARK+0x1ce>
			break;
 8002110:	bf00      	nop
		}
	}
}
 8002112:	bf00      	nop
 8002114:	bd80      	pop	{r7, pc}
 8002116:	bf00      	nop
 8002118:	20000000 	.word	0x20000000
 800211c:	2000011c 	.word	0x2000011c
 8002120:	200000a1 	.word	0x200000a1
 8002124:	200000a3 	.word	0x200000a3
 8002128:	20000001 	.word	0x20000001
 800212c:	20000123 	.word	0x20000123
 8002130:	2000010c 	.word	0x2000010c
 8002134:	20000118 	.word	0x20000118
 8002138:	20000126 	.word	0x20000126
 800213c:	20000127 	.word	0x20000127
 8002140:	2000011e 	.word	0x2000011e
 8002144:	20000108 	.word	0x20000108
 8002148:	200000fc 	.word	0x200000fc
 800214c:	20000104 	.word	0x20000104
 8002150:	20000125 	.word	0x20000125

08002154 <SonarDistance>:

void SonarDistance(){
 8002154:	b480      	push	{r7}
 8002156:	af00      	add	r7, sp, #0
	switch(Distance_State){
 8002158:	4b29      	ldr	r3, [pc, #164]	; (8002200 <SonarDistance+0xac>)
 800215a:	781b      	ldrb	r3, [r3, #0]
 800215c:	2b00      	cmp	r3, #0
 800215e:	d002      	beq.n	8002166 <SonarDistance+0x12>
 8002160:	2b01      	cmp	r3, #1
 8002162:	d00c      	beq.n	800217e <SonarDistance+0x2a>
			}
			Distance_State = WAIT_MESURE;
			break;
		}
	}
}
 8002164:	e048      	b.n	80021f8 <SonarDistance+0xa4>
			Distance_State = (tour_dist >= 50) ? MEAN_MESURE : WAIT_MESURE;
 8002166:	4b27      	ldr	r3, [pc, #156]	; (8002204 <SonarDistance+0xb0>)
 8002168:	881b      	ldrh	r3, [r3, #0]
 800216a:	b29b      	uxth	r3, r3
 800216c:	2b31      	cmp	r3, #49	; 0x31
 800216e:	bf8c      	ite	hi
 8002170:	2301      	movhi	r3, #1
 8002172:	2300      	movls	r3, #0
 8002174:	b2db      	uxtb	r3, r3
 8002176:	461a      	mov	r2, r3
 8002178:	4b21      	ldr	r3, [pc, #132]	; (8002200 <SonarDistance+0xac>)
 800217a:	701a      	strb	r2, [r3, #0]
			break;
 800217c:	e03c      	b.n	80021f8 <SonarDistance+0xa4>
			Dist_Obst_ = Dist_Obst;
 800217e:	4b22      	ldr	r3, [pc, #136]	; (8002208 <SonarDistance+0xb4>)
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	4a22      	ldr	r2, [pc, #136]	; (800220c <SonarDistance+0xb8>)
 8002184:	6013      	str	r3, [r2, #0]
			Dist_Obst_cm = 645*Dist_Obst_/65535;
 8002186:	4b21      	ldr	r3, [pc, #132]	; (800220c <SonarDistance+0xb8>)
 8002188:	681a      	ldr	r2, [r3, #0]
 800218a:	4613      	mov	r3, r2
 800218c:	009b      	lsls	r3, r3, #2
 800218e:	4413      	add	r3, r2
 8002190:	01da      	lsls	r2, r3, #7
 8002192:	4413      	add	r3, r2
 8002194:	4a1e      	ldr	r2, [pc, #120]	; (8002210 <SonarDistance+0xbc>)
 8002196:	fba2 2303 	umull	r2, r3, r2, r3
 800219a:	0bdb      	lsrs	r3, r3, #15
 800219c:	4a1d      	ldr	r2, [pc, #116]	; (8002214 <SonarDistance+0xc0>)
 800219e:	6013      	str	r3, [r2, #0]
			if(Mean){
 80021a0:	4b1d      	ldr	r3, [pc, #116]	; (8002218 <SonarDistance+0xc4>)
 80021a2:	781b      	ldrb	r3, [r3, #0]
 80021a4:	b2db      	uxtb	r3, r3
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d022      	beq.n	80021f0 <SonarDistance+0x9c>
				Dist_cm[tab_elem] = Dist_Obst_cm;
 80021aa:	4b1c      	ldr	r3, [pc, #112]	; (800221c <SonarDistance+0xc8>)
 80021ac:	781b      	ldrb	r3, [r3, #0]
 80021ae:	4619      	mov	r1, r3
 80021b0:	4b18      	ldr	r3, [pc, #96]	; (8002214 <SonarDistance+0xc0>)
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	4a1a      	ldr	r2, [pc, #104]	; (8002220 <SonarDistance+0xcc>)
 80021b6:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
				Dist_Obst_cm_moy = (Dist_cm[0]+Dist_cm[1]+Dist_cm[2]+Dist_cm[3])/4;
 80021ba:	4b19      	ldr	r3, [pc, #100]	; (8002220 <SonarDistance+0xcc>)
 80021bc:	681a      	ldr	r2, [r3, #0]
 80021be:	4b18      	ldr	r3, [pc, #96]	; (8002220 <SonarDistance+0xcc>)
 80021c0:	685b      	ldr	r3, [r3, #4]
 80021c2:	441a      	add	r2, r3
 80021c4:	4b16      	ldr	r3, [pc, #88]	; (8002220 <SonarDistance+0xcc>)
 80021c6:	689b      	ldr	r3, [r3, #8]
 80021c8:	441a      	add	r2, r3
 80021ca:	4b15      	ldr	r3, [pc, #84]	; (8002220 <SonarDistance+0xcc>)
 80021cc:	68db      	ldr	r3, [r3, #12]
 80021ce:	4413      	add	r3, r2
 80021d0:	089b      	lsrs	r3, r3, #2
 80021d2:	4a14      	ldr	r2, [pc, #80]	; (8002224 <SonarDistance+0xd0>)
 80021d4:	6013      	str	r3, [r2, #0]
				tab_elem = (tab_elem+1)%4;
 80021d6:	4b11      	ldr	r3, [pc, #68]	; (800221c <SonarDistance+0xc8>)
 80021d8:	781b      	ldrb	r3, [r3, #0]
 80021da:	3301      	adds	r3, #1
 80021dc:	425a      	negs	r2, r3
 80021de:	f003 0303 	and.w	r3, r3, #3
 80021e2:	f002 0203 	and.w	r2, r2, #3
 80021e6:	bf58      	it	pl
 80021e8:	4253      	negpl	r3, r2
 80021ea:	b2da      	uxtb	r2, r3
 80021ec:	4b0b      	ldr	r3, [pc, #44]	; (800221c <SonarDistance+0xc8>)
 80021ee:	701a      	strb	r2, [r3, #0]
			Distance_State = WAIT_MESURE;
 80021f0:	4b03      	ldr	r3, [pc, #12]	; (8002200 <SonarDistance+0xac>)
 80021f2:	2200      	movs	r2, #0
 80021f4:	701a      	strb	r2, [r3, #0]
			break;
 80021f6:	bf00      	nop
}
 80021f8:	bf00      	nop
 80021fa:	46bd      	mov	sp, r7
 80021fc:	bc80      	pop	{r7}
 80021fe:	4770      	bx	lr
 8002200:	200000a0 	.word	0x200000a0
 8002204:	20000120 	.word	0x20000120
 8002208:	200000f4 	.word	0x200000f4
 800220c:	200000f8 	.word	0x200000f8
 8002210:	80008001 	.word	0x80008001
 8002214:	200000fc 	.word	0x200000fc
 8002218:	20000002 	.word	0x20000002
 800221c:	20000122 	.word	0x20000122
 8002220:	2000012c 	.word	0x2000012c
 8002224:	20000128 	.word	0x20000128

08002228 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002228:	b480      	push	{r7}
 800222a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800222c:	bf00      	nop
 800222e:	46bd      	mov	sp, r7
 8002230:	bc80      	pop	{r7}
 8002232:	4770      	bx	lr

08002234 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002234:	b480      	push	{r7}
 8002236:	b085      	sub	sp, #20
 8002238:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800223a:	4b15      	ldr	r3, [pc, #84]	; (8002290 <HAL_MspInit+0x5c>)
 800223c:	699b      	ldr	r3, [r3, #24]
 800223e:	4a14      	ldr	r2, [pc, #80]	; (8002290 <HAL_MspInit+0x5c>)
 8002240:	f043 0301 	orr.w	r3, r3, #1
 8002244:	6193      	str	r3, [r2, #24]
 8002246:	4b12      	ldr	r3, [pc, #72]	; (8002290 <HAL_MspInit+0x5c>)
 8002248:	699b      	ldr	r3, [r3, #24]
 800224a:	f003 0301 	and.w	r3, r3, #1
 800224e:	60bb      	str	r3, [r7, #8]
 8002250:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002252:	4b0f      	ldr	r3, [pc, #60]	; (8002290 <HAL_MspInit+0x5c>)
 8002254:	69db      	ldr	r3, [r3, #28]
 8002256:	4a0e      	ldr	r2, [pc, #56]	; (8002290 <HAL_MspInit+0x5c>)
 8002258:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800225c:	61d3      	str	r3, [r2, #28]
 800225e:	4b0c      	ldr	r3, [pc, #48]	; (8002290 <HAL_MspInit+0x5c>)
 8002260:	69db      	ldr	r3, [r3, #28]
 8002262:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002266:	607b      	str	r3, [r7, #4]
 8002268:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800226a:	4b0a      	ldr	r3, [pc, #40]	; (8002294 <HAL_MspInit+0x60>)
 800226c:	685b      	ldr	r3, [r3, #4]
 800226e:	60fb      	str	r3, [r7, #12]
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002276:	60fb      	str	r3, [r7, #12]
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800227e:	60fb      	str	r3, [r7, #12]
 8002280:	4a04      	ldr	r2, [pc, #16]	; (8002294 <HAL_MspInit+0x60>)
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002286:	bf00      	nop
 8002288:	3714      	adds	r7, #20
 800228a:	46bd      	mov	sp, r7
 800228c:	bc80      	pop	{r7}
 800228e:	4770      	bx	lr
 8002290:	40021000 	.word	0x40021000
 8002294:	40010000 	.word	0x40010000

08002298 <SysTick_Handler>:
/******************************************************************************/
/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800229c:	f000 fd5c 	bl	8002d58 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80022a0:	bf00      	nop
 80022a2:	bd80      	pop	{r7, pc}

080022a4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80022a8:	4802      	ldr	r0, [pc, #8]	; (80022b4 <DMA1_Channel1_IRQHandler+0x10>)
 80022aa:	f001 fd11 	bl	8003cd0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80022ae:	bf00      	nop
 80022b0:	bd80      	pop	{r7, pc}
 80022b2:	bf00      	nop
 80022b4:	2000005c 	.word	0x2000005c

080022b8 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80022bc:	4802      	ldr	r0, [pc, #8]	; (80022c8 <ADC1_2_IRQHandler+0x10>)
 80022be:	f000 ff70 	bl	80031a2 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 80022c2:	bf00      	nop
 80022c4:	bd80      	pop	{r7, pc}
 80022c6:	bf00      	nop
 80022c8:	2000002c 	.word	0x2000002c

080022cc <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80022d0:	4802      	ldr	r0, [pc, #8]	; (80022dc <TIM1_CC_IRQHandler+0x10>)
 80022d2:	f002 ff5f 	bl	8005194 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 80022d6:	bf00      	nop
 80022d8:	bd80      	pop	{r7, pc}
 80022da:	bf00      	nop
 80022dc:	20000160 	.word	0x20000160

080022e0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80022e4:	4802      	ldr	r0, [pc, #8]	; (80022f0 <TIM2_IRQHandler+0x10>)
 80022e6:	f002 ff55 	bl	8005194 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80022ea:	bf00      	nop
 80022ec:	bd80      	pop	{r7, pc}
 80022ee:	bf00      	nop
 80022f0:	200001a0 	.word	0x200001a0

080022f4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80022f8:	4802      	ldr	r0, [pc, #8]	; (8002304 <USART1_IRQHandler+0x10>)
 80022fa:	f004 f903 	bl	8006504 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80022fe:	bf00      	nop
 8002300:	bd80      	pop	{r7, pc}
 8002302:	bf00      	nop
 8002304:	20000260 	.word	0x20000260

08002308 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800230c:	4802      	ldr	r0, [pc, #8]	; (8002318 <USART3_IRQHandler+0x10>)
 800230e:	f004 f8f9 	bl	8006504 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8002312:	bf00      	nop
 8002314:	bd80      	pop	{r7, pc}
 8002316:	bf00      	nop
 8002318:	200002a0 	.word	0x200002a0

0800231c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8002320:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002324:	f001 ffa4 	bl	8004270 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002328:	bf00      	nop
 800232a:	bd80      	pop	{r7, pc}

0800232c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800232c:	b480      	push	{r7}
 800232e:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8002330:	4b15      	ldr	r3, [pc, #84]	; (8002388 <SystemInit+0x5c>)
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	4a14      	ldr	r2, [pc, #80]	; (8002388 <SystemInit+0x5c>)
 8002336:	f043 0301 	orr.w	r3, r3, #1
 800233a:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 800233c:	4b12      	ldr	r3, [pc, #72]	; (8002388 <SystemInit+0x5c>)
 800233e:	685a      	ldr	r2, [r3, #4]
 8002340:	4911      	ldr	r1, [pc, #68]	; (8002388 <SystemInit+0x5c>)
 8002342:	4b12      	ldr	r3, [pc, #72]	; (800238c <SystemInit+0x60>)
 8002344:	4013      	ands	r3, r2
 8002346:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8002348:	4b0f      	ldr	r3, [pc, #60]	; (8002388 <SystemInit+0x5c>)
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	4a0e      	ldr	r2, [pc, #56]	; (8002388 <SystemInit+0x5c>)
 800234e:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8002352:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002356:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002358:	4b0b      	ldr	r3, [pc, #44]	; (8002388 <SystemInit+0x5c>)
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	4a0a      	ldr	r2, [pc, #40]	; (8002388 <SystemInit+0x5c>)
 800235e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002362:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8002364:	4b08      	ldr	r3, [pc, #32]	; (8002388 <SystemInit+0x5c>)
 8002366:	685b      	ldr	r3, [r3, #4]
 8002368:	4a07      	ldr	r2, [pc, #28]	; (8002388 <SystemInit+0x5c>)
 800236a:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 800236e:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8002370:	4b05      	ldr	r3, [pc, #20]	; (8002388 <SystemInit+0x5c>)
 8002372:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8002376:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8002378:	4b05      	ldr	r3, [pc, #20]	; (8002390 <SystemInit+0x64>)
 800237a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800237e:	609a      	str	r2, [r3, #8]
#endif 
}
 8002380:	bf00      	nop
 8002382:	46bd      	mov	sp, r7
 8002384:	bc80      	pop	{r7}
 8002386:	4770      	bx	lr
 8002388:	40021000 	.word	0x40021000
 800238c:	f8ff0000 	.word	0xf8ff0000
 8002390:	e000ed00 	.word	0xe000ed00

08002394 <MX_TIM1_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	b09a      	sub	sp, #104	; 0x68
 8002398:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 800239a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800239e:	2200      	movs	r2, #0
 80023a0:	601a      	str	r2, [r3, #0]
 80023a2:	605a      	str	r2, [r3, #4]
 80023a4:	609a      	str	r2, [r3, #8]
 80023a6:	60da      	str	r2, [r3, #12]
 80023a8:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80023aa:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80023ae:	2200      	movs	r2, #0
 80023b0:	601a      	str	r2, [r3, #0]
 80023b2:	605a      	str	r2, [r3, #4]
 80023b4:	609a      	str	r2, [r3, #8]
 80023b6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80023b8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80023bc:	2200      	movs	r2, #0
 80023be:	601a      	str	r2, [r3, #0]
 80023c0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80023c2:	f107 0320 	add.w	r3, r7, #32
 80023c6:	2200      	movs	r2, #0
 80023c8:	601a      	str	r2, [r3, #0]
 80023ca:	605a      	str	r2, [r3, #4]
 80023cc:	609a      	str	r2, [r3, #8]
 80023ce:	60da      	str	r2, [r3, #12]
 80023d0:	611a      	str	r2, [r3, #16]
 80023d2:	615a      	str	r2, [r3, #20]
 80023d4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80023d6:	463b      	mov	r3, r7
 80023d8:	2220      	movs	r2, #32
 80023da:	2100      	movs	r1, #0
 80023dc:	4618      	mov	r0, r3
 80023de:	f004 fb97 	bl	8006b10 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80023e2:	4b53      	ldr	r3, [pc, #332]	; (8002530 <MX_TIM1_Init+0x19c>)
 80023e4:	4a53      	ldr	r2, [pc, #332]	; (8002534 <MX_TIM1_Init+0x1a0>)
 80023e6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 36;
 80023e8:	4b51      	ldr	r3, [pc, #324]	; (8002530 <MX_TIM1_Init+0x19c>)
 80023ea:	2224      	movs	r2, #36	; 0x24
 80023ec:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80023ee:	4b50      	ldr	r3, [pc, #320]	; (8002530 <MX_TIM1_Init+0x19c>)
 80023f0:	2200      	movs	r2, #0
 80023f2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0xFFFF;
 80023f4:	4b4e      	ldr	r3, [pc, #312]	; (8002530 <MX_TIM1_Init+0x19c>)
 80023f6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80023fa:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80023fc:	4b4c      	ldr	r3, [pc, #304]	; (8002530 <MX_TIM1_Init+0x19c>)
 80023fe:	2200      	movs	r2, #0
 8002400:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002402:	4b4b      	ldr	r3, [pc, #300]	; (8002530 <MX_TIM1_Init+0x19c>)
 8002404:	2200      	movs	r2, #0
 8002406:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002408:	4b49      	ldr	r3, [pc, #292]	; (8002530 <MX_TIM1_Init+0x19c>)
 800240a:	2280      	movs	r2, #128	; 0x80
 800240c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800240e:	4848      	ldr	r0, [pc, #288]	; (8002530 <MX_TIM1_Init+0x19c>)
 8002410:	f002 fcb4 	bl	8004d7c <HAL_TIM_PWM_Init>
 8002414:	4603      	mov	r3, r0
 8002416:	2b00      	cmp	r3, #0
 8002418:	d001      	beq.n	800241e <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 800241a:	f7ff ff05 	bl	8002228 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 800241e:	4844      	ldr	r0, [pc, #272]	; (8002530 <MX_TIM1_Init+0x19c>)
 8002420:	f002 fd56 	bl	8004ed0 <HAL_TIM_IC_Init>
 8002424:	4603      	mov	r3, r0
 8002426:	2b00      	cmp	r3, #0
 8002428:	d001      	beq.n	800242e <MX_TIM1_Init+0x9a>
  {
    Error_Handler();
 800242a:	f7ff fefd 	bl	8002228 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 800242e:	2304      	movs	r3, #4
 8002430:	657b      	str	r3, [r7, #84]	; 0x54
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8002432:	2350      	movs	r3, #80	; 0x50
 8002434:	65bb      	str	r3, [r7, #88]	; 0x58
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002436:	2300      	movs	r3, #0
 8002438:	65fb      	str	r3, [r7, #92]	; 0x5c
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 800243a:	2300      	movs	r3, #0
 800243c:	663b      	str	r3, [r7, #96]	; 0x60
  sSlaveConfig.TriggerFilter = 5;
 800243e:	2305      	movs	r3, #5
 8002440:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 8002442:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002446:	4619      	mov	r1, r3
 8002448:	4839      	ldr	r0, [pc, #228]	; (8002530 <MX_TIM1_Init+0x19c>)
 800244a:	f003 fa31 	bl	80058b0 <HAL_TIM_SlaveConfigSynchro>
 800244e:	4603      	mov	r3, r0
 8002450:	2b00      	cmp	r3, #0
 8002452:	d001      	beq.n	8002458 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8002454:	f7ff fee8 	bl	8002228 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002458:	2300      	movs	r3, #0
 800245a:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800245c:	2301      	movs	r3, #1
 800245e:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8002460:	2300      	movs	r3, #0
 8002462:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigIC.ICFilter = 5;
 8002464:	2305      	movs	r3, #5
 8002466:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8002468:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800246c:	2200      	movs	r2, #0
 800246e:	4619      	mov	r1, r3
 8002470:	482f      	ldr	r0, [pc, #188]	; (8002530 <MX_TIM1_Init+0x19c>)
 8002472:	f002 fff7 	bl	8005464 <HAL_TIM_IC_ConfigChannel>
 8002476:	4603      	mov	r3, r0
 8002478:	2b00      	cmp	r3, #0
 800247a:	d001      	beq.n	8002480 <MX_TIM1_Init+0xec>
  {
    Error_Handler();
 800247c:	f7ff fed4 	bl	8002228 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8002480:	2302      	movs	r3, #2
 8002482:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8002484:	2302      	movs	r3, #2
 8002486:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8002488:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800248c:	2204      	movs	r2, #4
 800248e:	4619      	mov	r1, r3
 8002490:	4827      	ldr	r0, [pc, #156]	; (8002530 <MX_TIM1_Init+0x19c>)
 8002492:	f002 ffe7 	bl	8005464 <HAL_TIM_IC_ConfigChannel>
 8002496:	4603      	mov	r3, r0
 8002498:	2b00      	cmp	r3, #0
 800249a:	d001      	beq.n	80024a0 <MX_TIM1_Init+0x10c>
  {
    Error_Handler();
 800249c:	f7ff fec4 	bl	8002228 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80024a0:	2300      	movs	r3, #0
 80024a2:	63fb      	str	r3, [r7, #60]	; 0x3c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80024a4:	2300      	movs	r3, #0
 80024a6:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80024a8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80024ac:	4619      	mov	r1, r3
 80024ae:	4820      	ldr	r0, [pc, #128]	; (8002530 <MX_TIM1_Init+0x19c>)
 80024b0:	f003 fedf 	bl	8006272 <HAL_TIMEx_MasterConfigSynchronization>
 80024b4:	4603      	mov	r3, r0
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d001      	beq.n	80024be <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 80024ba:	f7ff feb5 	bl	8002228 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80024be:	2360      	movs	r3, #96	; 0x60
 80024c0:	623b      	str	r3, [r7, #32]
  sConfigOC.Pulse = 0;
 80024c2:	2300      	movs	r3, #0
 80024c4:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80024c6:	2300      	movs	r3, #0
 80024c8:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80024ca:	2300      	movs	r3, #0
 80024cc:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80024ce:	2300      	movs	r3, #0
 80024d0:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80024d2:	2300      	movs	r3, #0
 80024d4:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80024d6:	f107 0320 	add.w	r3, r7, #32
 80024da:	220c      	movs	r2, #12
 80024dc:	4619      	mov	r1, r3
 80024de:	4814      	ldr	r0, [pc, #80]	; (8002530 <MX_TIM1_Init+0x19c>)
 80024e0:	f003 f85c 	bl	800559c <HAL_TIM_PWM_ConfigChannel>
 80024e4:	4603      	mov	r3, r0
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d001      	beq.n	80024ee <MX_TIM1_Init+0x15a>
  {
    Error_Handler();
 80024ea:	f7ff fe9d 	bl	8002228 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80024ee:	2300      	movs	r3, #0
 80024f0:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80024f2:	2300      	movs	r3, #0
 80024f4:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80024f6:	2300      	movs	r3, #0
 80024f8:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80024fa:	2300      	movs	r3, #0
 80024fc:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80024fe:	2300      	movs	r3, #0
 8002500:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002502:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002506:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002508:	2300      	movs	r3, #0
 800250a:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800250c:	463b      	mov	r3, r7
 800250e:	4619      	mov	r1, r3
 8002510:	4807      	ldr	r0, [pc, #28]	; (8002530 <MX_TIM1_Init+0x19c>)
 8002512:	f003 fef2 	bl	80062fa <HAL_TIMEx_ConfigBreakDeadTime>
 8002516:	4603      	mov	r3, r0
 8002518:	2b00      	cmp	r3, #0
 800251a:	d001      	beq.n	8002520 <MX_TIM1_Init+0x18c>
  {
    Error_Handler();
 800251c:	f7ff fe84 	bl	8002228 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002520:	4803      	ldr	r0, [pc, #12]	; (8002530 <MX_TIM1_Init+0x19c>)
 8002522:	f000 fa33 	bl	800298c <HAL_TIM_MspPostInit>

}
 8002526:	bf00      	nop
 8002528:	3768      	adds	r7, #104	; 0x68
 800252a:	46bd      	mov	sp, r7
 800252c:	bd80      	pop	{r7, pc}
 800252e:	bf00      	nop
 8002530:	20000160 	.word	0x20000160
 8002534:	40012c00 	.word	0x40012c00

08002538 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	b08e      	sub	sp, #56	; 0x38
 800253c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800253e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002542:	2200      	movs	r2, #0
 8002544:	601a      	str	r2, [r3, #0]
 8002546:	605a      	str	r2, [r3, #4]
 8002548:	609a      	str	r2, [r3, #8]
 800254a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800254c:	f107 0320 	add.w	r3, r7, #32
 8002550:	2200      	movs	r2, #0
 8002552:	601a      	str	r2, [r3, #0]
 8002554:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002556:	1d3b      	adds	r3, r7, #4
 8002558:	2200      	movs	r2, #0
 800255a:	601a      	str	r2, [r3, #0]
 800255c:	605a      	str	r2, [r3, #4]
 800255e:	609a      	str	r2, [r3, #8]
 8002560:	60da      	str	r2, [r3, #12]
 8002562:	611a      	str	r2, [r3, #16]
 8002564:	615a      	str	r2, [r3, #20]
 8002566:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002568:	4b3e      	ldr	r3, [pc, #248]	; (8002664 <MX_TIM2_Init+0x12c>)
 800256a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800256e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1;
 8002570:	4b3c      	ldr	r3, [pc, #240]	; (8002664 <MX_TIM2_Init+0x12c>)
 8002572:	2201      	movs	r2, #1
 8002574:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002576:	4b3b      	ldr	r3, [pc, #236]	; (8002664 <MX_TIM2_Init+0x12c>)
 8002578:	2200      	movs	r2, #0
 800257a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 64000;
 800257c:	4b39      	ldr	r3, [pc, #228]	; (8002664 <MX_TIM2_Init+0x12c>)
 800257e:	f44f 427a 	mov.w	r2, #64000	; 0xfa00
 8002582:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002584:	4b37      	ldr	r3, [pc, #220]	; (8002664 <MX_TIM2_Init+0x12c>)
 8002586:	2200      	movs	r2, #0
 8002588:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800258a:	4b36      	ldr	r3, [pc, #216]	; (8002664 <MX_TIM2_Init+0x12c>)
 800258c:	2200      	movs	r2, #0
 800258e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002590:	4834      	ldr	r0, [pc, #208]	; (8002664 <MX_TIM2_Init+0x12c>)
 8002592:	f002 fb71 	bl	8004c78 <HAL_TIM_Base_Init>
 8002596:	4603      	mov	r3, r0
 8002598:	2b00      	cmp	r3, #0
 800259a:	d001      	beq.n	80025a0 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 800259c:	f7ff fe44 	bl	8002228 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80025a0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80025a4:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80025a6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80025aa:	4619      	mov	r1, r3
 80025ac:	482d      	ldr	r0, [pc, #180]	; (8002664 <MX_TIM2_Init+0x12c>)
 80025ae:	f003 f8bb 	bl	8005728 <HAL_TIM_ConfigClockSource>
 80025b2:	4603      	mov	r3, r0
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d001      	beq.n	80025bc <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 80025b8:	f7ff fe36 	bl	8002228 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80025bc:	4829      	ldr	r0, [pc, #164]	; (8002664 <MX_TIM2_Init+0x12c>)
 80025be:	f002 fbdd 	bl	8004d7c <HAL_TIM_PWM_Init>
 80025c2:	4603      	mov	r3, r0
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d001      	beq.n	80025cc <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 80025c8:	f7ff fe2e 	bl	8002228 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 80025cc:	4825      	ldr	r0, [pc, #148]	; (8002664 <MX_TIM2_Init+0x12c>)
 80025ce:	f002 fba1 	bl	8004d14 <HAL_TIM_OC_Init>
 80025d2:	4603      	mov	r3, r0
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d001      	beq.n	80025dc <MX_TIM2_Init+0xa4>
  {
    Error_Handler();
 80025d8:	f7ff fe26 	bl	8002228 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80025dc:	2300      	movs	r3, #0
 80025de:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80025e0:	2300      	movs	r3, #0
 80025e2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80025e4:	f107 0320 	add.w	r3, r7, #32
 80025e8:	4619      	mov	r1, r3
 80025ea:	481e      	ldr	r0, [pc, #120]	; (8002664 <MX_TIM2_Init+0x12c>)
 80025ec:	f003 fe41 	bl	8006272 <HAL_TIMEx_MasterConfigSynchronization>
 80025f0:	4603      	mov	r3, r0
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d001      	beq.n	80025fa <MX_TIM2_Init+0xc2>
  {
    Error_Handler();
 80025f6:	f7ff fe17 	bl	8002228 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80025fa:	2360      	movs	r3, #96	; 0x60
 80025fc:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80025fe:	2300      	movs	r3, #0
 8002600:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002602:	2300      	movs	r3, #0
 8002604:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002606:	2300      	movs	r3, #0
 8002608:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800260a:	1d3b      	adds	r3, r7, #4
 800260c:	2200      	movs	r2, #0
 800260e:	4619      	mov	r1, r3
 8002610:	4814      	ldr	r0, [pc, #80]	; (8002664 <MX_TIM2_Init+0x12c>)
 8002612:	f002 ffc3 	bl	800559c <HAL_TIM_PWM_ConfigChannel>
 8002616:	4603      	mov	r3, r0
 8002618:	2b00      	cmp	r3, #0
 800261a:	d001      	beq.n	8002620 <MX_TIM2_Init+0xe8>
  {
    Error_Handler();
 800261c:	f7ff fe04 	bl	8002228 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8002620:	2300      	movs	r3, #0
 8002622:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002624:	1d3b      	adds	r3, r7, #4
 8002626:	2204      	movs	r2, #4
 8002628:	4619      	mov	r1, r3
 800262a:	480e      	ldr	r0, [pc, #56]	; (8002664 <MX_TIM2_Init+0x12c>)
 800262c:	f002 feba 	bl	80053a4 <HAL_TIM_OC_ConfigChannel>
 8002630:	4603      	mov	r3, r0
 8002632:	2b00      	cmp	r3, #0
 8002634:	d001      	beq.n	800263a <MX_TIM2_Init+0x102>
  {
    Error_Handler();
 8002636:	f7ff fdf7 	bl	8002228 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800263a:	2360      	movs	r3, #96	; 0x60
 800263c:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800263e:	1d3b      	adds	r3, r7, #4
 8002640:	220c      	movs	r2, #12
 8002642:	4619      	mov	r1, r3
 8002644:	4807      	ldr	r0, [pc, #28]	; (8002664 <MX_TIM2_Init+0x12c>)
 8002646:	f002 ffa9 	bl	800559c <HAL_TIM_PWM_ConfigChannel>
 800264a:	4603      	mov	r3, r0
 800264c:	2b00      	cmp	r3, #0
 800264e:	d001      	beq.n	8002654 <MX_TIM2_Init+0x11c>
  {
    Error_Handler();
 8002650:	f7ff fdea 	bl	8002228 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8002654:	4803      	ldr	r0, [pc, #12]	; (8002664 <MX_TIM2_Init+0x12c>)
 8002656:	f000 f999 	bl	800298c <HAL_TIM_MspPostInit>

}
 800265a:	bf00      	nop
 800265c:	3738      	adds	r7, #56	; 0x38
 800265e:	46bd      	mov	sp, r7
 8002660:	bd80      	pop	{r7, pc}
 8002662:	bf00      	nop
 8002664:	200001a0 	.word	0x200001a0

08002668 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002668:	b580      	push	{r7, lr}
 800266a:	b08c      	sub	sp, #48	; 0x30
 800266c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800266e:	f107 030c 	add.w	r3, r7, #12
 8002672:	2224      	movs	r2, #36	; 0x24
 8002674:	2100      	movs	r1, #0
 8002676:	4618      	mov	r0, r3
 8002678:	f004 fa4a 	bl	8006b10 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800267c:	1d3b      	adds	r3, r7, #4
 800267e:	2200      	movs	r2, #0
 8002680:	601a      	str	r2, [r3, #0]
 8002682:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002684:	4b20      	ldr	r3, [pc, #128]	; (8002708 <MX_TIM3_Init+0xa0>)
 8002686:	4a21      	ldr	r2, [pc, #132]	; (800270c <MX_TIM3_Init+0xa4>)
 8002688:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800268a:	4b1f      	ldr	r3, [pc, #124]	; (8002708 <MX_TIM3_Init+0xa0>)
 800268c:	2200      	movs	r2, #0
 800268e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002690:	4b1d      	ldr	r3, [pc, #116]	; (8002708 <MX_TIM3_Init+0xa0>)
 8002692:	2200      	movs	r2, #0
 8002694:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 0xFFFF;
 8002696:	4b1c      	ldr	r3, [pc, #112]	; (8002708 <MX_TIM3_Init+0xa0>)
 8002698:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800269c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800269e:	4b1a      	ldr	r3, [pc, #104]	; (8002708 <MX_TIM3_Init+0xa0>)
 80026a0:	2200      	movs	r2, #0
 80026a2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80026a4:	4b18      	ldr	r3, [pc, #96]	; (8002708 <MX_TIM3_Init+0xa0>)
 80026a6:	2280      	movs	r2, #128	; 0x80
 80026a8:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80026aa:	2303      	movs	r3, #3
 80026ac:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80026ae:	2300      	movs	r3, #0
 80026b0:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80026b2:	2301      	movs	r3, #1
 80026b4:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80026b6:	2300      	movs	r3, #0
 80026b8:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 8;
 80026ba:	2308      	movs	r3, #8
 80026bc:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80026be:	2300      	movs	r3, #0
 80026c0:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80026c2:	2301      	movs	r3, #1
 80026c4:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80026c6:	2300      	movs	r3, #0
 80026c8:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 8;
 80026ca:	2308      	movs	r3, #8
 80026cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80026ce:	f107 030c 	add.w	r3, r7, #12
 80026d2:	4619      	mov	r1, r3
 80026d4:	480c      	ldr	r0, [pc, #48]	; (8002708 <MX_TIM3_Init+0xa0>)
 80026d6:	f002 fc97 	bl	8005008 <HAL_TIM_Encoder_Init>
 80026da:	4603      	mov	r3, r0
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d001      	beq.n	80026e4 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 80026e0:	f7ff fda2 	bl	8002228 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80026e4:	2300      	movs	r3, #0
 80026e6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80026e8:	2300      	movs	r3, #0
 80026ea:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80026ec:	1d3b      	adds	r3, r7, #4
 80026ee:	4619      	mov	r1, r3
 80026f0:	4805      	ldr	r0, [pc, #20]	; (8002708 <MX_TIM3_Init+0xa0>)
 80026f2:	f003 fdbe 	bl	8006272 <HAL_TIMEx_MasterConfigSynchronization>
 80026f6:	4603      	mov	r3, r0
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d001      	beq.n	8002700 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 80026fc:	f7ff fd94 	bl	8002228 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002700:	bf00      	nop
 8002702:	3730      	adds	r7, #48	; 0x30
 8002704:	46bd      	mov	sp, r7
 8002706:	bd80      	pop	{r7, pc}
 8002708:	200001e0 	.word	0x200001e0
 800270c:	40000400 	.word	0x40000400

08002710 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	b08c      	sub	sp, #48	; 0x30
 8002714:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002716:	f107 030c 	add.w	r3, r7, #12
 800271a:	2224      	movs	r2, #36	; 0x24
 800271c:	2100      	movs	r1, #0
 800271e:	4618      	mov	r0, r3
 8002720:	f004 f9f6 	bl	8006b10 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002724:	1d3b      	adds	r3, r7, #4
 8002726:	2200      	movs	r2, #0
 8002728:	601a      	str	r2, [r3, #0]
 800272a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800272c:	4b20      	ldr	r3, [pc, #128]	; (80027b0 <MX_TIM4_Init+0xa0>)
 800272e:	4a21      	ldr	r2, [pc, #132]	; (80027b4 <MX_TIM4_Init+0xa4>)
 8002730:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8002732:	4b1f      	ldr	r3, [pc, #124]	; (80027b0 <MX_TIM4_Init+0xa0>)
 8002734:	2200      	movs	r2, #0
 8002736:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002738:	4b1d      	ldr	r3, [pc, #116]	; (80027b0 <MX_TIM4_Init+0xa0>)
 800273a:	2200      	movs	r2, #0
 800273c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 0xFFFF;
 800273e:	4b1c      	ldr	r3, [pc, #112]	; (80027b0 <MX_TIM4_Init+0xa0>)
 8002740:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002744:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002746:	4b1a      	ldr	r3, [pc, #104]	; (80027b0 <MX_TIM4_Init+0xa0>)
 8002748:	2200      	movs	r2, #0
 800274a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800274c:	4b18      	ldr	r3, [pc, #96]	; (80027b0 <MX_TIM4_Init+0xa0>)
 800274e:	2280      	movs	r2, #128	; 0x80
 8002750:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002752:	2303      	movs	r3, #3
 8002754:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002756:	2300      	movs	r3, #0
 8002758:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800275a:	2301      	movs	r3, #1
 800275c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800275e:	2300      	movs	r3, #0
 8002760:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 8;
 8002762:	2308      	movs	r3, #8
 8002764:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002766:	2300      	movs	r3, #0
 8002768:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800276a:	2301      	movs	r3, #1
 800276c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800276e:	2300      	movs	r3, #0
 8002770:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 8;
 8002772:	2308      	movs	r3, #8
 8002774:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8002776:	f107 030c 	add.w	r3, r7, #12
 800277a:	4619      	mov	r1, r3
 800277c:	480c      	ldr	r0, [pc, #48]	; (80027b0 <MX_TIM4_Init+0xa0>)
 800277e:	f002 fc43 	bl	8005008 <HAL_TIM_Encoder_Init>
 8002782:	4603      	mov	r3, r0
 8002784:	2b00      	cmp	r3, #0
 8002786:	d001      	beq.n	800278c <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8002788:	f7ff fd4e 	bl	8002228 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800278c:	2300      	movs	r3, #0
 800278e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002790:	2300      	movs	r3, #0
 8002792:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002794:	1d3b      	adds	r3, r7, #4
 8002796:	4619      	mov	r1, r3
 8002798:	4805      	ldr	r0, [pc, #20]	; (80027b0 <MX_TIM4_Init+0xa0>)
 800279a:	f003 fd6a 	bl	8006272 <HAL_TIMEx_MasterConfigSynchronization>
 800279e:	4603      	mov	r3, r0
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d001      	beq.n	80027a8 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 80027a4:	f7ff fd40 	bl	8002228 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80027a8:	bf00      	nop
 80027aa:	3730      	adds	r7, #48	; 0x30
 80027ac:	46bd      	mov	sp, r7
 80027ae:	bd80      	pop	{r7, pc}
 80027b0:	20000220 	.word	0x20000220
 80027b4:	40000800 	.word	0x40000800

080027b8 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	b088      	sub	sp, #32
 80027bc:	af00      	add	r7, sp, #0
 80027be:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027c0:	f107 0310 	add.w	r3, r7, #16
 80027c4:	2200      	movs	r2, #0
 80027c6:	601a      	str	r2, [r3, #0]
 80027c8:	605a      	str	r2, [r3, #4]
 80027ca:	609a      	str	r2, [r3, #8]
 80027cc:	60da      	str	r2, [r3, #12]
  if(tim_pwmHandle->Instance==TIM1)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	4a1a      	ldr	r2, [pc, #104]	; (800283c <HAL_TIM_PWM_MspInit+0x84>)
 80027d4:	4293      	cmp	r3, r2
 80027d6:	d12c      	bne.n	8002832 <HAL_TIM_PWM_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80027d8:	4b19      	ldr	r3, [pc, #100]	; (8002840 <HAL_TIM_PWM_MspInit+0x88>)
 80027da:	699b      	ldr	r3, [r3, #24]
 80027dc:	4a18      	ldr	r2, [pc, #96]	; (8002840 <HAL_TIM_PWM_MspInit+0x88>)
 80027de:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80027e2:	6193      	str	r3, [r2, #24]
 80027e4:	4b16      	ldr	r3, [pc, #88]	; (8002840 <HAL_TIM_PWM_MspInit+0x88>)
 80027e6:	699b      	ldr	r3, [r3, #24]
 80027e8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80027ec:	60fb      	str	r3, [r7, #12]
 80027ee:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80027f0:	4b13      	ldr	r3, [pc, #76]	; (8002840 <HAL_TIM_PWM_MspInit+0x88>)
 80027f2:	699b      	ldr	r3, [r3, #24]
 80027f4:	4a12      	ldr	r2, [pc, #72]	; (8002840 <HAL_TIM_PWM_MspInit+0x88>)
 80027f6:	f043 0304 	orr.w	r3, r3, #4
 80027fa:	6193      	str	r3, [r2, #24]
 80027fc:	4b10      	ldr	r3, [pc, #64]	; (8002840 <HAL_TIM_PWM_MspInit+0x88>)
 80027fe:	699b      	ldr	r3, [r3, #24]
 8002800:	f003 0304 	and.w	r3, r3, #4
 8002804:	60bb      	str	r3, [r7, #8]
 8002806:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002808:	f44f 7380 	mov.w	r3, #256	; 0x100
 800280c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800280e:	2300      	movs	r3, #0
 8002810:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002812:	2300      	movs	r3, #0
 8002814:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002816:	f107 0310 	add.w	r3, r7, #16
 800281a:	4619      	mov	r1, r3
 800281c:	4809      	ldr	r0, [pc, #36]	; (8002844 <HAL_TIM_PWM_MspInit+0x8c>)
 800281e:	f001 fb8b 	bl	8003f38 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8002822:	2200      	movs	r2, #0
 8002824:	2100      	movs	r1, #0
 8002826:	201b      	movs	r0, #27
 8002828:	f001 f8b1 	bl	800398e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 800282c:	201b      	movs	r0, #27
 800282e:	f001 f8ca 	bl	80039c6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8002832:	bf00      	nop
 8002834:	3720      	adds	r7, #32
 8002836:	46bd      	mov	sp, r7
 8002838:	bd80      	pop	{r7, pc}
 800283a:	bf00      	nop
 800283c:	40012c00 	.word	0x40012c00
 8002840:	40021000 	.word	0x40021000
 8002844:	40010800 	.word	0x40010800

08002848 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002848:	b580      	push	{r7, lr}
 800284a:	b084      	sub	sp, #16
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002858:	d113      	bne.n	8002882 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800285a:	4b0c      	ldr	r3, [pc, #48]	; (800288c <HAL_TIM_Base_MspInit+0x44>)
 800285c:	69db      	ldr	r3, [r3, #28]
 800285e:	4a0b      	ldr	r2, [pc, #44]	; (800288c <HAL_TIM_Base_MspInit+0x44>)
 8002860:	f043 0301 	orr.w	r3, r3, #1
 8002864:	61d3      	str	r3, [r2, #28]
 8002866:	4b09      	ldr	r3, [pc, #36]	; (800288c <HAL_TIM_Base_MspInit+0x44>)
 8002868:	69db      	ldr	r3, [r3, #28]
 800286a:	f003 0301 	and.w	r3, r3, #1
 800286e:	60fb      	str	r3, [r7, #12]
 8002870:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002872:	2200      	movs	r2, #0
 8002874:	2100      	movs	r1, #0
 8002876:	201c      	movs	r0, #28
 8002878:	f001 f889 	bl	800398e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800287c:	201c      	movs	r0, #28
 800287e:	f001 f8a2 	bl	80039c6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8002882:	bf00      	nop
 8002884:	3710      	adds	r7, #16
 8002886:	46bd      	mov	sp, r7
 8002888:	bd80      	pop	{r7, pc}
 800288a:	bf00      	nop
 800288c:	40021000 	.word	0x40021000

08002890 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8002890:	b580      	push	{r7, lr}
 8002892:	b08c      	sub	sp, #48	; 0x30
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002898:	f107 031c 	add.w	r3, r7, #28
 800289c:	2200      	movs	r2, #0
 800289e:	601a      	str	r2, [r3, #0]
 80028a0:	605a      	str	r2, [r3, #4]
 80028a2:	609a      	str	r2, [r3, #8]
 80028a4:	60da      	str	r2, [r3, #12]
  if(tim_encoderHandle->Instance==TIM3)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	4a33      	ldr	r2, [pc, #204]	; (8002978 <HAL_TIM_Encoder_MspInit+0xe8>)
 80028ac:	4293      	cmp	r3, r2
 80028ae:	d136      	bne.n	800291e <HAL_TIM_Encoder_MspInit+0x8e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80028b0:	4b32      	ldr	r3, [pc, #200]	; (800297c <HAL_TIM_Encoder_MspInit+0xec>)
 80028b2:	69db      	ldr	r3, [r3, #28]
 80028b4:	4a31      	ldr	r2, [pc, #196]	; (800297c <HAL_TIM_Encoder_MspInit+0xec>)
 80028b6:	f043 0302 	orr.w	r3, r3, #2
 80028ba:	61d3      	str	r3, [r2, #28]
 80028bc:	4b2f      	ldr	r3, [pc, #188]	; (800297c <HAL_TIM_Encoder_MspInit+0xec>)
 80028be:	69db      	ldr	r3, [r3, #28]
 80028c0:	f003 0302 	and.w	r3, r3, #2
 80028c4:	61bb      	str	r3, [r7, #24]
 80028c6:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80028c8:	4b2c      	ldr	r3, [pc, #176]	; (800297c <HAL_TIM_Encoder_MspInit+0xec>)
 80028ca:	699b      	ldr	r3, [r3, #24]
 80028cc:	4a2b      	ldr	r2, [pc, #172]	; (800297c <HAL_TIM_Encoder_MspInit+0xec>)
 80028ce:	f043 0308 	orr.w	r3, r3, #8
 80028d2:	6193      	str	r3, [r2, #24]
 80028d4:	4b29      	ldr	r3, [pc, #164]	; (800297c <HAL_TIM_Encoder_MspInit+0xec>)
 80028d6:	699b      	ldr	r3, [r3, #24]
 80028d8:	f003 0308 	and.w	r3, r3, #8
 80028dc:	617b      	str	r3, [r7, #20]
 80028de:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = ENC1A_Pin|ENC1B_Pin;
 80028e0:	2330      	movs	r3, #48	; 0x30
 80028e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80028e4:	2300      	movs	r3, #0
 80028e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028e8:	2300      	movs	r3, #0
 80028ea:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80028ec:	f107 031c 	add.w	r3, r7, #28
 80028f0:	4619      	mov	r1, r3
 80028f2:	4823      	ldr	r0, [pc, #140]	; (8002980 <HAL_TIM_Encoder_MspInit+0xf0>)
 80028f4:	f001 fb20 	bl	8003f38 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM3_PARTIAL();
 80028f8:	4b22      	ldr	r3, [pc, #136]	; (8002984 <HAL_TIM_Encoder_MspInit+0xf4>)
 80028fa:	685b      	ldr	r3, [r3, #4]
 80028fc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80028fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002900:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8002904:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002906:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002908:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 800290c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800290e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002910:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002914:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002916:	4a1b      	ldr	r2, [pc, #108]	; (8002984 <HAL_TIM_Encoder_MspInit+0xf4>)
 8002918:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800291a:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 800291c:	e028      	b.n	8002970 <HAL_TIM_Encoder_MspInit+0xe0>
  else if(tim_encoderHandle->Instance==TIM4)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	4a19      	ldr	r2, [pc, #100]	; (8002988 <HAL_TIM_Encoder_MspInit+0xf8>)
 8002924:	4293      	cmp	r3, r2
 8002926:	d123      	bne.n	8002970 <HAL_TIM_Encoder_MspInit+0xe0>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002928:	4b14      	ldr	r3, [pc, #80]	; (800297c <HAL_TIM_Encoder_MspInit+0xec>)
 800292a:	69db      	ldr	r3, [r3, #28]
 800292c:	4a13      	ldr	r2, [pc, #76]	; (800297c <HAL_TIM_Encoder_MspInit+0xec>)
 800292e:	f043 0304 	orr.w	r3, r3, #4
 8002932:	61d3      	str	r3, [r2, #28]
 8002934:	4b11      	ldr	r3, [pc, #68]	; (800297c <HAL_TIM_Encoder_MspInit+0xec>)
 8002936:	69db      	ldr	r3, [r3, #28]
 8002938:	f003 0304 	and.w	r3, r3, #4
 800293c:	613b      	str	r3, [r7, #16]
 800293e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002940:	4b0e      	ldr	r3, [pc, #56]	; (800297c <HAL_TIM_Encoder_MspInit+0xec>)
 8002942:	699b      	ldr	r3, [r3, #24]
 8002944:	4a0d      	ldr	r2, [pc, #52]	; (800297c <HAL_TIM_Encoder_MspInit+0xec>)
 8002946:	f043 0308 	orr.w	r3, r3, #8
 800294a:	6193      	str	r3, [r2, #24]
 800294c:	4b0b      	ldr	r3, [pc, #44]	; (800297c <HAL_TIM_Encoder_MspInit+0xec>)
 800294e:	699b      	ldr	r3, [r3, #24]
 8002950:	f003 0308 	and.w	r3, r3, #8
 8002954:	60fb      	str	r3, [r7, #12]
 8002956:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ENC2A_Pin|ENC2B_Pin;
 8002958:	23c0      	movs	r3, #192	; 0xc0
 800295a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800295c:	2300      	movs	r3, #0
 800295e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002960:	2300      	movs	r3, #0
 8002962:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002964:	f107 031c 	add.w	r3, r7, #28
 8002968:	4619      	mov	r1, r3
 800296a:	4805      	ldr	r0, [pc, #20]	; (8002980 <HAL_TIM_Encoder_MspInit+0xf0>)
 800296c:	f001 fae4 	bl	8003f38 <HAL_GPIO_Init>
}
 8002970:	bf00      	nop
 8002972:	3730      	adds	r7, #48	; 0x30
 8002974:	46bd      	mov	sp, r7
 8002976:	bd80      	pop	{r7, pc}
 8002978:	40000400 	.word	0x40000400
 800297c:	40021000 	.word	0x40021000
 8002980:	40010c00 	.word	0x40010c00
 8002984:	40010000 	.word	0x40010000
 8002988:	40000800 	.word	0x40000800

0800298c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800298c:	b580      	push	{r7, lr}
 800298e:	b08a      	sub	sp, #40	; 0x28
 8002990:	af00      	add	r7, sp, #0
 8002992:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002994:	f107 0314 	add.w	r3, r7, #20
 8002998:	2200      	movs	r2, #0
 800299a:	601a      	str	r2, [r3, #0]
 800299c:	605a      	str	r2, [r3, #4]
 800299e:	609a      	str	r2, [r3, #8]
 80029a0:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM1)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	4a35      	ldr	r2, [pc, #212]	; (8002a7c <HAL_TIM_MspPostInit+0xf0>)
 80029a8:	4293      	cmp	r3, r2
 80029aa:	d119      	bne.n	80029e0 <HAL_TIM_MspPostInit+0x54>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80029ac:	4b34      	ldr	r3, [pc, #208]	; (8002a80 <HAL_TIM_MspPostInit+0xf4>)
 80029ae:	699b      	ldr	r3, [r3, #24]
 80029b0:	4a33      	ldr	r2, [pc, #204]	; (8002a80 <HAL_TIM_MspPostInit+0xf4>)
 80029b2:	f043 0304 	orr.w	r3, r3, #4
 80029b6:	6193      	str	r3, [r2, #24]
 80029b8:	4b31      	ldr	r3, [pc, #196]	; (8002a80 <HAL_TIM_MspPostInit+0xf4>)
 80029ba:	699b      	ldr	r3, [r3, #24]
 80029bc:	f003 0304 	and.w	r3, r3, #4
 80029c0:	613b      	str	r3, [r7, #16]
 80029c2:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80029c4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80029c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029ca:	2302      	movs	r3, #2
 80029cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029ce:	2302      	movs	r3, #2
 80029d0:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029d2:	f107 0314 	add.w	r3, r7, #20
 80029d6:	4619      	mov	r1, r3
 80029d8:	482a      	ldr	r0, [pc, #168]	; (8002a84 <HAL_TIM_MspPostInit+0xf8>)
 80029da:	f001 faad 	bl	8003f38 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80029de:	e048      	b.n	8002a72 <HAL_TIM_MspPostInit+0xe6>
  else if(timHandle->Instance==TIM2)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029e8:	d143      	bne.n	8002a72 <HAL_TIM_MspPostInit+0xe6>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80029ea:	4b25      	ldr	r3, [pc, #148]	; (8002a80 <HAL_TIM_MspPostInit+0xf4>)
 80029ec:	699b      	ldr	r3, [r3, #24]
 80029ee:	4a24      	ldr	r2, [pc, #144]	; (8002a80 <HAL_TIM_MspPostInit+0xf4>)
 80029f0:	f043 0308 	orr.w	r3, r3, #8
 80029f4:	6193      	str	r3, [r2, #24]
 80029f6:	4b22      	ldr	r3, [pc, #136]	; (8002a80 <HAL_TIM_MspPostInit+0xf4>)
 80029f8:	699b      	ldr	r3, [r3, #24]
 80029fa:	f003 0308 	and.w	r3, r3, #8
 80029fe:	60fb      	str	r3, [r7, #12]
 8002a00:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a02:	4b1f      	ldr	r3, [pc, #124]	; (8002a80 <HAL_TIM_MspPostInit+0xf4>)
 8002a04:	699b      	ldr	r3, [r3, #24]
 8002a06:	4a1e      	ldr	r2, [pc, #120]	; (8002a80 <HAL_TIM_MspPostInit+0xf4>)
 8002a08:	f043 0304 	orr.w	r3, r3, #4
 8002a0c:	6193      	str	r3, [r2, #24]
 8002a0e:	4b1c      	ldr	r3, [pc, #112]	; (8002a80 <HAL_TIM_MspPostInit+0xf4>)
 8002a10:	699b      	ldr	r3, [r3, #24]
 8002a12:	f003 0304 	and.w	r3, r3, #4
 8002a16:	60bb      	str	r3, [r7, #8]
 8002a18:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = PWMD_Pin;
 8002a1a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002a1e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a20:	2302      	movs	r3, #2
 8002a22:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a24:	2302      	movs	r3, #2
 8002a26:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(PWMD_GPIO_Port, &GPIO_InitStruct);
 8002a28:	f107 0314 	add.w	r3, r7, #20
 8002a2c:	4619      	mov	r1, r3
 8002a2e:	4816      	ldr	r0, [pc, #88]	; (8002a88 <HAL_TIM_MspPostInit+0xfc>)
 8002a30:	f001 fa82 	bl	8003f38 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = PWMG_Pin;
 8002a34:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002a38:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a3a:	2302      	movs	r3, #2
 8002a3c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a3e:	2302      	movs	r3, #2
 8002a40:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(PWMG_GPIO_Port, &GPIO_InitStruct);
 8002a42:	f107 0314 	add.w	r3, r7, #20
 8002a46:	4619      	mov	r1, r3
 8002a48:	480e      	ldr	r0, [pc, #56]	; (8002a84 <HAL_TIM_MspPostInit+0xf8>)
 8002a4a:	f001 fa75 	bl	8003f38 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_TIM2_ENABLE();
 8002a4e:	4b0f      	ldr	r3, [pc, #60]	; (8002a8c <HAL_TIM_MspPostInit+0x100>)
 8002a50:	685b      	ldr	r3, [r3, #4]
 8002a52:	627b      	str	r3, [r7, #36]	; 0x24
 8002a54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a56:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a5a:	627b      	str	r3, [r7, #36]	; 0x24
 8002a5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a5e:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8002a62:	627b      	str	r3, [r7, #36]	; 0x24
 8002a64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a66:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8002a6a:	627b      	str	r3, [r7, #36]	; 0x24
 8002a6c:	4a07      	ldr	r2, [pc, #28]	; (8002a8c <HAL_TIM_MspPostInit+0x100>)
 8002a6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a70:	6053      	str	r3, [r2, #4]
}
 8002a72:	bf00      	nop
 8002a74:	3728      	adds	r7, #40	; 0x28
 8002a76:	46bd      	mov	sp, r7
 8002a78:	bd80      	pop	{r7, pc}
 8002a7a:	bf00      	nop
 8002a7c:	40012c00 	.word	0x40012c00
 8002a80:	40021000 	.word	0x40021000
 8002a84:	40010800 	.word	0x40010800
 8002a88:	40010c00 	.word	0x40010c00
 8002a8c:	40010000 	.word	0x40010000

08002a90 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart3;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002a94:	4b11      	ldr	r3, [pc, #68]	; (8002adc <MX_USART1_UART_Init+0x4c>)
 8002a96:	4a12      	ldr	r2, [pc, #72]	; (8002ae0 <MX_USART1_UART_Init+0x50>)
 8002a98:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8002a9a:	4b10      	ldr	r3, [pc, #64]	; (8002adc <MX_USART1_UART_Init+0x4c>)
 8002a9c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002aa0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002aa2:	4b0e      	ldr	r3, [pc, #56]	; (8002adc <MX_USART1_UART_Init+0x4c>)
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002aa8:	4b0c      	ldr	r3, [pc, #48]	; (8002adc <MX_USART1_UART_Init+0x4c>)
 8002aaa:	2200      	movs	r2, #0
 8002aac:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002aae:	4b0b      	ldr	r3, [pc, #44]	; (8002adc <MX_USART1_UART_Init+0x4c>)
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002ab4:	4b09      	ldr	r3, [pc, #36]	; (8002adc <MX_USART1_UART_Init+0x4c>)
 8002ab6:	220c      	movs	r2, #12
 8002ab8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002aba:	4b08      	ldr	r3, [pc, #32]	; (8002adc <MX_USART1_UART_Init+0x4c>)
 8002abc:	2200      	movs	r2, #0
 8002abe:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002ac0:	4b06      	ldr	r3, [pc, #24]	; (8002adc <MX_USART1_UART_Init+0x4c>)
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002ac6:	4805      	ldr	r0, [pc, #20]	; (8002adc <MX_USART1_UART_Init+0x4c>)
 8002ac8:	f003 fc7a 	bl	80063c0 <HAL_UART_Init>
 8002acc:	4603      	mov	r3, r0
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d001      	beq.n	8002ad6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002ad2:	f7ff fba9 	bl	8002228 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002ad6:	bf00      	nop
 8002ad8:	bd80      	pop	{r7, pc}
 8002ada:	bf00      	nop
 8002adc:	20000260 	.word	0x20000260
 8002ae0:	40013800 	.word	0x40013800

08002ae4 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002ae8:	4b11      	ldr	r3, [pc, #68]	; (8002b30 <MX_USART3_UART_Init+0x4c>)
 8002aea:	4a12      	ldr	r2, [pc, #72]	; (8002b34 <MX_USART3_UART_Init+0x50>)
 8002aec:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8002aee:	4b10      	ldr	r3, [pc, #64]	; (8002b30 <MX_USART3_UART_Init+0x4c>)
 8002af0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002af4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002af6:	4b0e      	ldr	r3, [pc, #56]	; (8002b30 <MX_USART3_UART_Init+0x4c>)
 8002af8:	2200      	movs	r2, #0
 8002afa:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002afc:	4b0c      	ldr	r3, [pc, #48]	; (8002b30 <MX_USART3_UART_Init+0x4c>)
 8002afe:	2200      	movs	r2, #0
 8002b00:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002b02:	4b0b      	ldr	r3, [pc, #44]	; (8002b30 <MX_USART3_UART_Init+0x4c>)
 8002b04:	2200      	movs	r2, #0
 8002b06:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002b08:	4b09      	ldr	r3, [pc, #36]	; (8002b30 <MX_USART3_UART_Init+0x4c>)
 8002b0a:	220c      	movs	r2, #12
 8002b0c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002b0e:	4b08      	ldr	r3, [pc, #32]	; (8002b30 <MX_USART3_UART_Init+0x4c>)
 8002b10:	2200      	movs	r2, #0
 8002b12:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002b14:	4b06      	ldr	r3, [pc, #24]	; (8002b30 <MX_USART3_UART_Init+0x4c>)
 8002b16:	2200      	movs	r2, #0
 8002b18:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002b1a:	4805      	ldr	r0, [pc, #20]	; (8002b30 <MX_USART3_UART_Init+0x4c>)
 8002b1c:	f003 fc50 	bl	80063c0 <HAL_UART_Init>
 8002b20:	4603      	mov	r3, r0
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d001      	beq.n	8002b2a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8002b26:	f7ff fb7f 	bl	8002228 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002b2a:	bf00      	nop
 8002b2c:	bd80      	pop	{r7, pc}
 8002b2e:	bf00      	nop
 8002b30:	200002a0 	.word	0x200002a0
 8002b34:	40004800 	.word	0x40004800

08002b38 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	b08c      	sub	sp, #48	; 0x30
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b40:	f107 031c 	add.w	r3, r7, #28
 8002b44:	2200      	movs	r2, #0
 8002b46:	601a      	str	r2, [r3, #0]
 8002b48:	605a      	str	r2, [r3, #4]
 8002b4a:	609a      	str	r2, [r3, #8]
 8002b4c:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	4a45      	ldr	r2, [pc, #276]	; (8002c68 <HAL_UART_MspInit+0x130>)
 8002b54:	4293      	cmp	r3, r2
 8002b56:	d13a      	bne.n	8002bce <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002b58:	4b44      	ldr	r3, [pc, #272]	; (8002c6c <HAL_UART_MspInit+0x134>)
 8002b5a:	699b      	ldr	r3, [r3, #24]
 8002b5c:	4a43      	ldr	r2, [pc, #268]	; (8002c6c <HAL_UART_MspInit+0x134>)
 8002b5e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002b62:	6193      	str	r3, [r2, #24]
 8002b64:	4b41      	ldr	r3, [pc, #260]	; (8002c6c <HAL_UART_MspInit+0x134>)
 8002b66:	699b      	ldr	r3, [r3, #24]
 8002b68:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b6c:	61bb      	str	r3, [r7, #24]
 8002b6e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b70:	4b3e      	ldr	r3, [pc, #248]	; (8002c6c <HAL_UART_MspInit+0x134>)
 8002b72:	699b      	ldr	r3, [r3, #24]
 8002b74:	4a3d      	ldr	r2, [pc, #244]	; (8002c6c <HAL_UART_MspInit+0x134>)
 8002b76:	f043 0304 	orr.w	r3, r3, #4
 8002b7a:	6193      	str	r3, [r2, #24]
 8002b7c:	4b3b      	ldr	r3, [pc, #236]	; (8002c6c <HAL_UART_MspInit+0x134>)
 8002b7e:	699b      	ldr	r3, [r3, #24]
 8002b80:	f003 0304 	and.w	r3, r3, #4
 8002b84:	617b      	str	r3, [r7, #20]
 8002b86:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002b88:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002b8c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b8e:	2302      	movs	r3, #2
 8002b90:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002b92:	2303      	movs	r3, #3
 8002b94:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b96:	f107 031c 	add.w	r3, r7, #28
 8002b9a:	4619      	mov	r1, r3
 8002b9c:	4834      	ldr	r0, [pc, #208]	; (8002c70 <HAL_UART_MspInit+0x138>)
 8002b9e:	f001 f9cb 	bl	8003f38 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002ba2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002ba6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002ba8:	2300      	movs	r3, #0
 8002baa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bac:	2300      	movs	r3, #0
 8002bae:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002bb0:	f107 031c 	add.w	r3, r7, #28
 8002bb4:	4619      	mov	r1, r3
 8002bb6:	482e      	ldr	r0, [pc, #184]	; (8002c70 <HAL_UART_MspInit+0x138>)
 8002bb8:	f001 f9be 	bl	8003f38 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	2100      	movs	r1, #0
 8002bc0:	2025      	movs	r0, #37	; 0x25
 8002bc2:	f000 fee4 	bl	800398e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002bc6:	2025      	movs	r0, #37	; 0x25
 8002bc8:	f000 fefd 	bl	80039c6 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8002bcc:	e048      	b.n	8002c60 <HAL_UART_MspInit+0x128>
  else if(uartHandle->Instance==USART3)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	4a28      	ldr	r2, [pc, #160]	; (8002c74 <HAL_UART_MspInit+0x13c>)
 8002bd4:	4293      	cmp	r3, r2
 8002bd6:	d143      	bne.n	8002c60 <HAL_UART_MspInit+0x128>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002bd8:	4b24      	ldr	r3, [pc, #144]	; (8002c6c <HAL_UART_MspInit+0x134>)
 8002bda:	69db      	ldr	r3, [r3, #28]
 8002bdc:	4a23      	ldr	r2, [pc, #140]	; (8002c6c <HAL_UART_MspInit+0x134>)
 8002bde:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002be2:	61d3      	str	r3, [r2, #28]
 8002be4:	4b21      	ldr	r3, [pc, #132]	; (8002c6c <HAL_UART_MspInit+0x134>)
 8002be6:	69db      	ldr	r3, [r3, #28]
 8002be8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002bec:	613b      	str	r3, [r7, #16]
 8002bee:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002bf0:	4b1e      	ldr	r3, [pc, #120]	; (8002c6c <HAL_UART_MspInit+0x134>)
 8002bf2:	699b      	ldr	r3, [r3, #24]
 8002bf4:	4a1d      	ldr	r2, [pc, #116]	; (8002c6c <HAL_UART_MspInit+0x134>)
 8002bf6:	f043 0310 	orr.w	r3, r3, #16
 8002bfa:	6193      	str	r3, [r2, #24]
 8002bfc:	4b1b      	ldr	r3, [pc, #108]	; (8002c6c <HAL_UART_MspInit+0x134>)
 8002bfe:	699b      	ldr	r3, [r3, #24]
 8002c00:	f003 0310 	and.w	r3, r3, #16
 8002c04:	60fb      	str	r3, [r7, #12]
 8002c06:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = BLE_RX_Pin;
 8002c08:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002c0c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c0e:	2302      	movs	r3, #2
 8002c10:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002c12:	2303      	movs	r3, #3
 8002c14:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(BLE_RX_GPIO_Port, &GPIO_InitStruct);
 8002c16:	f107 031c 	add.w	r3, r7, #28
 8002c1a:	4619      	mov	r1, r3
 8002c1c:	4816      	ldr	r0, [pc, #88]	; (8002c78 <HAL_UART_MspInit+0x140>)
 8002c1e:	f001 f98b 	bl	8003f38 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = BLE_TX_Pin;
 8002c22:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002c26:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002c28:	2300      	movs	r3, #0
 8002c2a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c2c:	2300      	movs	r3, #0
 8002c2e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BLE_TX_GPIO_Port, &GPIO_InitStruct);
 8002c30:	f107 031c 	add.w	r3, r7, #28
 8002c34:	4619      	mov	r1, r3
 8002c36:	4810      	ldr	r0, [pc, #64]	; (8002c78 <HAL_UART_MspInit+0x140>)
 8002c38:	f001 f97e 	bl	8003f38 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_USART3_PARTIAL();
 8002c3c:	4b0f      	ldr	r3, [pc, #60]	; (8002c7c <HAL_UART_MspInit+0x144>)
 8002c3e:	685b      	ldr	r3, [r3, #4]
 8002c40:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002c42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c44:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8002c48:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002c4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c4c:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8002c50:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002c52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c54:	f043 0310 	orr.w	r3, r3, #16
 8002c58:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002c5a:	4a08      	ldr	r2, [pc, #32]	; (8002c7c <HAL_UART_MspInit+0x144>)
 8002c5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c5e:	6053      	str	r3, [r2, #4]
}
 8002c60:	bf00      	nop
 8002c62:	3730      	adds	r7, #48	; 0x30
 8002c64:	46bd      	mov	sp, r7
 8002c66:	bd80      	pop	{r7, pc}
 8002c68:	40013800 	.word	0x40013800
 8002c6c:	40021000 	.word	0x40021000
 8002c70:	40010800 	.word	0x40010800
 8002c74:	40004800 	.word	0x40004800
 8002c78:	40011000 	.word	0x40011000
 8002c7c:	40010000 	.word	0x40010000

08002c80 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8002c80:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8002c82:	e003      	b.n	8002c8c <LoopCopyDataInit>

08002c84 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8002c84:	4b0b      	ldr	r3, [pc, #44]	; (8002cb4 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8002c86:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8002c88:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8002c8a:	3104      	adds	r1, #4

08002c8c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8002c8c:	480a      	ldr	r0, [pc, #40]	; (8002cb8 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8002c8e:	4b0b      	ldr	r3, [pc, #44]	; (8002cbc <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8002c90:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8002c92:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8002c94:	d3f6      	bcc.n	8002c84 <CopyDataInit>
  ldr r2, =_sbss
 8002c96:	4a0a      	ldr	r2, [pc, #40]	; (8002cc0 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8002c98:	e002      	b.n	8002ca0 <LoopFillZerobss>

08002c9a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8002c9a:	2300      	movs	r3, #0
  str r3, [r2], #4
 8002c9c:	f842 3b04 	str.w	r3, [r2], #4

08002ca0 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8002ca0:	4b08      	ldr	r3, [pc, #32]	; (8002cc4 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8002ca2:	429a      	cmp	r2, r3
  bcc FillZerobss
 8002ca4:	d3f9      	bcc.n	8002c9a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002ca6:	f7ff fb41 	bl	800232c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002caa:	f003 ff39 	bl	8006b20 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002cae:	f7fd fc5b 	bl	8000568 <main>
  bx lr
 8002cb2:	4770      	bx	lr
  ldr r3, =_sidata
 8002cb4:	08006bb0 	.word	0x08006bb0
  ldr r0, =_sdata
 8002cb8:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8002cbc:	20000010 	.word	0x20000010
  ldr r2, =_sbss
 8002cc0:	20000010 	.word	0x20000010
  ldr r3, = _ebss
 8002cc4:	200002e4 	.word	0x200002e4

08002cc8 <BusFault_Handler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002cc8:	e7fe      	b.n	8002cc8 <BusFault_Handler>
	...

08002ccc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002cd0:	4b08      	ldr	r3, [pc, #32]	; (8002cf4 <HAL_Init+0x28>)
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	4a07      	ldr	r2, [pc, #28]	; (8002cf4 <HAL_Init+0x28>)
 8002cd6:	f043 0310 	orr.w	r3, r3, #16
 8002cda:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002cdc:	2003      	movs	r0, #3
 8002cde:	f000 fe4b 	bl	8003978 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002ce2:	2000      	movs	r0, #0
 8002ce4:	f000 f808 	bl	8002cf8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002ce8:	f7ff faa4 	bl	8002234 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002cec:	2300      	movs	r3, #0
}
 8002cee:	4618      	mov	r0, r3
 8002cf0:	bd80      	pop	{r7, pc}
 8002cf2:	bf00      	nop
 8002cf4:	40022000 	.word	0x40022000

08002cf8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	b082      	sub	sp, #8
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002d00:	4b12      	ldr	r3, [pc, #72]	; (8002d4c <HAL_InitTick+0x54>)
 8002d02:	681a      	ldr	r2, [r3, #0]
 8002d04:	4b12      	ldr	r3, [pc, #72]	; (8002d50 <HAL_InitTick+0x58>)
 8002d06:	781b      	ldrb	r3, [r3, #0]
 8002d08:	4619      	mov	r1, r3
 8002d0a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002d0e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002d12:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d16:	4618      	mov	r0, r3
 8002d18:	f000 fe63 	bl	80039e2 <HAL_SYSTICK_Config>
 8002d1c:	4603      	mov	r3, r0
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d001      	beq.n	8002d26 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002d22:	2301      	movs	r3, #1
 8002d24:	e00e      	b.n	8002d44 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	2b0f      	cmp	r3, #15
 8002d2a:	d80a      	bhi.n	8002d42 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	6879      	ldr	r1, [r7, #4]
 8002d30:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002d34:	f000 fe2b 	bl	800398e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002d38:	4a06      	ldr	r2, [pc, #24]	; (8002d54 <HAL_InitTick+0x5c>)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002d3e:	2300      	movs	r3, #0
 8002d40:	e000      	b.n	8002d44 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002d42:	2301      	movs	r3, #1
}
 8002d44:	4618      	mov	r0, r3
 8002d46:	3708      	adds	r7, #8
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	bd80      	pop	{r7, pc}
 8002d4c:	20000004 	.word	0x20000004
 8002d50:	2000000c 	.word	0x2000000c
 8002d54:	20000008 	.word	0x20000008

08002d58 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002d58:	b480      	push	{r7}
 8002d5a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002d5c:	4b05      	ldr	r3, [pc, #20]	; (8002d74 <HAL_IncTick+0x1c>)
 8002d5e:	781b      	ldrb	r3, [r3, #0]
 8002d60:	461a      	mov	r2, r3
 8002d62:	4b05      	ldr	r3, [pc, #20]	; (8002d78 <HAL_IncTick+0x20>)
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	4413      	add	r3, r2
 8002d68:	4a03      	ldr	r2, [pc, #12]	; (8002d78 <HAL_IncTick+0x20>)
 8002d6a:	6013      	str	r3, [r2, #0]
}
 8002d6c:	bf00      	nop
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	bc80      	pop	{r7}
 8002d72:	4770      	bx	lr
 8002d74:	2000000c 	.word	0x2000000c
 8002d78:	200002e0 	.word	0x200002e0

08002d7c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002d7c:	b480      	push	{r7}
 8002d7e:	af00      	add	r7, sp, #0
  return uwTick;
 8002d80:	4b02      	ldr	r3, [pc, #8]	; (8002d8c <HAL_GetTick+0x10>)
 8002d82:	681b      	ldr	r3, [r3, #0]
}
 8002d84:	4618      	mov	r0, r3
 8002d86:	46bd      	mov	sp, r7
 8002d88:	bc80      	pop	{r7}
 8002d8a:	4770      	bx	lr
 8002d8c:	200002e0 	.word	0x200002e0

08002d90 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8002d90:	b480      	push	{r7}
 8002d92:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8002d94:	4b04      	ldr	r3, [pc, #16]	; (8002da8 <HAL_SuspendTick+0x18>)
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	4a03      	ldr	r2, [pc, #12]	; (8002da8 <HAL_SuspendTick+0x18>)
 8002d9a:	f023 0302 	bic.w	r3, r3, #2
 8002d9e:	6013      	str	r3, [r2, #0]
}
 8002da0:	bf00      	nop
 8002da2:	46bd      	mov	sp, r7
 8002da4:	bc80      	pop	{r7}
 8002da6:	4770      	bx	lr
 8002da8:	e000e010 	.word	0xe000e010

08002dac <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	b086      	sub	sp, #24
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002db4:	2300      	movs	r3, #0
 8002db6:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8002db8:	2300      	movs	r3, #0
 8002dba:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8002dbc:	2300      	movs	r3, #0
 8002dbe:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8002dc0:	2300      	movs	r3, #0
 8002dc2:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d101      	bne.n	8002dce <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8002dca:	2301      	movs	r3, #1
 8002dcc:	e0be      	b.n	8002f4c <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	689b      	ldr	r3, [r3, #8]
 8002dd2:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d109      	bne.n	8002df0 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	2200      	movs	r2, #0
 8002de0:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	2200      	movs	r2, #0
 8002de6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002dea:	6878      	ldr	r0, [r7, #4]
 8002dec:	f7fd fa4a 	bl	8000284 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002df0:	6878      	ldr	r0, [r7, #4]
 8002df2:	f000 fc4b 	bl	800368c <ADC_ConversionStop_Disable>
 8002df6:	4603      	mov	r3, r0
 8002df8:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dfe:	f003 0310 	and.w	r3, r3, #16
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	f040 8099 	bne.w	8002f3a <HAL_ADC_Init+0x18e>
 8002e08:	7dfb      	ldrb	r3, [r7, #23]
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	f040 8095 	bne.w	8002f3a <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e14:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002e18:	f023 0302 	bic.w	r3, r3, #2
 8002e1c:	f043 0202 	orr.w	r2, r3, #2
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002e2c:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	7b1b      	ldrb	r3, [r3, #12]
 8002e32:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002e34:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002e36:	68ba      	ldr	r2, [r7, #8]
 8002e38:	4313      	orrs	r3, r2
 8002e3a:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	689b      	ldr	r3, [r3, #8]
 8002e40:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002e44:	d003      	beq.n	8002e4e <HAL_ADC_Init+0xa2>
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	689b      	ldr	r3, [r3, #8]
 8002e4a:	2b01      	cmp	r3, #1
 8002e4c:	d102      	bne.n	8002e54 <HAL_ADC_Init+0xa8>
 8002e4e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002e52:	e000      	b.n	8002e56 <HAL_ADC_Init+0xaa>
 8002e54:	2300      	movs	r3, #0
 8002e56:	693a      	ldr	r2, [r7, #16]
 8002e58:	4313      	orrs	r3, r2
 8002e5a:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	7d1b      	ldrb	r3, [r3, #20]
 8002e60:	2b01      	cmp	r3, #1
 8002e62:	d119      	bne.n	8002e98 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	7b1b      	ldrb	r3, [r3, #12]
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d109      	bne.n	8002e80 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	699b      	ldr	r3, [r3, #24]
 8002e70:	3b01      	subs	r3, #1
 8002e72:	035a      	lsls	r2, r3, #13
 8002e74:	693b      	ldr	r3, [r7, #16]
 8002e76:	4313      	orrs	r3, r2
 8002e78:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002e7c:	613b      	str	r3, [r7, #16]
 8002e7e:	e00b      	b.n	8002e98 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e84:	f043 0220 	orr.w	r2, r3, #32
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e90:	f043 0201 	orr.w	r2, r3, #1
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	685b      	ldr	r3, [r3, #4]
 8002e9e:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	693a      	ldr	r2, [r7, #16]
 8002ea8:	430a      	orrs	r2, r1
 8002eaa:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	689a      	ldr	r2, [r3, #8]
 8002eb2:	4b28      	ldr	r3, [pc, #160]	; (8002f54 <HAL_ADC_Init+0x1a8>)
 8002eb4:	4013      	ands	r3, r2
 8002eb6:	687a      	ldr	r2, [r7, #4]
 8002eb8:	6812      	ldr	r2, [r2, #0]
 8002eba:	68b9      	ldr	r1, [r7, #8]
 8002ebc:	430b      	orrs	r3, r1
 8002ebe:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	689b      	ldr	r3, [r3, #8]
 8002ec4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002ec8:	d003      	beq.n	8002ed2 <HAL_ADC_Init+0x126>
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	689b      	ldr	r3, [r3, #8]
 8002ece:	2b01      	cmp	r3, #1
 8002ed0:	d104      	bne.n	8002edc <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	691b      	ldr	r3, [r3, #16]
 8002ed6:	3b01      	subs	r3, #1
 8002ed8:	051b      	lsls	r3, r3, #20
 8002eda:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ee2:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	68fa      	ldr	r2, [r7, #12]
 8002eec:	430a      	orrs	r2, r1
 8002eee:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	689a      	ldr	r2, [r3, #8]
 8002ef6:	4b18      	ldr	r3, [pc, #96]	; (8002f58 <HAL_ADC_Init+0x1ac>)
 8002ef8:	4013      	ands	r3, r2
 8002efa:	68ba      	ldr	r2, [r7, #8]
 8002efc:	429a      	cmp	r2, r3
 8002efe:	d10b      	bne.n	8002f18 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	2200      	movs	r2, #0
 8002f04:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f0a:	f023 0303 	bic.w	r3, r3, #3
 8002f0e:	f043 0201 	orr.w	r2, r3, #1
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002f16:	e018      	b.n	8002f4a <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f1c:	f023 0312 	bic.w	r3, r3, #18
 8002f20:	f043 0210 	orr.w	r2, r3, #16
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f2c:	f043 0201 	orr.w	r2, r3, #1
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8002f34:	2301      	movs	r3, #1
 8002f36:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002f38:	e007      	b.n	8002f4a <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f3e:	f043 0210 	orr.w	r2, r3, #16
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8002f46:	2301      	movs	r3, #1
 8002f48:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002f4a:	7dfb      	ldrb	r3, [r7, #23]
}
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	3718      	adds	r7, #24
 8002f50:	46bd      	mov	sp, r7
 8002f52:	bd80      	pop	{r7, pc}
 8002f54:	ffe1f7fd 	.word	0xffe1f7fd
 8002f58:	ff1f0efe 	.word	0xff1f0efe

08002f5c <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	b086      	sub	sp, #24
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	60f8      	str	r0, [r7, #12]
 8002f64:	60b9      	str	r1, [r7, #8]
 8002f66:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002f68:	2300      	movs	r3, #0
 8002f6a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	4a64      	ldr	r2, [pc, #400]	; (8003104 <HAL_ADC_Start_DMA+0x1a8>)
 8002f72:	4293      	cmp	r3, r2
 8002f74:	d004      	beq.n	8002f80 <HAL_ADC_Start_DMA+0x24>
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	4a63      	ldr	r2, [pc, #396]	; (8003108 <HAL_ADC_Start_DMA+0x1ac>)
 8002f7c:	4293      	cmp	r3, r2
 8002f7e:	d106      	bne.n	8002f8e <HAL_ADC_Start_DMA+0x32>
 8002f80:	4b60      	ldr	r3, [pc, #384]	; (8003104 <HAL_ADC_Start_DMA+0x1a8>)
 8002f82:	685b      	ldr	r3, [r3, #4]
 8002f84:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	f040 80b3 	bne.w	80030f4 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002f94:	2b01      	cmp	r3, #1
 8002f96:	d101      	bne.n	8002f9c <HAL_ADC_Start_DMA+0x40>
 8002f98:	2302      	movs	r3, #2
 8002f9a:	e0ae      	b.n	80030fa <HAL_ADC_Start_DMA+0x19e>
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	2201      	movs	r2, #1
 8002fa0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002fa4:	68f8      	ldr	r0, [r7, #12]
 8002fa6:	f000 fb1f 	bl	80035e8 <ADC_Enable>
 8002faa:	4603      	mov	r3, r0
 8002fac:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002fae:	7dfb      	ldrb	r3, [r7, #23]
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	f040 809a 	bne.w	80030ea <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fba:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002fbe:	f023 0301 	bic.w	r3, r3, #1
 8002fc2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	4a4e      	ldr	r2, [pc, #312]	; (8003108 <HAL_ADC_Start_DMA+0x1ac>)
 8002fd0:	4293      	cmp	r3, r2
 8002fd2:	d105      	bne.n	8002fe0 <HAL_ADC_Start_DMA+0x84>
 8002fd4:	4b4b      	ldr	r3, [pc, #300]	; (8003104 <HAL_ADC_Start_DMA+0x1a8>)
 8002fd6:	685b      	ldr	r3, [r3, #4]
 8002fd8:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d115      	bne.n	800300c <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fe4:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	685b      	ldr	r3, [r3, #4]
 8002ff2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d026      	beq.n	8003048 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ffe:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003002:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800300a:	e01d      	b.n	8003048 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003010:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	4a39      	ldr	r2, [pc, #228]	; (8003104 <HAL_ADC_Start_DMA+0x1a8>)
 800301e:	4293      	cmp	r3, r2
 8003020:	d004      	beq.n	800302c <HAL_ADC_Start_DMA+0xd0>
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	4a38      	ldr	r2, [pc, #224]	; (8003108 <HAL_ADC_Start_DMA+0x1ac>)
 8003028:	4293      	cmp	r3, r2
 800302a:	d10d      	bne.n	8003048 <HAL_ADC_Start_DMA+0xec>
 800302c:	4b35      	ldr	r3, [pc, #212]	; (8003104 <HAL_ADC_Start_DMA+0x1a8>)
 800302e:	685b      	ldr	r3, [r3, #4]
 8003030:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003034:	2b00      	cmp	r3, #0
 8003036:	d007      	beq.n	8003048 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800303c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003040:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800304c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003050:	2b00      	cmp	r3, #0
 8003052:	d006      	beq.n	8003062 <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003058:	f023 0206 	bic.w	r2, r3, #6
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	62da      	str	r2, [r3, #44]	; 0x2c
 8003060:	e002      	b.n	8003068 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	2200      	movs	r2, #0
 8003066:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	2200      	movs	r2, #0
 800306c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	6a1b      	ldr	r3, [r3, #32]
 8003074:	4a25      	ldr	r2, [pc, #148]	; (800310c <HAL_ADC_Start_DMA+0x1b0>)
 8003076:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	6a1b      	ldr	r3, [r3, #32]
 800307c:	4a24      	ldr	r2, [pc, #144]	; (8003110 <HAL_ADC_Start_DMA+0x1b4>)
 800307e:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	6a1b      	ldr	r3, [r3, #32]
 8003084:	4a23      	ldr	r2, [pc, #140]	; (8003114 <HAL_ADC_Start_DMA+0x1b8>)
 8003086:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f06f 0202 	mvn.w	r2, #2
 8003090:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	689a      	ldr	r2, [r3, #8]
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80030a0:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	6a18      	ldr	r0, [r3, #32]
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	334c      	adds	r3, #76	; 0x4c
 80030ac:	4619      	mov	r1, r3
 80030ae:	68ba      	ldr	r2, [r7, #8]
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	f000 fcfd 	bl	8003ab0 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	689b      	ldr	r3, [r3, #8]
 80030bc:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80030c0:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80030c4:	d108      	bne.n	80030d8 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	689a      	ldr	r2, [r3, #8]
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 80030d4:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 80030d6:	e00f      	b.n	80030f8 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	689a      	ldr	r2, [r3, #8]
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80030e6:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 80030e8:	e006      	b.n	80030f8 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	2200      	movs	r2, #0
 80030ee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 80030f2:	e001      	b.n	80030f8 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80030f4:	2301      	movs	r3, #1
 80030f6:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80030f8:	7dfb      	ldrb	r3, [r7, #23]
}
 80030fa:	4618      	mov	r0, r3
 80030fc:	3718      	adds	r7, #24
 80030fe:	46bd      	mov	sp, r7
 8003100:	bd80      	pop	{r7, pc}
 8003102:	bf00      	nop
 8003104:	40012400 	.word	0x40012400
 8003108:	40012800 	.word	0x40012800
 800310c:	08003701 	.word	0x08003701
 8003110:	0800377d 	.word	0x0800377d
 8003114:	08003799 	.word	0x08003799

08003118 <HAL_ADC_Stop_DMA>:
  *         on devices) have DMA capability.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
{
 8003118:	b580      	push	{r7, lr}
 800311a:	b084      	sub	sp, #16
 800311c:	af00      	add	r7, sp, #0
 800311e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003120:	2300      	movs	r3, #0
 8003122:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800312a:	2b01      	cmp	r3, #1
 800312c:	d101      	bne.n	8003132 <HAL_ADC_Stop_DMA+0x1a>
 800312e:	2302      	movs	r3, #2
 8003130:	e033      	b.n	800319a <HAL_ADC_Stop_DMA+0x82>
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	2201      	movs	r2, #1
 8003136:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800313a:	6878      	ldr	r0, [r7, #4]
 800313c:	f000 faa6 	bl	800368c <ADC_ConversionStop_Disable>
 8003140:	4603      	mov	r3, r0
 8003142:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8003144:	7bfb      	ldrb	r3, [r7, #15]
 8003146:	2b00      	cmp	r3, #0
 8003148:	d122      	bne.n	8003190 <HAL_ADC_Stop_DMA+0x78>
  {
    /* Disable ADC DMA mode */
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	689a      	ldr	r2, [r3, #8]
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003158:	609a      	str	r2, [r3, #8]
    
    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* DMA transfer is on going)                                              */
    tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	6a1b      	ldr	r3, [r3, #32]
 800315e:	4618      	mov	r0, r3
 8003160:	f000 fd05 	bl	8003b6e <HAL_DMA_Abort>
 8003164:	4603      	mov	r3, r0
 8003166:	73fb      	strb	r3, [r7, #15]
    
    /* Check if DMA channel effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8003168:	7bfb      	ldrb	r3, [r7, #15]
 800316a:	2b00      	cmp	r3, #0
 800316c:	d10a      	bne.n	8003184 <HAL_ADC_Stop_DMA+0x6c>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003172:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003176:	f023 0301 	bic.w	r3, r3, #1
 800317a:	f043 0201 	orr.w	r2, r3, #1
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	629a      	str	r2, [r3, #40]	; 0x28
 8003182:	e005      	b.n	8003190 <HAL_ADC_Stop_DMA+0x78>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003188:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	2200      	movs	r2, #0
 8003194:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
  /* Return function status */
  return tmp_hal_status;
 8003198:	7bfb      	ldrb	r3, [r7, #15]
}
 800319a:	4618      	mov	r0, r3
 800319c:	3710      	adds	r7, #16
 800319e:	46bd      	mov	sp, r7
 80031a0:	bd80      	pop	{r7, pc}

080031a2 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80031a2:	b580      	push	{r7, lr}
 80031a4:	b082      	sub	sp, #8
 80031a6:	af00      	add	r7, sp, #0
 80031a8:	6078      	str	r0, [r7, #4]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	685b      	ldr	r3, [r3, #4]
 80031b0:	f003 0320 	and.w	r3, r3, #32
 80031b4:	2b20      	cmp	r3, #32
 80031b6:	d140      	bne.n	800323a <HAL_ADC_IRQHandler+0x98>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) )
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f003 0302 	and.w	r3, r3, #2
 80031c2:	2b02      	cmp	r3, #2
 80031c4:	d139      	bne.n	800323a <HAL_ADC_IRQHandler+0x98>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031ca:	f003 0310 	and.w	r3, r3, #16
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d105      	bne.n	80031de <HAL_ADC_IRQHandler+0x3c>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031d6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	629a      	str	r2, [r3, #40]	; 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	689b      	ldr	r3, [r3, #8]
 80031e4:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80031e8:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80031ec:	d11d      	bne.n	800322a <HAL_ADC_IRQHandler+0x88>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d119      	bne.n	800322a <HAL_ADC_IRQHandler+0x88>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	685a      	ldr	r2, [r3, #4]
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f022 0220 	bic.w	r2, r2, #32
 8003204:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800320a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	629a      	str	r2, [r3, #40]	; 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003216:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800321a:	2b00      	cmp	r3, #0
 800321c:	d105      	bne.n	800322a <HAL_ADC_IRQHandler+0x88>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003222:	f043 0201 	orr.w	r2, r3, #1
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 800322a:	6878      	ldr	r0, [r7, #4]
 800322c:	f7fe fbc8 	bl	80019c0 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f06f 0212 	mvn.w	r2, #18
 8003238:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC))
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	685b      	ldr	r3, [r3, #4]
 8003240:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003244:	2b80      	cmp	r3, #128	; 0x80
 8003246:	d14f      	bne.n	80032e8 <HAL_ADC_IRQHandler+0x146>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC))
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f003 0304 	and.w	r3, r3, #4
 8003252:	2b04      	cmp	r3, #4
 8003254:	d148      	bne.n	80032e8 <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800325a:	f003 0310 	and.w	r3, r3, #16
 800325e:	2b00      	cmp	r3, #0
 8003260:	d105      	bne.n	800326e <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003266:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	629a      	str	r2, [r3, #40]	; 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	689b      	ldr	r3, [r3, #8]
 8003274:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8003278:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 800327c:	d012      	beq.n	80032a4 <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	685b      	ldr	r3, [r3, #4]
 8003284:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8003288:	2b00      	cmp	r3, #0
 800328a:	d125      	bne.n	80032d8 <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	689b      	ldr	r3, [r3, #8]
 8003292:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8003296:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800329a:	d11d      	bne.n	80032d8 <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d119      	bne.n	80032d8 <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	685a      	ldr	r2, [r3, #4]
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80032b2:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032b8:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	629a      	str	r2, [r3, #40]	; 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d105      	bne.n	80032d8 <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032d0:	f043 0201 	orr.w	r2, r3, #1
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80032d8:	6878      	ldr	r0, [r7, #4]
 80032da:	f000 fa77 	bl	80037cc <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f06f 020c 	mvn.w	r2, #12
 80032e6:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	685b      	ldr	r3, [r3, #4]
 80032ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032f2:	2b40      	cmp	r3, #64	; 0x40
 80032f4:	d114      	bne.n	8003320 <HAL_ADC_IRQHandler+0x17e>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f003 0301 	and.w	r3, r3, #1
 8003300:	2b01      	cmp	r3, #1
 8003302:	d10d      	bne.n	8003320 <HAL_ADC_IRQHandler+0x17e>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003308:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8003310:	6878      	ldr	r0, [r7, #4]
 8003312:	f7fe fc4d 	bl	8001bb0 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f06f 0201 	mvn.w	r2, #1
 800331e:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 8003320:	bf00      	nop
 8003322:	3708      	adds	r7, #8
 8003324:	46bd      	mov	sp, r7
 8003326:	bd80      	pop	{r7, pc}

08003328 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003328:	b480      	push	{r7}
 800332a:	b083      	sub	sp, #12
 800332c:	af00      	add	r7, sp, #0
 800332e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8003330:	bf00      	nop
 8003332:	370c      	adds	r7, #12
 8003334:	46bd      	mov	sp, r7
 8003336:	bc80      	pop	{r7}
 8003338:	4770      	bx	lr

0800333a <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800333a:	b480      	push	{r7}
 800333c:	b083      	sub	sp, #12
 800333e:	af00      	add	r7, sp, #0
 8003340:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003342:	bf00      	nop
 8003344:	370c      	adds	r7, #12
 8003346:	46bd      	mov	sp, r7
 8003348:	bc80      	pop	{r7}
 800334a:	4770      	bx	lr

0800334c <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 800334c:	b480      	push	{r7}
 800334e:	b085      	sub	sp, #20
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
 8003354:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003356:	2300      	movs	r3, #0
 8003358:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800335a:	2300      	movs	r3, #0
 800335c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003364:	2b01      	cmp	r3, #1
 8003366:	d101      	bne.n	800336c <HAL_ADC_ConfigChannel+0x20>
 8003368:	2302      	movs	r3, #2
 800336a:	e0dc      	b.n	8003526 <HAL_ADC_ConfigChannel+0x1da>
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	2201      	movs	r2, #1
 8003370:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003374:	683b      	ldr	r3, [r7, #0]
 8003376:	685b      	ldr	r3, [r3, #4]
 8003378:	2b06      	cmp	r3, #6
 800337a:	d81c      	bhi.n	80033b6 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003382:	683b      	ldr	r3, [r7, #0]
 8003384:	685a      	ldr	r2, [r3, #4]
 8003386:	4613      	mov	r3, r2
 8003388:	009b      	lsls	r3, r3, #2
 800338a:	4413      	add	r3, r2
 800338c:	3b05      	subs	r3, #5
 800338e:	221f      	movs	r2, #31
 8003390:	fa02 f303 	lsl.w	r3, r2, r3
 8003394:	43db      	mvns	r3, r3
 8003396:	4019      	ands	r1, r3
 8003398:	683b      	ldr	r3, [r7, #0]
 800339a:	6818      	ldr	r0, [r3, #0]
 800339c:	683b      	ldr	r3, [r7, #0]
 800339e:	685a      	ldr	r2, [r3, #4]
 80033a0:	4613      	mov	r3, r2
 80033a2:	009b      	lsls	r3, r3, #2
 80033a4:	4413      	add	r3, r2
 80033a6:	3b05      	subs	r3, #5
 80033a8:	fa00 f203 	lsl.w	r2, r0, r3
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	430a      	orrs	r2, r1
 80033b2:	635a      	str	r2, [r3, #52]	; 0x34
 80033b4:	e03c      	b.n	8003430 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80033b6:	683b      	ldr	r3, [r7, #0]
 80033b8:	685b      	ldr	r3, [r3, #4]
 80033ba:	2b0c      	cmp	r3, #12
 80033bc:	d81c      	bhi.n	80033f8 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80033c4:	683b      	ldr	r3, [r7, #0]
 80033c6:	685a      	ldr	r2, [r3, #4]
 80033c8:	4613      	mov	r3, r2
 80033ca:	009b      	lsls	r3, r3, #2
 80033cc:	4413      	add	r3, r2
 80033ce:	3b23      	subs	r3, #35	; 0x23
 80033d0:	221f      	movs	r2, #31
 80033d2:	fa02 f303 	lsl.w	r3, r2, r3
 80033d6:	43db      	mvns	r3, r3
 80033d8:	4019      	ands	r1, r3
 80033da:	683b      	ldr	r3, [r7, #0]
 80033dc:	6818      	ldr	r0, [r3, #0]
 80033de:	683b      	ldr	r3, [r7, #0]
 80033e0:	685a      	ldr	r2, [r3, #4]
 80033e2:	4613      	mov	r3, r2
 80033e4:	009b      	lsls	r3, r3, #2
 80033e6:	4413      	add	r3, r2
 80033e8:	3b23      	subs	r3, #35	; 0x23
 80033ea:	fa00 f203 	lsl.w	r2, r0, r3
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	430a      	orrs	r2, r1
 80033f4:	631a      	str	r2, [r3, #48]	; 0x30
 80033f6:	e01b      	b.n	8003430 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80033fe:	683b      	ldr	r3, [r7, #0]
 8003400:	685a      	ldr	r2, [r3, #4]
 8003402:	4613      	mov	r3, r2
 8003404:	009b      	lsls	r3, r3, #2
 8003406:	4413      	add	r3, r2
 8003408:	3b41      	subs	r3, #65	; 0x41
 800340a:	221f      	movs	r2, #31
 800340c:	fa02 f303 	lsl.w	r3, r2, r3
 8003410:	43db      	mvns	r3, r3
 8003412:	4019      	ands	r1, r3
 8003414:	683b      	ldr	r3, [r7, #0]
 8003416:	6818      	ldr	r0, [r3, #0]
 8003418:	683b      	ldr	r3, [r7, #0]
 800341a:	685a      	ldr	r2, [r3, #4]
 800341c:	4613      	mov	r3, r2
 800341e:	009b      	lsls	r3, r3, #2
 8003420:	4413      	add	r3, r2
 8003422:	3b41      	subs	r3, #65	; 0x41
 8003424:	fa00 f203 	lsl.w	r2, r0, r3
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	430a      	orrs	r2, r1
 800342e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8003430:	683b      	ldr	r3, [r7, #0]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	2b09      	cmp	r3, #9
 8003436:	d91c      	bls.n	8003472 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	68d9      	ldr	r1, [r3, #12]
 800343e:	683b      	ldr	r3, [r7, #0]
 8003440:	681a      	ldr	r2, [r3, #0]
 8003442:	4613      	mov	r3, r2
 8003444:	005b      	lsls	r3, r3, #1
 8003446:	4413      	add	r3, r2
 8003448:	3b1e      	subs	r3, #30
 800344a:	2207      	movs	r2, #7
 800344c:	fa02 f303 	lsl.w	r3, r2, r3
 8003450:	43db      	mvns	r3, r3
 8003452:	4019      	ands	r1, r3
 8003454:	683b      	ldr	r3, [r7, #0]
 8003456:	6898      	ldr	r0, [r3, #8]
 8003458:	683b      	ldr	r3, [r7, #0]
 800345a:	681a      	ldr	r2, [r3, #0]
 800345c:	4613      	mov	r3, r2
 800345e:	005b      	lsls	r3, r3, #1
 8003460:	4413      	add	r3, r2
 8003462:	3b1e      	subs	r3, #30
 8003464:	fa00 f203 	lsl.w	r2, r0, r3
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	430a      	orrs	r2, r1
 800346e:	60da      	str	r2, [r3, #12]
 8003470:	e019      	b.n	80034a6 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	6919      	ldr	r1, [r3, #16]
 8003478:	683b      	ldr	r3, [r7, #0]
 800347a:	681a      	ldr	r2, [r3, #0]
 800347c:	4613      	mov	r3, r2
 800347e:	005b      	lsls	r3, r3, #1
 8003480:	4413      	add	r3, r2
 8003482:	2207      	movs	r2, #7
 8003484:	fa02 f303 	lsl.w	r3, r2, r3
 8003488:	43db      	mvns	r3, r3
 800348a:	4019      	ands	r1, r3
 800348c:	683b      	ldr	r3, [r7, #0]
 800348e:	6898      	ldr	r0, [r3, #8]
 8003490:	683b      	ldr	r3, [r7, #0]
 8003492:	681a      	ldr	r2, [r3, #0]
 8003494:	4613      	mov	r3, r2
 8003496:	005b      	lsls	r3, r3, #1
 8003498:	4413      	add	r3, r2
 800349a:	fa00 f203 	lsl.w	r2, r0, r3
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	430a      	orrs	r2, r1
 80034a4:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80034a6:	683b      	ldr	r3, [r7, #0]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	2b10      	cmp	r3, #16
 80034ac:	d003      	beq.n	80034b6 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80034ae:	683b      	ldr	r3, [r7, #0]
 80034b0:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80034b2:	2b11      	cmp	r3, #17
 80034b4:	d132      	bne.n	800351c <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	4a1d      	ldr	r2, [pc, #116]	; (8003530 <HAL_ADC_ConfigChannel+0x1e4>)
 80034bc:	4293      	cmp	r3, r2
 80034be:	d125      	bne.n	800350c <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	689b      	ldr	r3, [r3, #8]
 80034c6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d126      	bne.n	800351c <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	689a      	ldr	r2, [r3, #8]
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80034dc:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80034de:	683b      	ldr	r3, [r7, #0]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	2b10      	cmp	r3, #16
 80034e4:	d11a      	bne.n	800351c <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80034e6:	4b13      	ldr	r3, [pc, #76]	; (8003534 <HAL_ADC_ConfigChannel+0x1e8>)
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	4a13      	ldr	r2, [pc, #76]	; (8003538 <HAL_ADC_ConfigChannel+0x1ec>)
 80034ec:	fba2 2303 	umull	r2, r3, r2, r3
 80034f0:	0c9a      	lsrs	r2, r3, #18
 80034f2:	4613      	mov	r3, r2
 80034f4:	009b      	lsls	r3, r3, #2
 80034f6:	4413      	add	r3, r2
 80034f8:	005b      	lsls	r3, r3, #1
 80034fa:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80034fc:	e002      	b.n	8003504 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80034fe:	68bb      	ldr	r3, [r7, #8]
 8003500:	3b01      	subs	r3, #1
 8003502:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003504:	68bb      	ldr	r3, [r7, #8]
 8003506:	2b00      	cmp	r3, #0
 8003508:	d1f9      	bne.n	80034fe <HAL_ADC_ConfigChannel+0x1b2>
 800350a:	e007      	b.n	800351c <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003510:	f043 0220 	orr.w	r2, r3, #32
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8003518:	2301      	movs	r3, #1
 800351a:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	2200      	movs	r2, #0
 8003520:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8003524:	7bfb      	ldrb	r3, [r7, #15]
}
 8003526:	4618      	mov	r0, r3
 8003528:	3714      	adds	r7, #20
 800352a:	46bd      	mov	sp, r7
 800352c:	bc80      	pop	{r7}
 800352e:	4770      	bx	lr
 8003530:	40012400 	.word	0x40012400
 8003534:	20000004 	.word	0x20000004
 8003538:	431bde83 	.word	0x431bde83

0800353c <HAL_ADC_AnalogWDGConfig>:
  * @param  hadc: ADC handle
  * @param  AnalogWDGConfig: Structure of ADC analog watchdog configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_AnalogWDGConfig(ADC_HandleTypeDef* hadc, ADC_AnalogWDGConfTypeDef* AnalogWDGConfig)
{
 800353c:	b480      	push	{r7}
 800353e:	b083      	sub	sp, #12
 8003540:	af00      	add	r7, sp, #0
 8003542:	6078      	str	r0, [r7, #4]
 8003544:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_ANALOG_WATCHDOG_MODE(AnalogWDGConfig->WatchdogMode));
  assert_param(IS_FUNCTIONAL_STATE(AnalogWDGConfig->ITMode));
  assert_param(IS_ADC_RANGE(AnalogWDGConfig->HighThreshold));
  assert_param(IS_ADC_RANGE(AnalogWDGConfig->LowThreshold));
  
  if((AnalogWDGConfig->WatchdogMode == ADC_ANALOGWATCHDOG_SINGLE_REG)     ||
 8003546:	683b      	ldr	r3, [r7, #0]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	4a24      	ldr	r2, [pc, #144]	; (80035dc <HAL_ADC_AnalogWDGConfig+0xa0>)
 800354c:	4293      	cmp	r3, r2
 800354e:	d003      	beq.n	8003558 <HAL_ADC_AnalogWDGConfig+0x1c>
     (AnalogWDGConfig->WatchdogMode == ADC_ANALOGWATCHDOG_SINGLE_INJEC)   ||
 8003550:	683b      	ldr	r3, [r7, #0]
 8003552:	681b      	ldr	r3, [r3, #0]
  if((AnalogWDGConfig->WatchdogMode == ADC_ANALOGWATCHDOG_SINGLE_REG)     ||
 8003554:	4a22      	ldr	r2, [pc, #136]	; (80035e0 <HAL_ADC_AnalogWDGConfig+0xa4>)
 8003556:	4293      	cmp	r3, r2
  {
    assert_param(IS_ADC_CHANNEL(AnalogWDGConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800355e:	2b01      	cmp	r3, #1
 8003560:	d101      	bne.n	8003566 <HAL_ADC_AnalogWDGConfig+0x2a>
 8003562:	2302      	movs	r3, #2
 8003564:	e035      	b.n	80035d2 <HAL_ADC_AnalogWDGConfig+0x96>
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	2201      	movs	r2, #1
 800356a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Analog watchdog configuration */

  /* Configure ADC Analog watchdog interrupt */
  if(AnalogWDGConfig->ITMode == ENABLE)
 800356e:	683b      	ldr	r3, [r7, #0]
 8003570:	7a1b      	ldrb	r3, [r3, #8]
 8003572:	2b01      	cmp	r3, #1
 8003574:	d108      	bne.n	8003588 <HAL_ADC_AnalogWDGConfig+0x4c>
  {
    /* Enable the ADC Analog watchdog interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_AWD);
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	685a      	ldr	r2, [r3, #4]
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003584:	605a      	str	r2, [r3, #4]
 8003586:	e007      	b.n	8003598 <HAL_ADC_AnalogWDGConfig+0x5c>
  }
  else
  {
    /* Disable the ADC Analog watchdog interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_AWD);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	685a      	ldr	r2, [r3, #4]
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003596:	605a      	str	r2, [r3, #4]
  /* Configuration of analog watchdog:                                        */
  /*  - Set the analog watchdog enable mode: regular and/or injected groups,  */
  /*    one or all channels.                                                  */
  /*  - Set the Analog watchdog channel (is not used if watchdog              */
  /*    mode "all channels": ADC_CFGR_AWD1SGL=0).                             */
  MODIFY_REG(hadc->Instance->CR1            ,
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	685a      	ldr	r2, [r3, #4]
 800359e:	4b11      	ldr	r3, [pc, #68]	; (80035e4 <HAL_ADC_AnalogWDGConfig+0xa8>)
 80035a0:	4013      	ands	r3, r2
 80035a2:	683a      	ldr	r2, [r7, #0]
 80035a4:	6811      	ldr	r1, [r2, #0]
 80035a6:	683a      	ldr	r2, [r7, #0]
 80035a8:	6852      	ldr	r2, [r2, #4]
 80035aa:	4311      	orrs	r1, r2
 80035ac:	687a      	ldr	r2, [r7, #4]
 80035ae:	6812      	ldr	r2, [r2, #0]
 80035b0:	430b      	orrs	r3, r1
 80035b2:	6053      	str	r3, [r2, #4]
             ADC_CR1_AWDCH                  ,
             AnalogWDGConfig->WatchdogMode |
             AnalogWDGConfig->Channel        );
  
  /* Set the high threshold */
  WRITE_REG(hadc->Instance->HTR, AnalogWDGConfig->HighThreshold);
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	683a      	ldr	r2, [r7, #0]
 80035ba:	68d2      	ldr	r2, [r2, #12]
 80035bc:	625a      	str	r2, [r3, #36]	; 0x24
  
  /* Set the low threshold */
  WRITE_REG(hadc->Instance->LTR, AnalogWDGConfig->LowThreshold);
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	683a      	ldr	r2, [r7, #0]
 80035c4:	6912      	ldr	r2, [r2, #16]
 80035c6:	629a      	str	r2, [r3, #40]	; 0x28

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	2200      	movs	r2, #0
 80035cc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return HAL_OK;
 80035d0:	2300      	movs	r3, #0
}
 80035d2:	4618      	mov	r0, r3
 80035d4:	370c      	adds	r7, #12
 80035d6:	46bd      	mov	sp, r7
 80035d8:	bc80      	pop	{r7}
 80035da:	4770      	bx	lr
 80035dc:	00800200 	.word	0x00800200
 80035e0:	00400200 	.word	0x00400200
 80035e4:	ff3ffde0 	.word	0xff3ffde0

080035e8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80035e8:	b580      	push	{r7, lr}
 80035ea:	b084      	sub	sp, #16
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80035f0:	2300      	movs	r3, #0
 80035f2:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80035f4:	2300      	movs	r3, #0
 80035f6:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	689b      	ldr	r3, [r3, #8]
 80035fe:	f003 0301 	and.w	r3, r3, #1
 8003602:	2b01      	cmp	r3, #1
 8003604:	d039      	beq.n	800367a <ADC_Enable+0x92>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	689a      	ldr	r2, [r3, #8]
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f042 0201 	orr.w	r2, r2, #1
 8003614:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003616:	4b1b      	ldr	r3, [pc, #108]	; (8003684 <ADC_Enable+0x9c>)
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	4a1b      	ldr	r2, [pc, #108]	; (8003688 <ADC_Enable+0xa0>)
 800361c:	fba2 2303 	umull	r2, r3, r2, r3
 8003620:	0c9b      	lsrs	r3, r3, #18
 8003622:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8003624:	e002      	b.n	800362c <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8003626:	68bb      	ldr	r3, [r7, #8]
 8003628:	3b01      	subs	r3, #1
 800362a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800362c:	68bb      	ldr	r3, [r7, #8]
 800362e:	2b00      	cmp	r3, #0
 8003630:	d1f9      	bne.n	8003626 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003632:	f7ff fba3 	bl	8002d7c <HAL_GetTick>
 8003636:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8003638:	e018      	b.n	800366c <ADC_Enable+0x84>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800363a:	f7ff fb9f 	bl	8002d7c <HAL_GetTick>
 800363e:	4602      	mov	r2, r0
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	1ad3      	subs	r3, r2, r3
 8003644:	2b02      	cmp	r3, #2
 8003646:	d911      	bls.n	800366c <ADC_Enable+0x84>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800364c:	f043 0210 	orr.w	r2, r3, #16
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	629a      	str	r2, [r3, #40]	; 0x28
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003658:	f043 0201 	orr.w	r2, r3, #1
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	2200      	movs	r2, #0
 8003664:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
        return HAL_ERROR;
 8003668:	2301      	movs	r3, #1
 800366a:	e007      	b.n	800367c <ADC_Enable+0x94>
    while(ADC_IS_ENABLE(hadc) == RESET)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	689b      	ldr	r3, [r3, #8]
 8003672:	f003 0301 	and.w	r3, r3, #1
 8003676:	2b01      	cmp	r3, #1
 8003678:	d1df      	bne.n	800363a <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 800367a:	2300      	movs	r3, #0
}
 800367c:	4618      	mov	r0, r3
 800367e:	3710      	adds	r7, #16
 8003680:	46bd      	mov	sp, r7
 8003682:	bd80      	pop	{r7, pc}
 8003684:	20000004 	.word	0x20000004
 8003688:	431bde83 	.word	0x431bde83

0800368c <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 800368c:	b580      	push	{r7, lr}
 800368e:	b084      	sub	sp, #16
 8003690:	af00      	add	r7, sp, #0
 8003692:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003694:	2300      	movs	r3, #0
 8003696:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	689b      	ldr	r3, [r3, #8]
 800369e:	f003 0301 	and.w	r3, r3, #1
 80036a2:	2b01      	cmp	r3, #1
 80036a4:	d127      	bne.n	80036f6 <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	689a      	ldr	r2, [r3, #8]
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f022 0201 	bic.w	r2, r2, #1
 80036b4:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80036b6:	f7ff fb61 	bl	8002d7c <HAL_GetTick>
 80036ba:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80036bc:	e014      	b.n	80036e8 <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80036be:	f7ff fb5d 	bl	8002d7c <HAL_GetTick>
 80036c2:	4602      	mov	r2, r0
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	1ad3      	subs	r3, r2, r3
 80036c8:	2b02      	cmp	r3, #2
 80036ca:	d90d      	bls.n	80036e8 <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036d0:	f043 0210 	orr.w	r2, r3, #16
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036dc:	f043 0201 	orr.w	r2, r3, #1
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 80036e4:	2301      	movs	r3, #1
 80036e6:	e007      	b.n	80036f8 <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	689b      	ldr	r3, [r3, #8]
 80036ee:	f003 0301 	and.w	r3, r3, #1
 80036f2:	2b01      	cmp	r3, #1
 80036f4:	d0e3      	beq.n	80036be <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80036f6:	2300      	movs	r3, #0
}
 80036f8:	4618      	mov	r0, r3
 80036fa:	3710      	adds	r7, #16
 80036fc:	46bd      	mov	sp, r7
 80036fe:	bd80      	pop	{r7, pc}

08003700 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003700:	b580      	push	{r7, lr}
 8003702:	b084      	sub	sp, #16
 8003704:	af00      	add	r7, sp, #0
 8003706:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800370c:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003712:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003716:	2b00      	cmp	r3, #0
 8003718:	d127      	bne.n	800376a <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800371e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	689b      	ldr	r3, [r3, #8]
 800372c:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8003730:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8003734:	d115      	bne.n	8003762 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800373a:	2b00      	cmp	r3, #0
 800373c:	d111      	bne.n	8003762 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003742:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800374e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003752:	2b00      	cmp	r3, #0
 8003754:	d105      	bne.n	8003762 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800375a:	f043 0201 	orr.w	r2, r3, #1
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003762:	68f8      	ldr	r0, [r7, #12]
 8003764:	f7fe f92c 	bl	80019c0 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8003768:	e004      	b.n	8003774 <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	6a1b      	ldr	r3, [r3, #32]
 800376e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003770:	6878      	ldr	r0, [r7, #4]
 8003772:	4798      	blx	r3
}
 8003774:	bf00      	nop
 8003776:	3710      	adds	r7, #16
 8003778:	46bd      	mov	sp, r7
 800377a:	bd80      	pop	{r7, pc}

0800377c <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800377c:	b580      	push	{r7, lr}
 800377e:	b084      	sub	sp, #16
 8003780:	af00      	add	r7, sp, #0
 8003782:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003788:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800378a:	68f8      	ldr	r0, [r7, #12]
 800378c:	f7ff fdcc 	bl	8003328 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003790:	bf00      	nop
 8003792:	3710      	adds	r7, #16
 8003794:	46bd      	mov	sp, r7
 8003796:	bd80      	pop	{r7, pc}

08003798 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8003798:	b580      	push	{r7, lr}
 800379a:	b084      	sub	sp, #16
 800379c:	af00      	add	r7, sp, #0
 800379e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037a4:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037aa:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037b6:	f043 0204 	orr.w	r2, r3, #4
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80037be:	68f8      	ldr	r0, [r7, #12]
 80037c0:	f7ff fdbb 	bl	800333a <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80037c4:	bf00      	nop
 80037c6:	3710      	adds	r7, #16
 80037c8:	46bd      	mov	sp, r7
 80037ca:	bd80      	pop	{r7, pc}

080037cc <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80037cc:	b480      	push	{r7}
 80037ce:	b083      	sub	sp, #12
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 80037d4:	bf00      	nop
 80037d6:	370c      	adds	r7, #12
 80037d8:	46bd      	mov	sp, r7
 80037da:	bc80      	pop	{r7}
 80037dc:	4770      	bx	lr
	...

080037e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80037e0:	b480      	push	{r7}
 80037e2:	b085      	sub	sp, #20
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	f003 0307 	and.w	r3, r3, #7
 80037ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80037f0:	4b0c      	ldr	r3, [pc, #48]	; (8003824 <__NVIC_SetPriorityGrouping+0x44>)
 80037f2:	68db      	ldr	r3, [r3, #12]
 80037f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80037f6:	68ba      	ldr	r2, [r7, #8]
 80037f8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80037fc:	4013      	ands	r3, r2
 80037fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003804:	68bb      	ldr	r3, [r7, #8]
 8003806:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003808:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800380c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003810:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003812:	4a04      	ldr	r2, [pc, #16]	; (8003824 <__NVIC_SetPriorityGrouping+0x44>)
 8003814:	68bb      	ldr	r3, [r7, #8]
 8003816:	60d3      	str	r3, [r2, #12]
}
 8003818:	bf00      	nop
 800381a:	3714      	adds	r7, #20
 800381c:	46bd      	mov	sp, r7
 800381e:	bc80      	pop	{r7}
 8003820:	4770      	bx	lr
 8003822:	bf00      	nop
 8003824:	e000ed00 	.word	0xe000ed00

08003828 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003828:	b480      	push	{r7}
 800382a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800382c:	4b04      	ldr	r3, [pc, #16]	; (8003840 <__NVIC_GetPriorityGrouping+0x18>)
 800382e:	68db      	ldr	r3, [r3, #12]
 8003830:	0a1b      	lsrs	r3, r3, #8
 8003832:	f003 0307 	and.w	r3, r3, #7
}
 8003836:	4618      	mov	r0, r3
 8003838:	46bd      	mov	sp, r7
 800383a:	bc80      	pop	{r7}
 800383c:	4770      	bx	lr
 800383e:	bf00      	nop
 8003840:	e000ed00 	.word	0xe000ed00

08003844 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003844:	b480      	push	{r7}
 8003846:	b083      	sub	sp, #12
 8003848:	af00      	add	r7, sp, #0
 800384a:	4603      	mov	r3, r0
 800384c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800384e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003852:	2b00      	cmp	r3, #0
 8003854:	db0b      	blt.n	800386e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003856:	79fb      	ldrb	r3, [r7, #7]
 8003858:	f003 021f 	and.w	r2, r3, #31
 800385c:	4906      	ldr	r1, [pc, #24]	; (8003878 <__NVIC_EnableIRQ+0x34>)
 800385e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003862:	095b      	lsrs	r3, r3, #5
 8003864:	2001      	movs	r0, #1
 8003866:	fa00 f202 	lsl.w	r2, r0, r2
 800386a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800386e:	bf00      	nop
 8003870:	370c      	adds	r7, #12
 8003872:	46bd      	mov	sp, r7
 8003874:	bc80      	pop	{r7}
 8003876:	4770      	bx	lr
 8003878:	e000e100 	.word	0xe000e100

0800387c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800387c:	b480      	push	{r7}
 800387e:	b083      	sub	sp, #12
 8003880:	af00      	add	r7, sp, #0
 8003882:	4603      	mov	r3, r0
 8003884:	6039      	str	r1, [r7, #0]
 8003886:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003888:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800388c:	2b00      	cmp	r3, #0
 800388e:	db0a      	blt.n	80038a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003890:	683b      	ldr	r3, [r7, #0]
 8003892:	b2da      	uxtb	r2, r3
 8003894:	490c      	ldr	r1, [pc, #48]	; (80038c8 <__NVIC_SetPriority+0x4c>)
 8003896:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800389a:	0112      	lsls	r2, r2, #4
 800389c:	b2d2      	uxtb	r2, r2
 800389e:	440b      	add	r3, r1
 80038a0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80038a4:	e00a      	b.n	80038bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80038a6:	683b      	ldr	r3, [r7, #0]
 80038a8:	b2da      	uxtb	r2, r3
 80038aa:	4908      	ldr	r1, [pc, #32]	; (80038cc <__NVIC_SetPriority+0x50>)
 80038ac:	79fb      	ldrb	r3, [r7, #7]
 80038ae:	f003 030f 	and.w	r3, r3, #15
 80038b2:	3b04      	subs	r3, #4
 80038b4:	0112      	lsls	r2, r2, #4
 80038b6:	b2d2      	uxtb	r2, r2
 80038b8:	440b      	add	r3, r1
 80038ba:	761a      	strb	r2, [r3, #24]
}
 80038bc:	bf00      	nop
 80038be:	370c      	adds	r7, #12
 80038c0:	46bd      	mov	sp, r7
 80038c2:	bc80      	pop	{r7}
 80038c4:	4770      	bx	lr
 80038c6:	bf00      	nop
 80038c8:	e000e100 	.word	0xe000e100
 80038cc:	e000ed00 	.word	0xe000ed00

080038d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80038d0:	b480      	push	{r7}
 80038d2:	b089      	sub	sp, #36	; 0x24
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	60f8      	str	r0, [r7, #12]
 80038d8:	60b9      	str	r1, [r7, #8]
 80038da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	f003 0307 	and.w	r3, r3, #7
 80038e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80038e4:	69fb      	ldr	r3, [r7, #28]
 80038e6:	f1c3 0307 	rsb	r3, r3, #7
 80038ea:	2b04      	cmp	r3, #4
 80038ec:	bf28      	it	cs
 80038ee:	2304      	movcs	r3, #4
 80038f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80038f2:	69fb      	ldr	r3, [r7, #28]
 80038f4:	3304      	adds	r3, #4
 80038f6:	2b06      	cmp	r3, #6
 80038f8:	d902      	bls.n	8003900 <NVIC_EncodePriority+0x30>
 80038fa:	69fb      	ldr	r3, [r7, #28]
 80038fc:	3b03      	subs	r3, #3
 80038fe:	e000      	b.n	8003902 <NVIC_EncodePriority+0x32>
 8003900:	2300      	movs	r3, #0
 8003902:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003904:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003908:	69bb      	ldr	r3, [r7, #24]
 800390a:	fa02 f303 	lsl.w	r3, r2, r3
 800390e:	43da      	mvns	r2, r3
 8003910:	68bb      	ldr	r3, [r7, #8]
 8003912:	401a      	ands	r2, r3
 8003914:	697b      	ldr	r3, [r7, #20]
 8003916:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003918:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800391c:	697b      	ldr	r3, [r7, #20]
 800391e:	fa01 f303 	lsl.w	r3, r1, r3
 8003922:	43d9      	mvns	r1, r3
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003928:	4313      	orrs	r3, r2
         );
}
 800392a:	4618      	mov	r0, r3
 800392c:	3724      	adds	r7, #36	; 0x24
 800392e:	46bd      	mov	sp, r7
 8003930:	bc80      	pop	{r7}
 8003932:	4770      	bx	lr

08003934 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003934:	b580      	push	{r7, lr}
 8003936:	b082      	sub	sp, #8
 8003938:	af00      	add	r7, sp, #0
 800393a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	3b01      	subs	r3, #1
 8003940:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003944:	d301      	bcc.n	800394a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003946:	2301      	movs	r3, #1
 8003948:	e00f      	b.n	800396a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800394a:	4a0a      	ldr	r2, [pc, #40]	; (8003974 <SysTick_Config+0x40>)
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	3b01      	subs	r3, #1
 8003950:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003952:	210f      	movs	r1, #15
 8003954:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003958:	f7ff ff90 	bl	800387c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800395c:	4b05      	ldr	r3, [pc, #20]	; (8003974 <SysTick_Config+0x40>)
 800395e:	2200      	movs	r2, #0
 8003960:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003962:	4b04      	ldr	r3, [pc, #16]	; (8003974 <SysTick_Config+0x40>)
 8003964:	2207      	movs	r2, #7
 8003966:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003968:	2300      	movs	r3, #0
}
 800396a:	4618      	mov	r0, r3
 800396c:	3708      	adds	r7, #8
 800396e:	46bd      	mov	sp, r7
 8003970:	bd80      	pop	{r7, pc}
 8003972:	bf00      	nop
 8003974:	e000e010 	.word	0xe000e010

08003978 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003978:	b580      	push	{r7, lr}
 800397a:	b082      	sub	sp, #8
 800397c:	af00      	add	r7, sp, #0
 800397e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003980:	6878      	ldr	r0, [r7, #4]
 8003982:	f7ff ff2d 	bl	80037e0 <__NVIC_SetPriorityGrouping>
}
 8003986:	bf00      	nop
 8003988:	3708      	adds	r7, #8
 800398a:	46bd      	mov	sp, r7
 800398c:	bd80      	pop	{r7, pc}

0800398e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800398e:	b580      	push	{r7, lr}
 8003990:	b086      	sub	sp, #24
 8003992:	af00      	add	r7, sp, #0
 8003994:	4603      	mov	r3, r0
 8003996:	60b9      	str	r1, [r7, #8]
 8003998:	607a      	str	r2, [r7, #4]
 800399a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800399c:	2300      	movs	r3, #0
 800399e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80039a0:	f7ff ff42 	bl	8003828 <__NVIC_GetPriorityGrouping>
 80039a4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80039a6:	687a      	ldr	r2, [r7, #4]
 80039a8:	68b9      	ldr	r1, [r7, #8]
 80039aa:	6978      	ldr	r0, [r7, #20]
 80039ac:	f7ff ff90 	bl	80038d0 <NVIC_EncodePriority>
 80039b0:	4602      	mov	r2, r0
 80039b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80039b6:	4611      	mov	r1, r2
 80039b8:	4618      	mov	r0, r3
 80039ba:	f7ff ff5f 	bl	800387c <__NVIC_SetPriority>
}
 80039be:	bf00      	nop
 80039c0:	3718      	adds	r7, #24
 80039c2:	46bd      	mov	sp, r7
 80039c4:	bd80      	pop	{r7, pc}

080039c6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80039c6:	b580      	push	{r7, lr}
 80039c8:	b082      	sub	sp, #8
 80039ca:	af00      	add	r7, sp, #0
 80039cc:	4603      	mov	r3, r0
 80039ce:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80039d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039d4:	4618      	mov	r0, r3
 80039d6:	f7ff ff35 	bl	8003844 <__NVIC_EnableIRQ>
}
 80039da:	bf00      	nop
 80039dc:	3708      	adds	r7, #8
 80039de:	46bd      	mov	sp, r7
 80039e0:	bd80      	pop	{r7, pc}

080039e2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80039e2:	b580      	push	{r7, lr}
 80039e4:	b082      	sub	sp, #8
 80039e6:	af00      	add	r7, sp, #0
 80039e8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80039ea:	6878      	ldr	r0, [r7, #4]
 80039ec:	f7ff ffa2 	bl	8003934 <SysTick_Config>
 80039f0:	4603      	mov	r3, r0
}
 80039f2:	4618      	mov	r0, r3
 80039f4:	3708      	adds	r7, #8
 80039f6:	46bd      	mov	sp, r7
 80039f8:	bd80      	pop	{r7, pc}
	...

080039fc <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80039fc:	b480      	push	{r7}
 80039fe:	b085      	sub	sp, #20
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003a04:	2300      	movs	r3, #0
 8003a06:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d101      	bne.n	8003a12 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8003a0e:	2301      	movs	r3, #1
 8003a10:	e043      	b.n	8003a9a <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	461a      	mov	r2, r3
 8003a18:	4b22      	ldr	r3, [pc, #136]	; (8003aa4 <HAL_DMA_Init+0xa8>)
 8003a1a:	4413      	add	r3, r2
 8003a1c:	4a22      	ldr	r2, [pc, #136]	; (8003aa8 <HAL_DMA_Init+0xac>)
 8003a1e:	fba2 2303 	umull	r2, r3, r2, r3
 8003a22:	091b      	lsrs	r3, r3, #4
 8003a24:	009a      	lsls	r2, r3, #2
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	4a1f      	ldr	r2, [pc, #124]	; (8003aac <HAL_DMA_Init+0xb0>)
 8003a2e:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	2202      	movs	r2, #2
 8003a34:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8003a46:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8003a4a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8003a54:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	68db      	ldr	r3, [r3, #12]
 8003a5a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003a60:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	695b      	ldr	r3, [r3, #20]
 8003a66:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003a6c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	69db      	ldr	r3, [r3, #28]
 8003a72:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003a74:	68fa      	ldr	r2, [r7, #12]
 8003a76:	4313      	orrs	r3, r2
 8003a78:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	68fa      	ldr	r2, [r7, #12]
 8003a80:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	2200      	movs	r2, #0
 8003a86:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	2201      	movs	r2, #1
 8003a8c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2200      	movs	r2, #0
 8003a94:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8003a98:	2300      	movs	r3, #0
}
 8003a9a:	4618      	mov	r0, r3
 8003a9c:	3714      	adds	r7, #20
 8003a9e:	46bd      	mov	sp, r7
 8003aa0:	bc80      	pop	{r7}
 8003aa2:	4770      	bx	lr
 8003aa4:	bffdfff8 	.word	0xbffdfff8
 8003aa8:	cccccccd 	.word	0xcccccccd
 8003aac:	40020000 	.word	0x40020000

08003ab0 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003ab0:	b580      	push	{r7, lr}
 8003ab2:	b086      	sub	sp, #24
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	60f8      	str	r0, [r7, #12]
 8003ab8:	60b9      	str	r1, [r7, #8]
 8003aba:	607a      	str	r2, [r7, #4]
 8003abc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003abe:	2300      	movs	r3, #0
 8003ac0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003ac8:	2b01      	cmp	r3, #1
 8003aca:	d101      	bne.n	8003ad0 <HAL_DMA_Start_IT+0x20>
 8003acc:	2302      	movs	r3, #2
 8003ace:	e04a      	b.n	8003b66 <HAL_DMA_Start_IT+0xb6>
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	2201      	movs	r2, #1
 8003ad4:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003ade:	2b01      	cmp	r3, #1
 8003ae0:	d13a      	bne.n	8003b58 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	2202      	movs	r2, #2
 8003ae6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	2200      	movs	r2, #0
 8003aee:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	681a      	ldr	r2, [r3, #0]
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f022 0201 	bic.w	r2, r2, #1
 8003afe:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003b00:	683b      	ldr	r3, [r7, #0]
 8003b02:	687a      	ldr	r2, [r7, #4]
 8003b04:	68b9      	ldr	r1, [r7, #8]
 8003b06:	68f8      	ldr	r0, [r7, #12]
 8003b08:	f000 f9e8 	bl	8003edc <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d008      	beq.n	8003b26 <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	681a      	ldr	r2, [r3, #0]
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f042 020e 	orr.w	r2, r2, #14
 8003b22:	601a      	str	r2, [r3, #0]
 8003b24:	e00f      	b.n	8003b46 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	681a      	ldr	r2, [r3, #0]
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f022 0204 	bic.w	r2, r2, #4
 8003b34:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	681a      	ldr	r2, [r3, #0]
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f042 020a 	orr.w	r2, r2, #10
 8003b44:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	681a      	ldr	r2, [r3, #0]
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f042 0201 	orr.w	r2, r2, #1
 8003b54:	601a      	str	r2, [r3, #0]
 8003b56:	e005      	b.n	8003b64 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	2200      	movs	r2, #0
 8003b5c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8003b60:	2302      	movs	r3, #2
 8003b62:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8003b64:	7dfb      	ldrb	r3, [r7, #23]
}
 8003b66:	4618      	mov	r0, r3
 8003b68:	3718      	adds	r7, #24
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	bd80      	pop	{r7, pc}

08003b6e <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003b6e:	b480      	push	{r7}
 8003b70:	b085      	sub	sp, #20
 8003b72:	af00      	add	r7, sp, #0
 8003b74:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003b76:	2300      	movs	r3, #0
 8003b78:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003b80:	2b02      	cmp	r3, #2
 8003b82:	d008      	beq.n	8003b96 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	2204      	movs	r2, #4
 8003b88:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8003b92:	2301      	movs	r3, #1
 8003b94:	e020      	b.n	8003bd8 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	681a      	ldr	r2, [r3, #0]
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f022 020e 	bic.w	r2, r2, #14
 8003ba4:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	681a      	ldr	r2, [r3, #0]
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f022 0201 	bic.w	r2, r2, #1
 8003bb4:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bbe:	2101      	movs	r1, #1
 8003bc0:	fa01 f202 	lsl.w	r2, r1, r2
 8003bc4:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	2201      	movs	r2, #1
 8003bca:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	2200      	movs	r2, #0
 8003bd2:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8003bd6:	7bfb      	ldrb	r3, [r7, #15]
}
 8003bd8:	4618      	mov	r0, r3
 8003bda:	3714      	adds	r7, #20
 8003bdc:	46bd      	mov	sp, r7
 8003bde:	bc80      	pop	{r7}
 8003be0:	4770      	bx	lr
	...

08003be4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8003be4:	b580      	push	{r7, lr}
 8003be6:	b084      	sub	sp, #16
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003bec:	2300      	movs	r3, #0
 8003bee:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003bf6:	2b02      	cmp	r3, #2
 8003bf8:	d005      	beq.n	8003c06 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	2204      	movs	r2, #4
 8003bfe:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8003c00:	2301      	movs	r3, #1
 8003c02:	73fb      	strb	r3, [r7, #15]
 8003c04:	e051      	b.n	8003caa <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	681a      	ldr	r2, [r3, #0]
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f022 020e 	bic.w	r2, r2, #14
 8003c14:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	681a      	ldr	r2, [r3, #0]
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f022 0201 	bic.w	r2, r2, #1
 8003c24:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	4a22      	ldr	r2, [pc, #136]	; (8003cb4 <HAL_DMA_Abort_IT+0xd0>)
 8003c2c:	4293      	cmp	r3, r2
 8003c2e:	d029      	beq.n	8003c84 <HAL_DMA_Abort_IT+0xa0>
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	4a20      	ldr	r2, [pc, #128]	; (8003cb8 <HAL_DMA_Abort_IT+0xd4>)
 8003c36:	4293      	cmp	r3, r2
 8003c38:	d022      	beq.n	8003c80 <HAL_DMA_Abort_IT+0x9c>
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	4a1f      	ldr	r2, [pc, #124]	; (8003cbc <HAL_DMA_Abort_IT+0xd8>)
 8003c40:	4293      	cmp	r3, r2
 8003c42:	d01a      	beq.n	8003c7a <HAL_DMA_Abort_IT+0x96>
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	4a1d      	ldr	r2, [pc, #116]	; (8003cc0 <HAL_DMA_Abort_IT+0xdc>)
 8003c4a:	4293      	cmp	r3, r2
 8003c4c:	d012      	beq.n	8003c74 <HAL_DMA_Abort_IT+0x90>
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	4a1c      	ldr	r2, [pc, #112]	; (8003cc4 <HAL_DMA_Abort_IT+0xe0>)
 8003c54:	4293      	cmp	r3, r2
 8003c56:	d00a      	beq.n	8003c6e <HAL_DMA_Abort_IT+0x8a>
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	4a1a      	ldr	r2, [pc, #104]	; (8003cc8 <HAL_DMA_Abort_IT+0xe4>)
 8003c5e:	4293      	cmp	r3, r2
 8003c60:	d102      	bne.n	8003c68 <HAL_DMA_Abort_IT+0x84>
 8003c62:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003c66:	e00e      	b.n	8003c86 <HAL_DMA_Abort_IT+0xa2>
 8003c68:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003c6c:	e00b      	b.n	8003c86 <HAL_DMA_Abort_IT+0xa2>
 8003c6e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003c72:	e008      	b.n	8003c86 <HAL_DMA_Abort_IT+0xa2>
 8003c74:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003c78:	e005      	b.n	8003c86 <HAL_DMA_Abort_IT+0xa2>
 8003c7a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003c7e:	e002      	b.n	8003c86 <HAL_DMA_Abort_IT+0xa2>
 8003c80:	2310      	movs	r3, #16
 8003c82:	e000      	b.n	8003c86 <HAL_DMA_Abort_IT+0xa2>
 8003c84:	2301      	movs	r3, #1
 8003c86:	4a11      	ldr	r2, [pc, #68]	; (8003ccc <HAL_DMA_Abort_IT+0xe8>)
 8003c88:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	2201      	movs	r2, #1
 8003c8e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	2200      	movs	r2, #0
 8003c96:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d003      	beq.n	8003caa <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ca6:	6878      	ldr	r0, [r7, #4]
 8003ca8:	4798      	blx	r3
    } 
  }
  return status;
 8003caa:	7bfb      	ldrb	r3, [r7, #15]
}
 8003cac:	4618      	mov	r0, r3
 8003cae:	3710      	adds	r7, #16
 8003cb0:	46bd      	mov	sp, r7
 8003cb2:	bd80      	pop	{r7, pc}
 8003cb4:	40020008 	.word	0x40020008
 8003cb8:	4002001c 	.word	0x4002001c
 8003cbc:	40020030 	.word	0x40020030
 8003cc0:	40020044 	.word	0x40020044
 8003cc4:	40020058 	.word	0x40020058
 8003cc8:	4002006c 	.word	0x4002006c
 8003ccc:	40020000 	.word	0x40020000

08003cd0 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003cd0:	b580      	push	{r7, lr}
 8003cd2:	b084      	sub	sp, #16
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cec:	2204      	movs	r2, #4
 8003cee:	409a      	lsls	r2, r3
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	4013      	ands	r3, r2
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d04f      	beq.n	8003d98 <HAL_DMA_IRQHandler+0xc8>
 8003cf8:	68bb      	ldr	r3, [r7, #8]
 8003cfa:	f003 0304 	and.w	r3, r3, #4
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d04a      	beq.n	8003d98 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f003 0320 	and.w	r3, r3, #32
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d107      	bne.n	8003d20 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	681a      	ldr	r2, [r3, #0]
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f022 0204 	bic.w	r2, r2, #4
 8003d1e:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	4a66      	ldr	r2, [pc, #408]	; (8003ec0 <HAL_DMA_IRQHandler+0x1f0>)
 8003d26:	4293      	cmp	r3, r2
 8003d28:	d029      	beq.n	8003d7e <HAL_DMA_IRQHandler+0xae>
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	4a65      	ldr	r2, [pc, #404]	; (8003ec4 <HAL_DMA_IRQHandler+0x1f4>)
 8003d30:	4293      	cmp	r3, r2
 8003d32:	d022      	beq.n	8003d7a <HAL_DMA_IRQHandler+0xaa>
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	4a63      	ldr	r2, [pc, #396]	; (8003ec8 <HAL_DMA_IRQHandler+0x1f8>)
 8003d3a:	4293      	cmp	r3, r2
 8003d3c:	d01a      	beq.n	8003d74 <HAL_DMA_IRQHandler+0xa4>
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	4a62      	ldr	r2, [pc, #392]	; (8003ecc <HAL_DMA_IRQHandler+0x1fc>)
 8003d44:	4293      	cmp	r3, r2
 8003d46:	d012      	beq.n	8003d6e <HAL_DMA_IRQHandler+0x9e>
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	4a60      	ldr	r2, [pc, #384]	; (8003ed0 <HAL_DMA_IRQHandler+0x200>)
 8003d4e:	4293      	cmp	r3, r2
 8003d50:	d00a      	beq.n	8003d68 <HAL_DMA_IRQHandler+0x98>
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	4a5f      	ldr	r2, [pc, #380]	; (8003ed4 <HAL_DMA_IRQHandler+0x204>)
 8003d58:	4293      	cmp	r3, r2
 8003d5a:	d102      	bne.n	8003d62 <HAL_DMA_IRQHandler+0x92>
 8003d5c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003d60:	e00e      	b.n	8003d80 <HAL_DMA_IRQHandler+0xb0>
 8003d62:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8003d66:	e00b      	b.n	8003d80 <HAL_DMA_IRQHandler+0xb0>
 8003d68:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003d6c:	e008      	b.n	8003d80 <HAL_DMA_IRQHandler+0xb0>
 8003d6e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003d72:	e005      	b.n	8003d80 <HAL_DMA_IRQHandler+0xb0>
 8003d74:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003d78:	e002      	b.n	8003d80 <HAL_DMA_IRQHandler+0xb0>
 8003d7a:	2340      	movs	r3, #64	; 0x40
 8003d7c:	e000      	b.n	8003d80 <HAL_DMA_IRQHandler+0xb0>
 8003d7e:	2304      	movs	r3, #4
 8003d80:	4a55      	ldr	r2, [pc, #340]	; (8003ed8 <HAL_DMA_IRQHandler+0x208>)
 8003d82:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	f000 8094 	beq.w	8003eb6 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d92:	6878      	ldr	r0, [r7, #4]
 8003d94:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8003d96:	e08e      	b.n	8003eb6 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d9c:	2202      	movs	r2, #2
 8003d9e:	409a      	lsls	r2, r3
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	4013      	ands	r3, r2
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d056      	beq.n	8003e56 <HAL_DMA_IRQHandler+0x186>
 8003da8:	68bb      	ldr	r3, [r7, #8]
 8003daa:	f003 0302 	and.w	r3, r3, #2
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d051      	beq.n	8003e56 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	f003 0320 	and.w	r3, r3, #32
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d10b      	bne.n	8003dd8 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	681a      	ldr	r2, [r3, #0]
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f022 020a 	bic.w	r2, r2, #10
 8003dce:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	2201      	movs	r2, #1
 8003dd4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	4a38      	ldr	r2, [pc, #224]	; (8003ec0 <HAL_DMA_IRQHandler+0x1f0>)
 8003dde:	4293      	cmp	r3, r2
 8003de0:	d029      	beq.n	8003e36 <HAL_DMA_IRQHandler+0x166>
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	4a37      	ldr	r2, [pc, #220]	; (8003ec4 <HAL_DMA_IRQHandler+0x1f4>)
 8003de8:	4293      	cmp	r3, r2
 8003dea:	d022      	beq.n	8003e32 <HAL_DMA_IRQHandler+0x162>
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	4a35      	ldr	r2, [pc, #212]	; (8003ec8 <HAL_DMA_IRQHandler+0x1f8>)
 8003df2:	4293      	cmp	r3, r2
 8003df4:	d01a      	beq.n	8003e2c <HAL_DMA_IRQHandler+0x15c>
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	4a34      	ldr	r2, [pc, #208]	; (8003ecc <HAL_DMA_IRQHandler+0x1fc>)
 8003dfc:	4293      	cmp	r3, r2
 8003dfe:	d012      	beq.n	8003e26 <HAL_DMA_IRQHandler+0x156>
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	4a32      	ldr	r2, [pc, #200]	; (8003ed0 <HAL_DMA_IRQHandler+0x200>)
 8003e06:	4293      	cmp	r3, r2
 8003e08:	d00a      	beq.n	8003e20 <HAL_DMA_IRQHandler+0x150>
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	4a31      	ldr	r2, [pc, #196]	; (8003ed4 <HAL_DMA_IRQHandler+0x204>)
 8003e10:	4293      	cmp	r3, r2
 8003e12:	d102      	bne.n	8003e1a <HAL_DMA_IRQHandler+0x14a>
 8003e14:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003e18:	e00e      	b.n	8003e38 <HAL_DMA_IRQHandler+0x168>
 8003e1a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003e1e:	e00b      	b.n	8003e38 <HAL_DMA_IRQHandler+0x168>
 8003e20:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003e24:	e008      	b.n	8003e38 <HAL_DMA_IRQHandler+0x168>
 8003e26:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003e2a:	e005      	b.n	8003e38 <HAL_DMA_IRQHandler+0x168>
 8003e2c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003e30:	e002      	b.n	8003e38 <HAL_DMA_IRQHandler+0x168>
 8003e32:	2320      	movs	r3, #32
 8003e34:	e000      	b.n	8003e38 <HAL_DMA_IRQHandler+0x168>
 8003e36:	2302      	movs	r3, #2
 8003e38:	4a27      	ldr	r2, [pc, #156]	; (8003ed8 <HAL_DMA_IRQHandler+0x208>)
 8003e3a:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	2200      	movs	r2, #0
 8003e40:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d034      	beq.n	8003eb6 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e50:	6878      	ldr	r0, [r7, #4]
 8003e52:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8003e54:	e02f      	b.n	8003eb6 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e5a:	2208      	movs	r2, #8
 8003e5c:	409a      	lsls	r2, r3
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	4013      	ands	r3, r2
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d028      	beq.n	8003eb8 <HAL_DMA_IRQHandler+0x1e8>
 8003e66:	68bb      	ldr	r3, [r7, #8]
 8003e68:	f003 0308 	and.w	r3, r3, #8
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d023      	beq.n	8003eb8 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	681a      	ldr	r2, [r3, #0]
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f022 020e 	bic.w	r2, r2, #14
 8003e7e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e88:	2101      	movs	r1, #1
 8003e8a:	fa01 f202 	lsl.w	r2, r1, r2
 8003e8e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	2201      	movs	r2, #1
 8003e94:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	2201      	movs	r2, #1
 8003e9a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	2200      	movs	r2, #0
 8003ea2:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d004      	beq.n	8003eb8 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003eb2:	6878      	ldr	r0, [r7, #4]
 8003eb4:	4798      	blx	r3
    }
  }
  return;
 8003eb6:	bf00      	nop
 8003eb8:	bf00      	nop
}
 8003eba:	3710      	adds	r7, #16
 8003ebc:	46bd      	mov	sp, r7
 8003ebe:	bd80      	pop	{r7, pc}
 8003ec0:	40020008 	.word	0x40020008
 8003ec4:	4002001c 	.word	0x4002001c
 8003ec8:	40020030 	.word	0x40020030
 8003ecc:	40020044 	.word	0x40020044
 8003ed0:	40020058 	.word	0x40020058
 8003ed4:	4002006c 	.word	0x4002006c
 8003ed8:	40020000 	.word	0x40020000

08003edc <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003edc:	b480      	push	{r7}
 8003ede:	b085      	sub	sp, #20
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	60f8      	str	r0, [r7, #12]
 8003ee4:	60b9      	str	r1, [r7, #8]
 8003ee6:	607a      	str	r2, [r7, #4]
 8003ee8:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ef2:	2101      	movs	r1, #1
 8003ef4:	fa01 f202 	lsl.w	r2, r1, r2
 8003ef8:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	683a      	ldr	r2, [r7, #0]
 8003f00:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	685b      	ldr	r3, [r3, #4]
 8003f06:	2b10      	cmp	r3, #16
 8003f08:	d108      	bne.n	8003f1c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	687a      	ldr	r2, [r7, #4]
 8003f10:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	68ba      	ldr	r2, [r7, #8]
 8003f18:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003f1a:	e007      	b.n	8003f2c <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	68ba      	ldr	r2, [r7, #8]
 8003f22:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	687a      	ldr	r2, [r7, #4]
 8003f2a:	60da      	str	r2, [r3, #12]
}
 8003f2c:	bf00      	nop
 8003f2e:	3714      	adds	r7, #20
 8003f30:	46bd      	mov	sp, r7
 8003f32:	bc80      	pop	{r7}
 8003f34:	4770      	bx	lr
	...

08003f38 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003f38:	b480      	push	{r7}
 8003f3a:	b08b      	sub	sp, #44	; 0x2c
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	6078      	str	r0, [r7, #4]
 8003f40:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003f42:	2300      	movs	r3, #0
 8003f44:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003f46:	2300      	movs	r3, #0
 8003f48:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003f4a:	e169      	b.n	8004220 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003f4c:	2201      	movs	r2, #1
 8003f4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f50:	fa02 f303 	lsl.w	r3, r2, r3
 8003f54:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003f56:	683b      	ldr	r3, [r7, #0]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	69fa      	ldr	r2, [r7, #28]
 8003f5c:	4013      	ands	r3, r2
 8003f5e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003f60:	69ba      	ldr	r2, [r7, #24]
 8003f62:	69fb      	ldr	r3, [r7, #28]
 8003f64:	429a      	cmp	r2, r3
 8003f66:	f040 8158 	bne.w	800421a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003f6a:	683b      	ldr	r3, [r7, #0]
 8003f6c:	685b      	ldr	r3, [r3, #4]
 8003f6e:	4a9a      	ldr	r2, [pc, #616]	; (80041d8 <HAL_GPIO_Init+0x2a0>)
 8003f70:	4293      	cmp	r3, r2
 8003f72:	d05e      	beq.n	8004032 <HAL_GPIO_Init+0xfa>
 8003f74:	4a98      	ldr	r2, [pc, #608]	; (80041d8 <HAL_GPIO_Init+0x2a0>)
 8003f76:	4293      	cmp	r3, r2
 8003f78:	d875      	bhi.n	8004066 <HAL_GPIO_Init+0x12e>
 8003f7a:	4a98      	ldr	r2, [pc, #608]	; (80041dc <HAL_GPIO_Init+0x2a4>)
 8003f7c:	4293      	cmp	r3, r2
 8003f7e:	d058      	beq.n	8004032 <HAL_GPIO_Init+0xfa>
 8003f80:	4a96      	ldr	r2, [pc, #600]	; (80041dc <HAL_GPIO_Init+0x2a4>)
 8003f82:	4293      	cmp	r3, r2
 8003f84:	d86f      	bhi.n	8004066 <HAL_GPIO_Init+0x12e>
 8003f86:	4a96      	ldr	r2, [pc, #600]	; (80041e0 <HAL_GPIO_Init+0x2a8>)
 8003f88:	4293      	cmp	r3, r2
 8003f8a:	d052      	beq.n	8004032 <HAL_GPIO_Init+0xfa>
 8003f8c:	4a94      	ldr	r2, [pc, #592]	; (80041e0 <HAL_GPIO_Init+0x2a8>)
 8003f8e:	4293      	cmp	r3, r2
 8003f90:	d869      	bhi.n	8004066 <HAL_GPIO_Init+0x12e>
 8003f92:	4a94      	ldr	r2, [pc, #592]	; (80041e4 <HAL_GPIO_Init+0x2ac>)
 8003f94:	4293      	cmp	r3, r2
 8003f96:	d04c      	beq.n	8004032 <HAL_GPIO_Init+0xfa>
 8003f98:	4a92      	ldr	r2, [pc, #584]	; (80041e4 <HAL_GPIO_Init+0x2ac>)
 8003f9a:	4293      	cmp	r3, r2
 8003f9c:	d863      	bhi.n	8004066 <HAL_GPIO_Init+0x12e>
 8003f9e:	4a92      	ldr	r2, [pc, #584]	; (80041e8 <HAL_GPIO_Init+0x2b0>)
 8003fa0:	4293      	cmp	r3, r2
 8003fa2:	d046      	beq.n	8004032 <HAL_GPIO_Init+0xfa>
 8003fa4:	4a90      	ldr	r2, [pc, #576]	; (80041e8 <HAL_GPIO_Init+0x2b0>)
 8003fa6:	4293      	cmp	r3, r2
 8003fa8:	d85d      	bhi.n	8004066 <HAL_GPIO_Init+0x12e>
 8003faa:	2b12      	cmp	r3, #18
 8003fac:	d82a      	bhi.n	8004004 <HAL_GPIO_Init+0xcc>
 8003fae:	2b12      	cmp	r3, #18
 8003fb0:	d859      	bhi.n	8004066 <HAL_GPIO_Init+0x12e>
 8003fb2:	a201      	add	r2, pc, #4	; (adr r2, 8003fb8 <HAL_GPIO_Init+0x80>)
 8003fb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fb8:	08004033 	.word	0x08004033
 8003fbc:	0800400d 	.word	0x0800400d
 8003fc0:	0800401f 	.word	0x0800401f
 8003fc4:	08004061 	.word	0x08004061
 8003fc8:	08004067 	.word	0x08004067
 8003fcc:	08004067 	.word	0x08004067
 8003fd0:	08004067 	.word	0x08004067
 8003fd4:	08004067 	.word	0x08004067
 8003fd8:	08004067 	.word	0x08004067
 8003fdc:	08004067 	.word	0x08004067
 8003fe0:	08004067 	.word	0x08004067
 8003fe4:	08004067 	.word	0x08004067
 8003fe8:	08004067 	.word	0x08004067
 8003fec:	08004067 	.word	0x08004067
 8003ff0:	08004067 	.word	0x08004067
 8003ff4:	08004067 	.word	0x08004067
 8003ff8:	08004067 	.word	0x08004067
 8003ffc:	08004015 	.word	0x08004015
 8004000:	08004029 	.word	0x08004029
 8004004:	4a79      	ldr	r2, [pc, #484]	; (80041ec <HAL_GPIO_Init+0x2b4>)
 8004006:	4293      	cmp	r3, r2
 8004008:	d013      	beq.n	8004032 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800400a:	e02c      	b.n	8004066 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800400c:	683b      	ldr	r3, [r7, #0]
 800400e:	68db      	ldr	r3, [r3, #12]
 8004010:	623b      	str	r3, [r7, #32]
          break;
 8004012:	e029      	b.n	8004068 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8004014:	683b      	ldr	r3, [r7, #0]
 8004016:	68db      	ldr	r3, [r3, #12]
 8004018:	3304      	adds	r3, #4
 800401a:	623b      	str	r3, [r7, #32]
          break;
 800401c:	e024      	b.n	8004068 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800401e:	683b      	ldr	r3, [r7, #0]
 8004020:	68db      	ldr	r3, [r3, #12]
 8004022:	3308      	adds	r3, #8
 8004024:	623b      	str	r3, [r7, #32]
          break;
 8004026:	e01f      	b.n	8004068 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8004028:	683b      	ldr	r3, [r7, #0]
 800402a:	68db      	ldr	r3, [r3, #12]
 800402c:	330c      	adds	r3, #12
 800402e:	623b      	str	r3, [r7, #32]
          break;
 8004030:	e01a      	b.n	8004068 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8004032:	683b      	ldr	r3, [r7, #0]
 8004034:	689b      	ldr	r3, [r3, #8]
 8004036:	2b00      	cmp	r3, #0
 8004038:	d102      	bne.n	8004040 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800403a:	2304      	movs	r3, #4
 800403c:	623b      	str	r3, [r7, #32]
          break;
 800403e:	e013      	b.n	8004068 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8004040:	683b      	ldr	r3, [r7, #0]
 8004042:	689b      	ldr	r3, [r3, #8]
 8004044:	2b01      	cmp	r3, #1
 8004046:	d105      	bne.n	8004054 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004048:	2308      	movs	r3, #8
 800404a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	69fa      	ldr	r2, [r7, #28]
 8004050:	611a      	str	r2, [r3, #16]
          break;
 8004052:	e009      	b.n	8004068 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004054:	2308      	movs	r3, #8
 8004056:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	69fa      	ldr	r2, [r7, #28]
 800405c:	615a      	str	r2, [r3, #20]
          break;
 800405e:	e003      	b.n	8004068 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8004060:	2300      	movs	r3, #0
 8004062:	623b      	str	r3, [r7, #32]
          break;
 8004064:	e000      	b.n	8004068 <HAL_GPIO_Init+0x130>
          break;
 8004066:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8004068:	69bb      	ldr	r3, [r7, #24]
 800406a:	2bff      	cmp	r3, #255	; 0xff
 800406c:	d801      	bhi.n	8004072 <HAL_GPIO_Init+0x13a>
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	e001      	b.n	8004076 <HAL_GPIO_Init+0x13e>
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	3304      	adds	r3, #4
 8004076:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8004078:	69bb      	ldr	r3, [r7, #24]
 800407a:	2bff      	cmp	r3, #255	; 0xff
 800407c:	d802      	bhi.n	8004084 <HAL_GPIO_Init+0x14c>
 800407e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004080:	009b      	lsls	r3, r3, #2
 8004082:	e002      	b.n	800408a <HAL_GPIO_Init+0x152>
 8004084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004086:	3b08      	subs	r3, #8
 8004088:	009b      	lsls	r3, r3, #2
 800408a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800408c:	697b      	ldr	r3, [r7, #20]
 800408e:	681a      	ldr	r2, [r3, #0]
 8004090:	210f      	movs	r1, #15
 8004092:	693b      	ldr	r3, [r7, #16]
 8004094:	fa01 f303 	lsl.w	r3, r1, r3
 8004098:	43db      	mvns	r3, r3
 800409a:	401a      	ands	r2, r3
 800409c:	6a39      	ldr	r1, [r7, #32]
 800409e:	693b      	ldr	r3, [r7, #16]
 80040a0:	fa01 f303 	lsl.w	r3, r1, r3
 80040a4:	431a      	orrs	r2, r3
 80040a6:	697b      	ldr	r3, [r7, #20]
 80040a8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80040aa:	683b      	ldr	r3, [r7, #0]
 80040ac:	685b      	ldr	r3, [r3, #4]
 80040ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	f000 80b1 	beq.w	800421a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80040b8:	4b4d      	ldr	r3, [pc, #308]	; (80041f0 <HAL_GPIO_Init+0x2b8>)
 80040ba:	699b      	ldr	r3, [r3, #24]
 80040bc:	4a4c      	ldr	r2, [pc, #304]	; (80041f0 <HAL_GPIO_Init+0x2b8>)
 80040be:	f043 0301 	orr.w	r3, r3, #1
 80040c2:	6193      	str	r3, [r2, #24]
 80040c4:	4b4a      	ldr	r3, [pc, #296]	; (80041f0 <HAL_GPIO_Init+0x2b8>)
 80040c6:	699b      	ldr	r3, [r3, #24]
 80040c8:	f003 0301 	and.w	r3, r3, #1
 80040cc:	60bb      	str	r3, [r7, #8]
 80040ce:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80040d0:	4a48      	ldr	r2, [pc, #288]	; (80041f4 <HAL_GPIO_Init+0x2bc>)
 80040d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040d4:	089b      	lsrs	r3, r3, #2
 80040d6:	3302      	adds	r3, #2
 80040d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80040dc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80040de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040e0:	f003 0303 	and.w	r3, r3, #3
 80040e4:	009b      	lsls	r3, r3, #2
 80040e6:	220f      	movs	r2, #15
 80040e8:	fa02 f303 	lsl.w	r3, r2, r3
 80040ec:	43db      	mvns	r3, r3
 80040ee:	68fa      	ldr	r2, [r7, #12]
 80040f0:	4013      	ands	r3, r2
 80040f2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	4a40      	ldr	r2, [pc, #256]	; (80041f8 <HAL_GPIO_Init+0x2c0>)
 80040f8:	4293      	cmp	r3, r2
 80040fa:	d013      	beq.n	8004124 <HAL_GPIO_Init+0x1ec>
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	4a3f      	ldr	r2, [pc, #252]	; (80041fc <HAL_GPIO_Init+0x2c4>)
 8004100:	4293      	cmp	r3, r2
 8004102:	d00d      	beq.n	8004120 <HAL_GPIO_Init+0x1e8>
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	4a3e      	ldr	r2, [pc, #248]	; (8004200 <HAL_GPIO_Init+0x2c8>)
 8004108:	4293      	cmp	r3, r2
 800410a:	d007      	beq.n	800411c <HAL_GPIO_Init+0x1e4>
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	4a3d      	ldr	r2, [pc, #244]	; (8004204 <HAL_GPIO_Init+0x2cc>)
 8004110:	4293      	cmp	r3, r2
 8004112:	d101      	bne.n	8004118 <HAL_GPIO_Init+0x1e0>
 8004114:	2303      	movs	r3, #3
 8004116:	e006      	b.n	8004126 <HAL_GPIO_Init+0x1ee>
 8004118:	2304      	movs	r3, #4
 800411a:	e004      	b.n	8004126 <HAL_GPIO_Init+0x1ee>
 800411c:	2302      	movs	r3, #2
 800411e:	e002      	b.n	8004126 <HAL_GPIO_Init+0x1ee>
 8004120:	2301      	movs	r3, #1
 8004122:	e000      	b.n	8004126 <HAL_GPIO_Init+0x1ee>
 8004124:	2300      	movs	r3, #0
 8004126:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004128:	f002 0203 	and.w	r2, r2, #3
 800412c:	0092      	lsls	r2, r2, #2
 800412e:	4093      	lsls	r3, r2
 8004130:	68fa      	ldr	r2, [r7, #12]
 8004132:	4313      	orrs	r3, r2
 8004134:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8004136:	492f      	ldr	r1, [pc, #188]	; (80041f4 <HAL_GPIO_Init+0x2bc>)
 8004138:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800413a:	089b      	lsrs	r3, r3, #2
 800413c:	3302      	adds	r3, #2
 800413e:	68fa      	ldr	r2, [r7, #12]
 8004140:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004144:	683b      	ldr	r3, [r7, #0]
 8004146:	685b      	ldr	r3, [r3, #4]
 8004148:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800414c:	2b00      	cmp	r3, #0
 800414e:	d006      	beq.n	800415e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8004150:	4b2d      	ldr	r3, [pc, #180]	; (8004208 <HAL_GPIO_Init+0x2d0>)
 8004152:	681a      	ldr	r2, [r3, #0]
 8004154:	492c      	ldr	r1, [pc, #176]	; (8004208 <HAL_GPIO_Init+0x2d0>)
 8004156:	69bb      	ldr	r3, [r7, #24]
 8004158:	4313      	orrs	r3, r2
 800415a:	600b      	str	r3, [r1, #0]
 800415c:	e006      	b.n	800416c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800415e:	4b2a      	ldr	r3, [pc, #168]	; (8004208 <HAL_GPIO_Init+0x2d0>)
 8004160:	681a      	ldr	r2, [r3, #0]
 8004162:	69bb      	ldr	r3, [r7, #24]
 8004164:	43db      	mvns	r3, r3
 8004166:	4928      	ldr	r1, [pc, #160]	; (8004208 <HAL_GPIO_Init+0x2d0>)
 8004168:	4013      	ands	r3, r2
 800416a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800416c:	683b      	ldr	r3, [r7, #0]
 800416e:	685b      	ldr	r3, [r3, #4]
 8004170:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004174:	2b00      	cmp	r3, #0
 8004176:	d006      	beq.n	8004186 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8004178:	4b23      	ldr	r3, [pc, #140]	; (8004208 <HAL_GPIO_Init+0x2d0>)
 800417a:	685a      	ldr	r2, [r3, #4]
 800417c:	4922      	ldr	r1, [pc, #136]	; (8004208 <HAL_GPIO_Init+0x2d0>)
 800417e:	69bb      	ldr	r3, [r7, #24]
 8004180:	4313      	orrs	r3, r2
 8004182:	604b      	str	r3, [r1, #4]
 8004184:	e006      	b.n	8004194 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8004186:	4b20      	ldr	r3, [pc, #128]	; (8004208 <HAL_GPIO_Init+0x2d0>)
 8004188:	685a      	ldr	r2, [r3, #4]
 800418a:	69bb      	ldr	r3, [r7, #24]
 800418c:	43db      	mvns	r3, r3
 800418e:	491e      	ldr	r1, [pc, #120]	; (8004208 <HAL_GPIO_Init+0x2d0>)
 8004190:	4013      	ands	r3, r2
 8004192:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004194:	683b      	ldr	r3, [r7, #0]
 8004196:	685b      	ldr	r3, [r3, #4]
 8004198:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800419c:	2b00      	cmp	r3, #0
 800419e:	d006      	beq.n	80041ae <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80041a0:	4b19      	ldr	r3, [pc, #100]	; (8004208 <HAL_GPIO_Init+0x2d0>)
 80041a2:	689a      	ldr	r2, [r3, #8]
 80041a4:	4918      	ldr	r1, [pc, #96]	; (8004208 <HAL_GPIO_Init+0x2d0>)
 80041a6:	69bb      	ldr	r3, [r7, #24]
 80041a8:	4313      	orrs	r3, r2
 80041aa:	608b      	str	r3, [r1, #8]
 80041ac:	e006      	b.n	80041bc <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80041ae:	4b16      	ldr	r3, [pc, #88]	; (8004208 <HAL_GPIO_Init+0x2d0>)
 80041b0:	689a      	ldr	r2, [r3, #8]
 80041b2:	69bb      	ldr	r3, [r7, #24]
 80041b4:	43db      	mvns	r3, r3
 80041b6:	4914      	ldr	r1, [pc, #80]	; (8004208 <HAL_GPIO_Init+0x2d0>)
 80041b8:	4013      	ands	r3, r2
 80041ba:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80041bc:	683b      	ldr	r3, [r7, #0]
 80041be:	685b      	ldr	r3, [r3, #4]
 80041c0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d021      	beq.n	800420c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80041c8:	4b0f      	ldr	r3, [pc, #60]	; (8004208 <HAL_GPIO_Init+0x2d0>)
 80041ca:	68da      	ldr	r2, [r3, #12]
 80041cc:	490e      	ldr	r1, [pc, #56]	; (8004208 <HAL_GPIO_Init+0x2d0>)
 80041ce:	69bb      	ldr	r3, [r7, #24]
 80041d0:	4313      	orrs	r3, r2
 80041d2:	60cb      	str	r3, [r1, #12]
 80041d4:	e021      	b.n	800421a <HAL_GPIO_Init+0x2e2>
 80041d6:	bf00      	nop
 80041d8:	10320000 	.word	0x10320000
 80041dc:	10310000 	.word	0x10310000
 80041e0:	10220000 	.word	0x10220000
 80041e4:	10210000 	.word	0x10210000
 80041e8:	10120000 	.word	0x10120000
 80041ec:	10110000 	.word	0x10110000
 80041f0:	40021000 	.word	0x40021000
 80041f4:	40010000 	.word	0x40010000
 80041f8:	40010800 	.word	0x40010800
 80041fc:	40010c00 	.word	0x40010c00
 8004200:	40011000 	.word	0x40011000
 8004204:	40011400 	.word	0x40011400
 8004208:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800420c:	4b0b      	ldr	r3, [pc, #44]	; (800423c <HAL_GPIO_Init+0x304>)
 800420e:	68da      	ldr	r2, [r3, #12]
 8004210:	69bb      	ldr	r3, [r7, #24]
 8004212:	43db      	mvns	r3, r3
 8004214:	4909      	ldr	r1, [pc, #36]	; (800423c <HAL_GPIO_Init+0x304>)
 8004216:	4013      	ands	r3, r2
 8004218:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800421a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800421c:	3301      	adds	r3, #1
 800421e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004220:	683b      	ldr	r3, [r7, #0]
 8004222:	681a      	ldr	r2, [r3, #0]
 8004224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004226:	fa22 f303 	lsr.w	r3, r2, r3
 800422a:	2b00      	cmp	r3, #0
 800422c:	f47f ae8e 	bne.w	8003f4c <HAL_GPIO_Init+0x14>
  }
}
 8004230:	bf00      	nop
 8004232:	bf00      	nop
 8004234:	372c      	adds	r7, #44	; 0x2c
 8004236:	46bd      	mov	sp, r7
 8004238:	bc80      	pop	{r7}
 800423a:	4770      	bx	lr
 800423c:	40010400 	.word	0x40010400

08004240 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004240:	b480      	push	{r7}
 8004242:	b083      	sub	sp, #12
 8004244:	af00      	add	r7, sp, #0
 8004246:	6078      	str	r0, [r7, #4]
 8004248:	460b      	mov	r3, r1
 800424a:	807b      	strh	r3, [r7, #2]
 800424c:	4613      	mov	r3, r2
 800424e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004250:	787b      	ldrb	r3, [r7, #1]
 8004252:	2b00      	cmp	r3, #0
 8004254:	d003      	beq.n	800425e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004256:	887a      	ldrh	r2, [r7, #2]
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800425c:	e003      	b.n	8004266 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800425e:	887b      	ldrh	r3, [r7, #2]
 8004260:	041a      	lsls	r2, r3, #16
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	611a      	str	r2, [r3, #16]
}
 8004266:	bf00      	nop
 8004268:	370c      	adds	r7, #12
 800426a:	46bd      	mov	sp, r7
 800426c:	bc80      	pop	{r7}
 800426e:	4770      	bx	lr

08004270 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004270:	b580      	push	{r7, lr}
 8004272:	b082      	sub	sp, #8
 8004274:	af00      	add	r7, sp, #0
 8004276:	4603      	mov	r3, r0
 8004278:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800427a:	4b08      	ldr	r3, [pc, #32]	; (800429c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800427c:	695a      	ldr	r2, [r3, #20]
 800427e:	88fb      	ldrh	r3, [r7, #6]
 8004280:	4013      	ands	r3, r2
 8004282:	2b00      	cmp	r3, #0
 8004284:	d006      	beq.n	8004294 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004286:	4a05      	ldr	r2, [pc, #20]	; (800429c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004288:	88fb      	ldrh	r3, [r7, #6]
 800428a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800428c:	88fb      	ldrh	r3, [r7, #6]
 800428e:	4618      	mov	r0, r3
 8004290:	f7fd fc6a 	bl	8001b68 <HAL_GPIO_EXTI_Callback>
  }
}
 8004294:	bf00      	nop
 8004296:	3708      	adds	r7, #8
 8004298:	46bd      	mov	sp, r7
 800429a:	bd80      	pop	{r7, pc}
 800429c:	40010400 	.word	0x40010400

080042a0 <HAL_PWR_EnterSLEEPMode>:
  *            @arg PWR_SLEEPENTRY_WFI: enter SLEEP mode with WFI instruction
  *            @arg PWR_SLEEPENTRY_WFE: enter SLEEP mode with WFE instruction
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 80042a0:	b480      	push	{r7}
 80042a2:	b083      	sub	sp, #12
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	6078      	str	r0, [r7, #4]
 80042a8:	460b      	mov	r3, r1
 80042aa:	70fb      	strb	r3, [r7, #3]
  UNUSED(Regulator);

  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80042ac:	4b09      	ldr	r3, [pc, #36]	; (80042d4 <HAL_PWR_EnterSLEEPMode+0x34>)
 80042ae:	691b      	ldr	r3, [r3, #16]
 80042b0:	4a08      	ldr	r2, [pc, #32]	; (80042d4 <HAL_PWR_EnterSLEEPMode+0x34>)
 80042b2:	f023 0304 	bic.w	r3, r3, #4
 80042b6:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if(SLEEPEntry == PWR_SLEEPENTRY_WFI)
 80042b8:	78fb      	ldrb	r3, [r7, #3]
 80042ba:	2b01      	cmp	r3, #1
 80042bc:	d101      	bne.n	80042c2 <HAL_PWR_EnterSLEEPMode+0x22>
  {
    /* Request Wait For Interrupt */
    __WFI();
 80042be:	bf30      	wfi
    /* Request Wait For Event */
    __SEV();
    __WFE();
    __WFE();
  }
}
 80042c0:	e002      	b.n	80042c8 <HAL_PWR_EnterSLEEPMode+0x28>
    __SEV();
 80042c2:	bf40      	sev
    __WFE();
 80042c4:	bf20      	wfe
    __WFE();
 80042c6:	bf20      	wfe
}
 80042c8:	bf00      	nop
 80042ca:	370c      	adds	r7, #12
 80042cc:	46bd      	mov	sp, r7
 80042ce:	bc80      	pop	{r7}
 80042d0:	4770      	bx	lr
 80042d2:	bf00      	nop
 80042d4:	e000ed00 	.word	0xe000ed00

080042d8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80042d8:	b580      	push	{r7, lr}
 80042da:	b086      	sub	sp, #24
 80042dc:	af00      	add	r7, sp, #0
 80042de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d101      	bne.n	80042ea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80042e6:	2301      	movs	r3, #1
 80042e8:	e272      	b.n	80047d0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	f003 0301 	and.w	r3, r3, #1
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	f000 8087 	beq.w	8004406 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80042f8:	4b92      	ldr	r3, [pc, #584]	; (8004544 <HAL_RCC_OscConfig+0x26c>)
 80042fa:	685b      	ldr	r3, [r3, #4]
 80042fc:	f003 030c 	and.w	r3, r3, #12
 8004300:	2b04      	cmp	r3, #4
 8004302:	d00c      	beq.n	800431e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004304:	4b8f      	ldr	r3, [pc, #572]	; (8004544 <HAL_RCC_OscConfig+0x26c>)
 8004306:	685b      	ldr	r3, [r3, #4]
 8004308:	f003 030c 	and.w	r3, r3, #12
 800430c:	2b08      	cmp	r3, #8
 800430e:	d112      	bne.n	8004336 <HAL_RCC_OscConfig+0x5e>
 8004310:	4b8c      	ldr	r3, [pc, #560]	; (8004544 <HAL_RCC_OscConfig+0x26c>)
 8004312:	685b      	ldr	r3, [r3, #4]
 8004314:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004318:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800431c:	d10b      	bne.n	8004336 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800431e:	4b89      	ldr	r3, [pc, #548]	; (8004544 <HAL_RCC_OscConfig+0x26c>)
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004326:	2b00      	cmp	r3, #0
 8004328:	d06c      	beq.n	8004404 <HAL_RCC_OscConfig+0x12c>
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	685b      	ldr	r3, [r3, #4]
 800432e:	2b00      	cmp	r3, #0
 8004330:	d168      	bne.n	8004404 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004332:	2301      	movs	r3, #1
 8004334:	e24c      	b.n	80047d0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	685b      	ldr	r3, [r3, #4]
 800433a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800433e:	d106      	bne.n	800434e <HAL_RCC_OscConfig+0x76>
 8004340:	4b80      	ldr	r3, [pc, #512]	; (8004544 <HAL_RCC_OscConfig+0x26c>)
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	4a7f      	ldr	r2, [pc, #508]	; (8004544 <HAL_RCC_OscConfig+0x26c>)
 8004346:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800434a:	6013      	str	r3, [r2, #0]
 800434c:	e02e      	b.n	80043ac <HAL_RCC_OscConfig+0xd4>
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	685b      	ldr	r3, [r3, #4]
 8004352:	2b00      	cmp	r3, #0
 8004354:	d10c      	bne.n	8004370 <HAL_RCC_OscConfig+0x98>
 8004356:	4b7b      	ldr	r3, [pc, #492]	; (8004544 <HAL_RCC_OscConfig+0x26c>)
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	4a7a      	ldr	r2, [pc, #488]	; (8004544 <HAL_RCC_OscConfig+0x26c>)
 800435c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004360:	6013      	str	r3, [r2, #0]
 8004362:	4b78      	ldr	r3, [pc, #480]	; (8004544 <HAL_RCC_OscConfig+0x26c>)
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	4a77      	ldr	r2, [pc, #476]	; (8004544 <HAL_RCC_OscConfig+0x26c>)
 8004368:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800436c:	6013      	str	r3, [r2, #0]
 800436e:	e01d      	b.n	80043ac <HAL_RCC_OscConfig+0xd4>
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	685b      	ldr	r3, [r3, #4]
 8004374:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004378:	d10c      	bne.n	8004394 <HAL_RCC_OscConfig+0xbc>
 800437a:	4b72      	ldr	r3, [pc, #456]	; (8004544 <HAL_RCC_OscConfig+0x26c>)
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	4a71      	ldr	r2, [pc, #452]	; (8004544 <HAL_RCC_OscConfig+0x26c>)
 8004380:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004384:	6013      	str	r3, [r2, #0]
 8004386:	4b6f      	ldr	r3, [pc, #444]	; (8004544 <HAL_RCC_OscConfig+0x26c>)
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	4a6e      	ldr	r2, [pc, #440]	; (8004544 <HAL_RCC_OscConfig+0x26c>)
 800438c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004390:	6013      	str	r3, [r2, #0]
 8004392:	e00b      	b.n	80043ac <HAL_RCC_OscConfig+0xd4>
 8004394:	4b6b      	ldr	r3, [pc, #428]	; (8004544 <HAL_RCC_OscConfig+0x26c>)
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	4a6a      	ldr	r2, [pc, #424]	; (8004544 <HAL_RCC_OscConfig+0x26c>)
 800439a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800439e:	6013      	str	r3, [r2, #0]
 80043a0:	4b68      	ldr	r3, [pc, #416]	; (8004544 <HAL_RCC_OscConfig+0x26c>)
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	4a67      	ldr	r2, [pc, #412]	; (8004544 <HAL_RCC_OscConfig+0x26c>)
 80043a6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80043aa:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	685b      	ldr	r3, [r3, #4]
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d013      	beq.n	80043dc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043b4:	f7fe fce2 	bl	8002d7c <HAL_GetTick>
 80043b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80043ba:	e008      	b.n	80043ce <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80043bc:	f7fe fcde 	bl	8002d7c <HAL_GetTick>
 80043c0:	4602      	mov	r2, r0
 80043c2:	693b      	ldr	r3, [r7, #16]
 80043c4:	1ad3      	subs	r3, r2, r3
 80043c6:	2b64      	cmp	r3, #100	; 0x64
 80043c8:	d901      	bls.n	80043ce <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80043ca:	2303      	movs	r3, #3
 80043cc:	e200      	b.n	80047d0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80043ce:	4b5d      	ldr	r3, [pc, #372]	; (8004544 <HAL_RCC_OscConfig+0x26c>)
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d0f0      	beq.n	80043bc <HAL_RCC_OscConfig+0xe4>
 80043da:	e014      	b.n	8004406 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043dc:	f7fe fcce 	bl	8002d7c <HAL_GetTick>
 80043e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80043e2:	e008      	b.n	80043f6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80043e4:	f7fe fcca 	bl	8002d7c <HAL_GetTick>
 80043e8:	4602      	mov	r2, r0
 80043ea:	693b      	ldr	r3, [r7, #16]
 80043ec:	1ad3      	subs	r3, r2, r3
 80043ee:	2b64      	cmp	r3, #100	; 0x64
 80043f0:	d901      	bls.n	80043f6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80043f2:	2303      	movs	r3, #3
 80043f4:	e1ec      	b.n	80047d0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80043f6:	4b53      	ldr	r3, [pc, #332]	; (8004544 <HAL_RCC_OscConfig+0x26c>)
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d1f0      	bne.n	80043e4 <HAL_RCC_OscConfig+0x10c>
 8004402:	e000      	b.n	8004406 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004404:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f003 0302 	and.w	r3, r3, #2
 800440e:	2b00      	cmp	r3, #0
 8004410:	d063      	beq.n	80044da <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004412:	4b4c      	ldr	r3, [pc, #304]	; (8004544 <HAL_RCC_OscConfig+0x26c>)
 8004414:	685b      	ldr	r3, [r3, #4]
 8004416:	f003 030c 	and.w	r3, r3, #12
 800441a:	2b00      	cmp	r3, #0
 800441c:	d00b      	beq.n	8004436 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800441e:	4b49      	ldr	r3, [pc, #292]	; (8004544 <HAL_RCC_OscConfig+0x26c>)
 8004420:	685b      	ldr	r3, [r3, #4]
 8004422:	f003 030c 	and.w	r3, r3, #12
 8004426:	2b08      	cmp	r3, #8
 8004428:	d11c      	bne.n	8004464 <HAL_RCC_OscConfig+0x18c>
 800442a:	4b46      	ldr	r3, [pc, #280]	; (8004544 <HAL_RCC_OscConfig+0x26c>)
 800442c:	685b      	ldr	r3, [r3, #4]
 800442e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004432:	2b00      	cmp	r3, #0
 8004434:	d116      	bne.n	8004464 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004436:	4b43      	ldr	r3, [pc, #268]	; (8004544 <HAL_RCC_OscConfig+0x26c>)
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f003 0302 	and.w	r3, r3, #2
 800443e:	2b00      	cmp	r3, #0
 8004440:	d005      	beq.n	800444e <HAL_RCC_OscConfig+0x176>
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	691b      	ldr	r3, [r3, #16]
 8004446:	2b01      	cmp	r3, #1
 8004448:	d001      	beq.n	800444e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800444a:	2301      	movs	r3, #1
 800444c:	e1c0      	b.n	80047d0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800444e:	4b3d      	ldr	r3, [pc, #244]	; (8004544 <HAL_RCC_OscConfig+0x26c>)
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	695b      	ldr	r3, [r3, #20]
 800445a:	00db      	lsls	r3, r3, #3
 800445c:	4939      	ldr	r1, [pc, #228]	; (8004544 <HAL_RCC_OscConfig+0x26c>)
 800445e:	4313      	orrs	r3, r2
 8004460:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004462:	e03a      	b.n	80044da <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	691b      	ldr	r3, [r3, #16]
 8004468:	2b00      	cmp	r3, #0
 800446a:	d020      	beq.n	80044ae <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800446c:	4b36      	ldr	r3, [pc, #216]	; (8004548 <HAL_RCC_OscConfig+0x270>)
 800446e:	2201      	movs	r2, #1
 8004470:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004472:	f7fe fc83 	bl	8002d7c <HAL_GetTick>
 8004476:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004478:	e008      	b.n	800448c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800447a:	f7fe fc7f 	bl	8002d7c <HAL_GetTick>
 800447e:	4602      	mov	r2, r0
 8004480:	693b      	ldr	r3, [r7, #16]
 8004482:	1ad3      	subs	r3, r2, r3
 8004484:	2b02      	cmp	r3, #2
 8004486:	d901      	bls.n	800448c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004488:	2303      	movs	r3, #3
 800448a:	e1a1      	b.n	80047d0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800448c:	4b2d      	ldr	r3, [pc, #180]	; (8004544 <HAL_RCC_OscConfig+0x26c>)
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	f003 0302 	and.w	r3, r3, #2
 8004494:	2b00      	cmp	r3, #0
 8004496:	d0f0      	beq.n	800447a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004498:	4b2a      	ldr	r3, [pc, #168]	; (8004544 <HAL_RCC_OscConfig+0x26c>)
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	695b      	ldr	r3, [r3, #20]
 80044a4:	00db      	lsls	r3, r3, #3
 80044a6:	4927      	ldr	r1, [pc, #156]	; (8004544 <HAL_RCC_OscConfig+0x26c>)
 80044a8:	4313      	orrs	r3, r2
 80044aa:	600b      	str	r3, [r1, #0]
 80044ac:	e015      	b.n	80044da <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80044ae:	4b26      	ldr	r3, [pc, #152]	; (8004548 <HAL_RCC_OscConfig+0x270>)
 80044b0:	2200      	movs	r2, #0
 80044b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044b4:	f7fe fc62 	bl	8002d7c <HAL_GetTick>
 80044b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80044ba:	e008      	b.n	80044ce <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80044bc:	f7fe fc5e 	bl	8002d7c <HAL_GetTick>
 80044c0:	4602      	mov	r2, r0
 80044c2:	693b      	ldr	r3, [r7, #16]
 80044c4:	1ad3      	subs	r3, r2, r3
 80044c6:	2b02      	cmp	r3, #2
 80044c8:	d901      	bls.n	80044ce <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80044ca:	2303      	movs	r3, #3
 80044cc:	e180      	b.n	80047d0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80044ce:	4b1d      	ldr	r3, [pc, #116]	; (8004544 <HAL_RCC_OscConfig+0x26c>)
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	f003 0302 	and.w	r3, r3, #2
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d1f0      	bne.n	80044bc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f003 0308 	and.w	r3, r3, #8
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d03a      	beq.n	800455c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	699b      	ldr	r3, [r3, #24]
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d019      	beq.n	8004522 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80044ee:	4b17      	ldr	r3, [pc, #92]	; (800454c <HAL_RCC_OscConfig+0x274>)
 80044f0:	2201      	movs	r2, #1
 80044f2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80044f4:	f7fe fc42 	bl	8002d7c <HAL_GetTick>
 80044f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80044fa:	e008      	b.n	800450e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80044fc:	f7fe fc3e 	bl	8002d7c <HAL_GetTick>
 8004500:	4602      	mov	r2, r0
 8004502:	693b      	ldr	r3, [r7, #16]
 8004504:	1ad3      	subs	r3, r2, r3
 8004506:	2b02      	cmp	r3, #2
 8004508:	d901      	bls.n	800450e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800450a:	2303      	movs	r3, #3
 800450c:	e160      	b.n	80047d0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800450e:	4b0d      	ldr	r3, [pc, #52]	; (8004544 <HAL_RCC_OscConfig+0x26c>)
 8004510:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004512:	f003 0302 	and.w	r3, r3, #2
 8004516:	2b00      	cmp	r3, #0
 8004518:	d0f0      	beq.n	80044fc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800451a:	2001      	movs	r0, #1
 800451c:	f000 fad8 	bl	8004ad0 <RCC_Delay>
 8004520:	e01c      	b.n	800455c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004522:	4b0a      	ldr	r3, [pc, #40]	; (800454c <HAL_RCC_OscConfig+0x274>)
 8004524:	2200      	movs	r2, #0
 8004526:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004528:	f7fe fc28 	bl	8002d7c <HAL_GetTick>
 800452c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800452e:	e00f      	b.n	8004550 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004530:	f7fe fc24 	bl	8002d7c <HAL_GetTick>
 8004534:	4602      	mov	r2, r0
 8004536:	693b      	ldr	r3, [r7, #16]
 8004538:	1ad3      	subs	r3, r2, r3
 800453a:	2b02      	cmp	r3, #2
 800453c:	d908      	bls.n	8004550 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800453e:	2303      	movs	r3, #3
 8004540:	e146      	b.n	80047d0 <HAL_RCC_OscConfig+0x4f8>
 8004542:	bf00      	nop
 8004544:	40021000 	.word	0x40021000
 8004548:	42420000 	.word	0x42420000
 800454c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004550:	4b92      	ldr	r3, [pc, #584]	; (800479c <HAL_RCC_OscConfig+0x4c4>)
 8004552:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004554:	f003 0302 	and.w	r3, r3, #2
 8004558:	2b00      	cmp	r3, #0
 800455a:	d1e9      	bne.n	8004530 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	f003 0304 	and.w	r3, r3, #4
 8004564:	2b00      	cmp	r3, #0
 8004566:	f000 80a6 	beq.w	80046b6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800456a:	2300      	movs	r3, #0
 800456c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800456e:	4b8b      	ldr	r3, [pc, #556]	; (800479c <HAL_RCC_OscConfig+0x4c4>)
 8004570:	69db      	ldr	r3, [r3, #28]
 8004572:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004576:	2b00      	cmp	r3, #0
 8004578:	d10d      	bne.n	8004596 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800457a:	4b88      	ldr	r3, [pc, #544]	; (800479c <HAL_RCC_OscConfig+0x4c4>)
 800457c:	69db      	ldr	r3, [r3, #28]
 800457e:	4a87      	ldr	r2, [pc, #540]	; (800479c <HAL_RCC_OscConfig+0x4c4>)
 8004580:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004584:	61d3      	str	r3, [r2, #28]
 8004586:	4b85      	ldr	r3, [pc, #532]	; (800479c <HAL_RCC_OscConfig+0x4c4>)
 8004588:	69db      	ldr	r3, [r3, #28]
 800458a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800458e:	60bb      	str	r3, [r7, #8]
 8004590:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004592:	2301      	movs	r3, #1
 8004594:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004596:	4b82      	ldr	r3, [pc, #520]	; (80047a0 <HAL_RCC_OscConfig+0x4c8>)
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d118      	bne.n	80045d4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80045a2:	4b7f      	ldr	r3, [pc, #508]	; (80047a0 <HAL_RCC_OscConfig+0x4c8>)
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	4a7e      	ldr	r2, [pc, #504]	; (80047a0 <HAL_RCC_OscConfig+0x4c8>)
 80045a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80045ac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80045ae:	f7fe fbe5 	bl	8002d7c <HAL_GetTick>
 80045b2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045b4:	e008      	b.n	80045c8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80045b6:	f7fe fbe1 	bl	8002d7c <HAL_GetTick>
 80045ba:	4602      	mov	r2, r0
 80045bc:	693b      	ldr	r3, [r7, #16]
 80045be:	1ad3      	subs	r3, r2, r3
 80045c0:	2b64      	cmp	r3, #100	; 0x64
 80045c2:	d901      	bls.n	80045c8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80045c4:	2303      	movs	r3, #3
 80045c6:	e103      	b.n	80047d0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045c8:	4b75      	ldr	r3, [pc, #468]	; (80047a0 <HAL_RCC_OscConfig+0x4c8>)
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d0f0      	beq.n	80045b6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	68db      	ldr	r3, [r3, #12]
 80045d8:	2b01      	cmp	r3, #1
 80045da:	d106      	bne.n	80045ea <HAL_RCC_OscConfig+0x312>
 80045dc:	4b6f      	ldr	r3, [pc, #444]	; (800479c <HAL_RCC_OscConfig+0x4c4>)
 80045de:	6a1b      	ldr	r3, [r3, #32]
 80045e0:	4a6e      	ldr	r2, [pc, #440]	; (800479c <HAL_RCC_OscConfig+0x4c4>)
 80045e2:	f043 0301 	orr.w	r3, r3, #1
 80045e6:	6213      	str	r3, [r2, #32]
 80045e8:	e02d      	b.n	8004646 <HAL_RCC_OscConfig+0x36e>
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	68db      	ldr	r3, [r3, #12]
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d10c      	bne.n	800460c <HAL_RCC_OscConfig+0x334>
 80045f2:	4b6a      	ldr	r3, [pc, #424]	; (800479c <HAL_RCC_OscConfig+0x4c4>)
 80045f4:	6a1b      	ldr	r3, [r3, #32]
 80045f6:	4a69      	ldr	r2, [pc, #420]	; (800479c <HAL_RCC_OscConfig+0x4c4>)
 80045f8:	f023 0301 	bic.w	r3, r3, #1
 80045fc:	6213      	str	r3, [r2, #32]
 80045fe:	4b67      	ldr	r3, [pc, #412]	; (800479c <HAL_RCC_OscConfig+0x4c4>)
 8004600:	6a1b      	ldr	r3, [r3, #32]
 8004602:	4a66      	ldr	r2, [pc, #408]	; (800479c <HAL_RCC_OscConfig+0x4c4>)
 8004604:	f023 0304 	bic.w	r3, r3, #4
 8004608:	6213      	str	r3, [r2, #32]
 800460a:	e01c      	b.n	8004646 <HAL_RCC_OscConfig+0x36e>
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	68db      	ldr	r3, [r3, #12]
 8004610:	2b05      	cmp	r3, #5
 8004612:	d10c      	bne.n	800462e <HAL_RCC_OscConfig+0x356>
 8004614:	4b61      	ldr	r3, [pc, #388]	; (800479c <HAL_RCC_OscConfig+0x4c4>)
 8004616:	6a1b      	ldr	r3, [r3, #32]
 8004618:	4a60      	ldr	r2, [pc, #384]	; (800479c <HAL_RCC_OscConfig+0x4c4>)
 800461a:	f043 0304 	orr.w	r3, r3, #4
 800461e:	6213      	str	r3, [r2, #32]
 8004620:	4b5e      	ldr	r3, [pc, #376]	; (800479c <HAL_RCC_OscConfig+0x4c4>)
 8004622:	6a1b      	ldr	r3, [r3, #32]
 8004624:	4a5d      	ldr	r2, [pc, #372]	; (800479c <HAL_RCC_OscConfig+0x4c4>)
 8004626:	f043 0301 	orr.w	r3, r3, #1
 800462a:	6213      	str	r3, [r2, #32]
 800462c:	e00b      	b.n	8004646 <HAL_RCC_OscConfig+0x36e>
 800462e:	4b5b      	ldr	r3, [pc, #364]	; (800479c <HAL_RCC_OscConfig+0x4c4>)
 8004630:	6a1b      	ldr	r3, [r3, #32]
 8004632:	4a5a      	ldr	r2, [pc, #360]	; (800479c <HAL_RCC_OscConfig+0x4c4>)
 8004634:	f023 0301 	bic.w	r3, r3, #1
 8004638:	6213      	str	r3, [r2, #32]
 800463a:	4b58      	ldr	r3, [pc, #352]	; (800479c <HAL_RCC_OscConfig+0x4c4>)
 800463c:	6a1b      	ldr	r3, [r3, #32]
 800463e:	4a57      	ldr	r2, [pc, #348]	; (800479c <HAL_RCC_OscConfig+0x4c4>)
 8004640:	f023 0304 	bic.w	r3, r3, #4
 8004644:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	68db      	ldr	r3, [r3, #12]
 800464a:	2b00      	cmp	r3, #0
 800464c:	d015      	beq.n	800467a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800464e:	f7fe fb95 	bl	8002d7c <HAL_GetTick>
 8004652:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004654:	e00a      	b.n	800466c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004656:	f7fe fb91 	bl	8002d7c <HAL_GetTick>
 800465a:	4602      	mov	r2, r0
 800465c:	693b      	ldr	r3, [r7, #16]
 800465e:	1ad3      	subs	r3, r2, r3
 8004660:	f241 3288 	movw	r2, #5000	; 0x1388
 8004664:	4293      	cmp	r3, r2
 8004666:	d901      	bls.n	800466c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004668:	2303      	movs	r3, #3
 800466a:	e0b1      	b.n	80047d0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800466c:	4b4b      	ldr	r3, [pc, #300]	; (800479c <HAL_RCC_OscConfig+0x4c4>)
 800466e:	6a1b      	ldr	r3, [r3, #32]
 8004670:	f003 0302 	and.w	r3, r3, #2
 8004674:	2b00      	cmp	r3, #0
 8004676:	d0ee      	beq.n	8004656 <HAL_RCC_OscConfig+0x37e>
 8004678:	e014      	b.n	80046a4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800467a:	f7fe fb7f 	bl	8002d7c <HAL_GetTick>
 800467e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004680:	e00a      	b.n	8004698 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004682:	f7fe fb7b 	bl	8002d7c <HAL_GetTick>
 8004686:	4602      	mov	r2, r0
 8004688:	693b      	ldr	r3, [r7, #16]
 800468a:	1ad3      	subs	r3, r2, r3
 800468c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004690:	4293      	cmp	r3, r2
 8004692:	d901      	bls.n	8004698 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004694:	2303      	movs	r3, #3
 8004696:	e09b      	b.n	80047d0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004698:	4b40      	ldr	r3, [pc, #256]	; (800479c <HAL_RCC_OscConfig+0x4c4>)
 800469a:	6a1b      	ldr	r3, [r3, #32]
 800469c:	f003 0302 	and.w	r3, r3, #2
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d1ee      	bne.n	8004682 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80046a4:	7dfb      	ldrb	r3, [r7, #23]
 80046a6:	2b01      	cmp	r3, #1
 80046a8:	d105      	bne.n	80046b6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80046aa:	4b3c      	ldr	r3, [pc, #240]	; (800479c <HAL_RCC_OscConfig+0x4c4>)
 80046ac:	69db      	ldr	r3, [r3, #28]
 80046ae:	4a3b      	ldr	r2, [pc, #236]	; (800479c <HAL_RCC_OscConfig+0x4c4>)
 80046b0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80046b4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	69db      	ldr	r3, [r3, #28]
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	f000 8087 	beq.w	80047ce <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80046c0:	4b36      	ldr	r3, [pc, #216]	; (800479c <HAL_RCC_OscConfig+0x4c4>)
 80046c2:	685b      	ldr	r3, [r3, #4]
 80046c4:	f003 030c 	and.w	r3, r3, #12
 80046c8:	2b08      	cmp	r3, #8
 80046ca:	d061      	beq.n	8004790 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	69db      	ldr	r3, [r3, #28]
 80046d0:	2b02      	cmp	r3, #2
 80046d2:	d146      	bne.n	8004762 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80046d4:	4b33      	ldr	r3, [pc, #204]	; (80047a4 <HAL_RCC_OscConfig+0x4cc>)
 80046d6:	2200      	movs	r2, #0
 80046d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046da:	f7fe fb4f 	bl	8002d7c <HAL_GetTick>
 80046de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80046e0:	e008      	b.n	80046f4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80046e2:	f7fe fb4b 	bl	8002d7c <HAL_GetTick>
 80046e6:	4602      	mov	r2, r0
 80046e8:	693b      	ldr	r3, [r7, #16]
 80046ea:	1ad3      	subs	r3, r2, r3
 80046ec:	2b02      	cmp	r3, #2
 80046ee:	d901      	bls.n	80046f4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80046f0:	2303      	movs	r3, #3
 80046f2:	e06d      	b.n	80047d0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80046f4:	4b29      	ldr	r3, [pc, #164]	; (800479c <HAL_RCC_OscConfig+0x4c4>)
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d1f0      	bne.n	80046e2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	6a1b      	ldr	r3, [r3, #32]
 8004704:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004708:	d108      	bne.n	800471c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800470a:	4b24      	ldr	r3, [pc, #144]	; (800479c <HAL_RCC_OscConfig+0x4c4>)
 800470c:	685b      	ldr	r3, [r3, #4]
 800470e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	689b      	ldr	r3, [r3, #8]
 8004716:	4921      	ldr	r1, [pc, #132]	; (800479c <HAL_RCC_OscConfig+0x4c4>)
 8004718:	4313      	orrs	r3, r2
 800471a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800471c:	4b1f      	ldr	r3, [pc, #124]	; (800479c <HAL_RCC_OscConfig+0x4c4>)
 800471e:	685b      	ldr	r3, [r3, #4]
 8004720:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	6a19      	ldr	r1, [r3, #32]
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800472c:	430b      	orrs	r3, r1
 800472e:	491b      	ldr	r1, [pc, #108]	; (800479c <HAL_RCC_OscConfig+0x4c4>)
 8004730:	4313      	orrs	r3, r2
 8004732:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004734:	4b1b      	ldr	r3, [pc, #108]	; (80047a4 <HAL_RCC_OscConfig+0x4cc>)
 8004736:	2201      	movs	r2, #1
 8004738:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800473a:	f7fe fb1f 	bl	8002d7c <HAL_GetTick>
 800473e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004740:	e008      	b.n	8004754 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004742:	f7fe fb1b 	bl	8002d7c <HAL_GetTick>
 8004746:	4602      	mov	r2, r0
 8004748:	693b      	ldr	r3, [r7, #16]
 800474a:	1ad3      	subs	r3, r2, r3
 800474c:	2b02      	cmp	r3, #2
 800474e:	d901      	bls.n	8004754 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004750:	2303      	movs	r3, #3
 8004752:	e03d      	b.n	80047d0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004754:	4b11      	ldr	r3, [pc, #68]	; (800479c <HAL_RCC_OscConfig+0x4c4>)
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800475c:	2b00      	cmp	r3, #0
 800475e:	d0f0      	beq.n	8004742 <HAL_RCC_OscConfig+0x46a>
 8004760:	e035      	b.n	80047ce <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004762:	4b10      	ldr	r3, [pc, #64]	; (80047a4 <HAL_RCC_OscConfig+0x4cc>)
 8004764:	2200      	movs	r2, #0
 8004766:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004768:	f7fe fb08 	bl	8002d7c <HAL_GetTick>
 800476c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800476e:	e008      	b.n	8004782 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004770:	f7fe fb04 	bl	8002d7c <HAL_GetTick>
 8004774:	4602      	mov	r2, r0
 8004776:	693b      	ldr	r3, [r7, #16]
 8004778:	1ad3      	subs	r3, r2, r3
 800477a:	2b02      	cmp	r3, #2
 800477c:	d901      	bls.n	8004782 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800477e:	2303      	movs	r3, #3
 8004780:	e026      	b.n	80047d0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004782:	4b06      	ldr	r3, [pc, #24]	; (800479c <HAL_RCC_OscConfig+0x4c4>)
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800478a:	2b00      	cmp	r3, #0
 800478c:	d1f0      	bne.n	8004770 <HAL_RCC_OscConfig+0x498>
 800478e:	e01e      	b.n	80047ce <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	69db      	ldr	r3, [r3, #28]
 8004794:	2b01      	cmp	r3, #1
 8004796:	d107      	bne.n	80047a8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8004798:	2301      	movs	r3, #1
 800479a:	e019      	b.n	80047d0 <HAL_RCC_OscConfig+0x4f8>
 800479c:	40021000 	.word	0x40021000
 80047a0:	40007000 	.word	0x40007000
 80047a4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80047a8:	4b0b      	ldr	r3, [pc, #44]	; (80047d8 <HAL_RCC_OscConfig+0x500>)
 80047aa:	685b      	ldr	r3, [r3, #4]
 80047ac:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	6a1b      	ldr	r3, [r3, #32]
 80047b8:	429a      	cmp	r2, r3
 80047ba:	d106      	bne.n	80047ca <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80047c6:	429a      	cmp	r2, r3
 80047c8:	d001      	beq.n	80047ce <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80047ca:	2301      	movs	r3, #1
 80047cc:	e000      	b.n	80047d0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80047ce:	2300      	movs	r3, #0
}
 80047d0:	4618      	mov	r0, r3
 80047d2:	3718      	adds	r7, #24
 80047d4:	46bd      	mov	sp, r7
 80047d6:	bd80      	pop	{r7, pc}
 80047d8:	40021000 	.word	0x40021000

080047dc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80047dc:	b580      	push	{r7, lr}
 80047de:	b084      	sub	sp, #16
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	6078      	str	r0, [r7, #4]
 80047e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d101      	bne.n	80047f0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80047ec:	2301      	movs	r3, #1
 80047ee:	e0d0      	b.n	8004992 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80047f0:	4b6a      	ldr	r3, [pc, #424]	; (800499c <HAL_RCC_ClockConfig+0x1c0>)
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	f003 0307 	and.w	r3, r3, #7
 80047f8:	683a      	ldr	r2, [r7, #0]
 80047fa:	429a      	cmp	r2, r3
 80047fc:	d910      	bls.n	8004820 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80047fe:	4b67      	ldr	r3, [pc, #412]	; (800499c <HAL_RCC_ClockConfig+0x1c0>)
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	f023 0207 	bic.w	r2, r3, #7
 8004806:	4965      	ldr	r1, [pc, #404]	; (800499c <HAL_RCC_ClockConfig+0x1c0>)
 8004808:	683b      	ldr	r3, [r7, #0]
 800480a:	4313      	orrs	r3, r2
 800480c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800480e:	4b63      	ldr	r3, [pc, #396]	; (800499c <HAL_RCC_ClockConfig+0x1c0>)
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	f003 0307 	and.w	r3, r3, #7
 8004816:	683a      	ldr	r2, [r7, #0]
 8004818:	429a      	cmp	r2, r3
 800481a:	d001      	beq.n	8004820 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800481c:	2301      	movs	r3, #1
 800481e:	e0b8      	b.n	8004992 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	f003 0302 	and.w	r3, r3, #2
 8004828:	2b00      	cmp	r3, #0
 800482a:	d020      	beq.n	800486e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	f003 0304 	and.w	r3, r3, #4
 8004834:	2b00      	cmp	r3, #0
 8004836:	d005      	beq.n	8004844 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004838:	4b59      	ldr	r3, [pc, #356]	; (80049a0 <HAL_RCC_ClockConfig+0x1c4>)
 800483a:	685b      	ldr	r3, [r3, #4]
 800483c:	4a58      	ldr	r2, [pc, #352]	; (80049a0 <HAL_RCC_ClockConfig+0x1c4>)
 800483e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004842:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f003 0308 	and.w	r3, r3, #8
 800484c:	2b00      	cmp	r3, #0
 800484e:	d005      	beq.n	800485c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004850:	4b53      	ldr	r3, [pc, #332]	; (80049a0 <HAL_RCC_ClockConfig+0x1c4>)
 8004852:	685b      	ldr	r3, [r3, #4]
 8004854:	4a52      	ldr	r2, [pc, #328]	; (80049a0 <HAL_RCC_ClockConfig+0x1c4>)
 8004856:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800485a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800485c:	4b50      	ldr	r3, [pc, #320]	; (80049a0 <HAL_RCC_ClockConfig+0x1c4>)
 800485e:	685b      	ldr	r3, [r3, #4]
 8004860:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	689b      	ldr	r3, [r3, #8]
 8004868:	494d      	ldr	r1, [pc, #308]	; (80049a0 <HAL_RCC_ClockConfig+0x1c4>)
 800486a:	4313      	orrs	r3, r2
 800486c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f003 0301 	and.w	r3, r3, #1
 8004876:	2b00      	cmp	r3, #0
 8004878:	d040      	beq.n	80048fc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	685b      	ldr	r3, [r3, #4]
 800487e:	2b01      	cmp	r3, #1
 8004880:	d107      	bne.n	8004892 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004882:	4b47      	ldr	r3, [pc, #284]	; (80049a0 <HAL_RCC_ClockConfig+0x1c4>)
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800488a:	2b00      	cmp	r3, #0
 800488c:	d115      	bne.n	80048ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800488e:	2301      	movs	r3, #1
 8004890:	e07f      	b.n	8004992 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	685b      	ldr	r3, [r3, #4]
 8004896:	2b02      	cmp	r3, #2
 8004898:	d107      	bne.n	80048aa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800489a:	4b41      	ldr	r3, [pc, #260]	; (80049a0 <HAL_RCC_ClockConfig+0x1c4>)
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d109      	bne.n	80048ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80048a6:	2301      	movs	r3, #1
 80048a8:	e073      	b.n	8004992 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80048aa:	4b3d      	ldr	r3, [pc, #244]	; (80049a0 <HAL_RCC_ClockConfig+0x1c4>)
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f003 0302 	and.w	r3, r3, #2
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d101      	bne.n	80048ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80048b6:	2301      	movs	r3, #1
 80048b8:	e06b      	b.n	8004992 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80048ba:	4b39      	ldr	r3, [pc, #228]	; (80049a0 <HAL_RCC_ClockConfig+0x1c4>)
 80048bc:	685b      	ldr	r3, [r3, #4]
 80048be:	f023 0203 	bic.w	r2, r3, #3
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	685b      	ldr	r3, [r3, #4]
 80048c6:	4936      	ldr	r1, [pc, #216]	; (80049a0 <HAL_RCC_ClockConfig+0x1c4>)
 80048c8:	4313      	orrs	r3, r2
 80048ca:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80048cc:	f7fe fa56 	bl	8002d7c <HAL_GetTick>
 80048d0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80048d2:	e00a      	b.n	80048ea <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80048d4:	f7fe fa52 	bl	8002d7c <HAL_GetTick>
 80048d8:	4602      	mov	r2, r0
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	1ad3      	subs	r3, r2, r3
 80048de:	f241 3288 	movw	r2, #5000	; 0x1388
 80048e2:	4293      	cmp	r3, r2
 80048e4:	d901      	bls.n	80048ea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80048e6:	2303      	movs	r3, #3
 80048e8:	e053      	b.n	8004992 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80048ea:	4b2d      	ldr	r3, [pc, #180]	; (80049a0 <HAL_RCC_ClockConfig+0x1c4>)
 80048ec:	685b      	ldr	r3, [r3, #4]
 80048ee:	f003 020c 	and.w	r2, r3, #12
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	685b      	ldr	r3, [r3, #4]
 80048f6:	009b      	lsls	r3, r3, #2
 80048f8:	429a      	cmp	r2, r3
 80048fa:	d1eb      	bne.n	80048d4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80048fc:	4b27      	ldr	r3, [pc, #156]	; (800499c <HAL_RCC_ClockConfig+0x1c0>)
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	f003 0307 	and.w	r3, r3, #7
 8004904:	683a      	ldr	r2, [r7, #0]
 8004906:	429a      	cmp	r2, r3
 8004908:	d210      	bcs.n	800492c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800490a:	4b24      	ldr	r3, [pc, #144]	; (800499c <HAL_RCC_ClockConfig+0x1c0>)
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	f023 0207 	bic.w	r2, r3, #7
 8004912:	4922      	ldr	r1, [pc, #136]	; (800499c <HAL_RCC_ClockConfig+0x1c0>)
 8004914:	683b      	ldr	r3, [r7, #0]
 8004916:	4313      	orrs	r3, r2
 8004918:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800491a:	4b20      	ldr	r3, [pc, #128]	; (800499c <HAL_RCC_ClockConfig+0x1c0>)
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	f003 0307 	and.w	r3, r3, #7
 8004922:	683a      	ldr	r2, [r7, #0]
 8004924:	429a      	cmp	r2, r3
 8004926:	d001      	beq.n	800492c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004928:	2301      	movs	r3, #1
 800492a:	e032      	b.n	8004992 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	f003 0304 	and.w	r3, r3, #4
 8004934:	2b00      	cmp	r3, #0
 8004936:	d008      	beq.n	800494a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004938:	4b19      	ldr	r3, [pc, #100]	; (80049a0 <HAL_RCC_ClockConfig+0x1c4>)
 800493a:	685b      	ldr	r3, [r3, #4]
 800493c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	68db      	ldr	r3, [r3, #12]
 8004944:	4916      	ldr	r1, [pc, #88]	; (80049a0 <HAL_RCC_ClockConfig+0x1c4>)
 8004946:	4313      	orrs	r3, r2
 8004948:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	f003 0308 	and.w	r3, r3, #8
 8004952:	2b00      	cmp	r3, #0
 8004954:	d009      	beq.n	800496a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004956:	4b12      	ldr	r3, [pc, #72]	; (80049a0 <HAL_RCC_ClockConfig+0x1c4>)
 8004958:	685b      	ldr	r3, [r3, #4]
 800495a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	691b      	ldr	r3, [r3, #16]
 8004962:	00db      	lsls	r3, r3, #3
 8004964:	490e      	ldr	r1, [pc, #56]	; (80049a0 <HAL_RCC_ClockConfig+0x1c4>)
 8004966:	4313      	orrs	r3, r2
 8004968:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800496a:	f000 f821 	bl	80049b0 <HAL_RCC_GetSysClockFreq>
 800496e:	4602      	mov	r2, r0
 8004970:	4b0b      	ldr	r3, [pc, #44]	; (80049a0 <HAL_RCC_ClockConfig+0x1c4>)
 8004972:	685b      	ldr	r3, [r3, #4]
 8004974:	091b      	lsrs	r3, r3, #4
 8004976:	f003 030f 	and.w	r3, r3, #15
 800497a:	490a      	ldr	r1, [pc, #40]	; (80049a4 <HAL_RCC_ClockConfig+0x1c8>)
 800497c:	5ccb      	ldrb	r3, [r1, r3]
 800497e:	fa22 f303 	lsr.w	r3, r2, r3
 8004982:	4a09      	ldr	r2, [pc, #36]	; (80049a8 <HAL_RCC_ClockConfig+0x1cc>)
 8004984:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004986:	4b09      	ldr	r3, [pc, #36]	; (80049ac <HAL_RCC_ClockConfig+0x1d0>)
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	4618      	mov	r0, r3
 800498c:	f7fe f9b4 	bl	8002cf8 <HAL_InitTick>

  return HAL_OK;
 8004990:	2300      	movs	r3, #0
}
 8004992:	4618      	mov	r0, r3
 8004994:	3710      	adds	r7, #16
 8004996:	46bd      	mov	sp, r7
 8004998:	bd80      	pop	{r7, pc}
 800499a:	bf00      	nop
 800499c:	40022000 	.word	0x40022000
 80049a0:	40021000 	.word	0x40021000
 80049a4:	08006b90 	.word	0x08006b90
 80049a8:	20000004 	.word	0x20000004
 80049ac:	20000008 	.word	0x20000008

080049b0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80049b0:	b490      	push	{r4, r7}
 80049b2:	b08a      	sub	sp, #40	; 0x28
 80049b4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80049b6:	4b29      	ldr	r3, [pc, #164]	; (8004a5c <HAL_RCC_GetSysClockFreq+0xac>)
 80049b8:	1d3c      	adds	r4, r7, #4
 80049ba:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80049bc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80049c0:	f240 2301 	movw	r3, #513	; 0x201
 80049c4:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80049c6:	2300      	movs	r3, #0
 80049c8:	61fb      	str	r3, [r7, #28]
 80049ca:	2300      	movs	r3, #0
 80049cc:	61bb      	str	r3, [r7, #24]
 80049ce:	2300      	movs	r3, #0
 80049d0:	627b      	str	r3, [r7, #36]	; 0x24
 80049d2:	2300      	movs	r3, #0
 80049d4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80049d6:	2300      	movs	r3, #0
 80049d8:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80049da:	4b21      	ldr	r3, [pc, #132]	; (8004a60 <HAL_RCC_GetSysClockFreq+0xb0>)
 80049dc:	685b      	ldr	r3, [r3, #4]
 80049de:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80049e0:	69fb      	ldr	r3, [r7, #28]
 80049e2:	f003 030c 	and.w	r3, r3, #12
 80049e6:	2b04      	cmp	r3, #4
 80049e8:	d002      	beq.n	80049f0 <HAL_RCC_GetSysClockFreq+0x40>
 80049ea:	2b08      	cmp	r3, #8
 80049ec:	d003      	beq.n	80049f6 <HAL_RCC_GetSysClockFreq+0x46>
 80049ee:	e02b      	b.n	8004a48 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80049f0:	4b1c      	ldr	r3, [pc, #112]	; (8004a64 <HAL_RCC_GetSysClockFreq+0xb4>)
 80049f2:	623b      	str	r3, [r7, #32]
      break;
 80049f4:	e02b      	b.n	8004a4e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80049f6:	69fb      	ldr	r3, [r7, #28]
 80049f8:	0c9b      	lsrs	r3, r3, #18
 80049fa:	f003 030f 	and.w	r3, r3, #15
 80049fe:	3328      	adds	r3, #40	; 0x28
 8004a00:	443b      	add	r3, r7
 8004a02:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8004a06:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004a08:	69fb      	ldr	r3, [r7, #28]
 8004a0a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d012      	beq.n	8004a38 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004a12:	4b13      	ldr	r3, [pc, #76]	; (8004a60 <HAL_RCC_GetSysClockFreq+0xb0>)
 8004a14:	685b      	ldr	r3, [r3, #4]
 8004a16:	0c5b      	lsrs	r3, r3, #17
 8004a18:	f003 0301 	and.w	r3, r3, #1
 8004a1c:	3328      	adds	r3, #40	; 0x28
 8004a1e:	443b      	add	r3, r7
 8004a20:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8004a24:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004a26:	697b      	ldr	r3, [r7, #20]
 8004a28:	4a0e      	ldr	r2, [pc, #56]	; (8004a64 <HAL_RCC_GetSysClockFreq+0xb4>)
 8004a2a:	fb03 f202 	mul.w	r2, r3, r2
 8004a2e:	69bb      	ldr	r3, [r7, #24]
 8004a30:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a34:	627b      	str	r3, [r7, #36]	; 0x24
 8004a36:	e004      	b.n	8004a42 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004a38:	697b      	ldr	r3, [r7, #20]
 8004a3a:	4a0b      	ldr	r2, [pc, #44]	; (8004a68 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004a3c:	fb02 f303 	mul.w	r3, r2, r3
 8004a40:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8004a42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a44:	623b      	str	r3, [r7, #32]
      break;
 8004a46:	e002      	b.n	8004a4e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004a48:	4b06      	ldr	r3, [pc, #24]	; (8004a64 <HAL_RCC_GetSysClockFreq+0xb4>)
 8004a4a:	623b      	str	r3, [r7, #32]
      break;
 8004a4c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004a4e:	6a3b      	ldr	r3, [r7, #32]
}
 8004a50:	4618      	mov	r0, r3
 8004a52:	3728      	adds	r7, #40	; 0x28
 8004a54:	46bd      	mov	sp, r7
 8004a56:	bc90      	pop	{r4, r7}
 8004a58:	4770      	bx	lr
 8004a5a:	bf00      	nop
 8004a5c:	08006b80 	.word	0x08006b80
 8004a60:	40021000 	.word	0x40021000
 8004a64:	007a1200 	.word	0x007a1200
 8004a68:	003d0900 	.word	0x003d0900

08004a6c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004a6c:	b480      	push	{r7}
 8004a6e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004a70:	4b02      	ldr	r3, [pc, #8]	; (8004a7c <HAL_RCC_GetHCLKFreq+0x10>)
 8004a72:	681b      	ldr	r3, [r3, #0]
}
 8004a74:	4618      	mov	r0, r3
 8004a76:	46bd      	mov	sp, r7
 8004a78:	bc80      	pop	{r7}
 8004a7a:	4770      	bx	lr
 8004a7c:	20000004 	.word	0x20000004

08004a80 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004a80:	b580      	push	{r7, lr}
 8004a82:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004a84:	f7ff fff2 	bl	8004a6c <HAL_RCC_GetHCLKFreq>
 8004a88:	4602      	mov	r2, r0
 8004a8a:	4b05      	ldr	r3, [pc, #20]	; (8004aa0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004a8c:	685b      	ldr	r3, [r3, #4]
 8004a8e:	0a1b      	lsrs	r3, r3, #8
 8004a90:	f003 0307 	and.w	r3, r3, #7
 8004a94:	4903      	ldr	r1, [pc, #12]	; (8004aa4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004a96:	5ccb      	ldrb	r3, [r1, r3]
 8004a98:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004a9c:	4618      	mov	r0, r3
 8004a9e:	bd80      	pop	{r7, pc}
 8004aa0:	40021000 	.word	0x40021000
 8004aa4:	08006ba0 	.word	0x08006ba0

08004aa8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004aa8:	b580      	push	{r7, lr}
 8004aaa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004aac:	f7ff ffde 	bl	8004a6c <HAL_RCC_GetHCLKFreq>
 8004ab0:	4602      	mov	r2, r0
 8004ab2:	4b05      	ldr	r3, [pc, #20]	; (8004ac8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004ab4:	685b      	ldr	r3, [r3, #4]
 8004ab6:	0adb      	lsrs	r3, r3, #11
 8004ab8:	f003 0307 	and.w	r3, r3, #7
 8004abc:	4903      	ldr	r1, [pc, #12]	; (8004acc <HAL_RCC_GetPCLK2Freq+0x24>)
 8004abe:	5ccb      	ldrb	r3, [r1, r3]
 8004ac0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004ac4:	4618      	mov	r0, r3
 8004ac6:	bd80      	pop	{r7, pc}
 8004ac8:	40021000 	.word	0x40021000
 8004acc:	08006ba0 	.word	0x08006ba0

08004ad0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004ad0:	b480      	push	{r7}
 8004ad2:	b085      	sub	sp, #20
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004ad8:	4b0a      	ldr	r3, [pc, #40]	; (8004b04 <RCC_Delay+0x34>)
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	4a0a      	ldr	r2, [pc, #40]	; (8004b08 <RCC_Delay+0x38>)
 8004ade:	fba2 2303 	umull	r2, r3, r2, r3
 8004ae2:	0a5b      	lsrs	r3, r3, #9
 8004ae4:	687a      	ldr	r2, [r7, #4]
 8004ae6:	fb02 f303 	mul.w	r3, r2, r3
 8004aea:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004aec:	bf00      	nop
  }
  while (Delay --);
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	1e5a      	subs	r2, r3, #1
 8004af2:	60fa      	str	r2, [r7, #12]
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d1f9      	bne.n	8004aec <RCC_Delay+0x1c>
}
 8004af8:	bf00      	nop
 8004afa:	bf00      	nop
 8004afc:	3714      	adds	r7, #20
 8004afe:	46bd      	mov	sp, r7
 8004b00:	bc80      	pop	{r7}
 8004b02:	4770      	bx	lr
 8004b04:	20000004 	.word	0x20000004
 8004b08:	10624dd3 	.word	0x10624dd3

08004b0c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004b0c:	b580      	push	{r7, lr}
 8004b0e:	b086      	sub	sp, #24
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8004b14:	2300      	movs	r3, #0
 8004b16:	613b      	str	r3, [r7, #16]
 8004b18:	2300      	movs	r3, #0
 8004b1a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	f003 0301 	and.w	r3, r3, #1
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d07d      	beq.n	8004c24 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8004b28:	2300      	movs	r3, #0
 8004b2a:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004b2c:	4b4f      	ldr	r3, [pc, #316]	; (8004c6c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004b2e:	69db      	ldr	r3, [r3, #28]
 8004b30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d10d      	bne.n	8004b54 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004b38:	4b4c      	ldr	r3, [pc, #304]	; (8004c6c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004b3a:	69db      	ldr	r3, [r3, #28]
 8004b3c:	4a4b      	ldr	r2, [pc, #300]	; (8004c6c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004b3e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b42:	61d3      	str	r3, [r2, #28]
 8004b44:	4b49      	ldr	r3, [pc, #292]	; (8004c6c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004b46:	69db      	ldr	r3, [r3, #28]
 8004b48:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b4c:	60bb      	str	r3, [r7, #8]
 8004b4e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004b50:	2301      	movs	r3, #1
 8004b52:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b54:	4b46      	ldr	r3, [pc, #280]	; (8004c70 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d118      	bne.n	8004b92 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004b60:	4b43      	ldr	r3, [pc, #268]	; (8004c70 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	4a42      	ldr	r2, [pc, #264]	; (8004c70 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004b66:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b6a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004b6c:	f7fe f906 	bl	8002d7c <HAL_GetTick>
 8004b70:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b72:	e008      	b.n	8004b86 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004b74:	f7fe f902 	bl	8002d7c <HAL_GetTick>
 8004b78:	4602      	mov	r2, r0
 8004b7a:	693b      	ldr	r3, [r7, #16]
 8004b7c:	1ad3      	subs	r3, r2, r3
 8004b7e:	2b64      	cmp	r3, #100	; 0x64
 8004b80:	d901      	bls.n	8004b86 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8004b82:	2303      	movs	r3, #3
 8004b84:	e06d      	b.n	8004c62 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b86:	4b3a      	ldr	r3, [pc, #232]	; (8004c70 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d0f0      	beq.n	8004b74 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004b92:	4b36      	ldr	r3, [pc, #216]	; (8004c6c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004b94:	6a1b      	ldr	r3, [r3, #32]
 8004b96:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b9a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d02e      	beq.n	8004c00 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	685b      	ldr	r3, [r3, #4]
 8004ba6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004baa:	68fa      	ldr	r2, [r7, #12]
 8004bac:	429a      	cmp	r2, r3
 8004bae:	d027      	beq.n	8004c00 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004bb0:	4b2e      	ldr	r3, [pc, #184]	; (8004c6c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004bb2:	6a1b      	ldr	r3, [r3, #32]
 8004bb4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004bb8:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004bba:	4b2e      	ldr	r3, [pc, #184]	; (8004c74 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004bbc:	2201      	movs	r2, #1
 8004bbe:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004bc0:	4b2c      	ldr	r3, [pc, #176]	; (8004c74 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004bc2:	2200      	movs	r2, #0
 8004bc4:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004bc6:	4a29      	ldr	r2, [pc, #164]	; (8004c6c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	f003 0301 	and.w	r3, r3, #1
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d014      	beq.n	8004c00 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004bd6:	f7fe f8d1 	bl	8002d7c <HAL_GetTick>
 8004bda:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004bdc:	e00a      	b.n	8004bf4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004bde:	f7fe f8cd 	bl	8002d7c <HAL_GetTick>
 8004be2:	4602      	mov	r2, r0
 8004be4:	693b      	ldr	r3, [r7, #16]
 8004be6:	1ad3      	subs	r3, r2, r3
 8004be8:	f241 3288 	movw	r2, #5000	; 0x1388
 8004bec:	4293      	cmp	r3, r2
 8004bee:	d901      	bls.n	8004bf4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8004bf0:	2303      	movs	r3, #3
 8004bf2:	e036      	b.n	8004c62 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004bf4:	4b1d      	ldr	r3, [pc, #116]	; (8004c6c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004bf6:	6a1b      	ldr	r3, [r3, #32]
 8004bf8:	f003 0302 	and.w	r3, r3, #2
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d0ee      	beq.n	8004bde <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004c00:	4b1a      	ldr	r3, [pc, #104]	; (8004c6c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004c02:	6a1b      	ldr	r3, [r3, #32]
 8004c04:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	685b      	ldr	r3, [r3, #4]
 8004c0c:	4917      	ldr	r1, [pc, #92]	; (8004c6c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004c0e:	4313      	orrs	r3, r2
 8004c10:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004c12:	7dfb      	ldrb	r3, [r7, #23]
 8004c14:	2b01      	cmp	r3, #1
 8004c16:	d105      	bne.n	8004c24 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004c18:	4b14      	ldr	r3, [pc, #80]	; (8004c6c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004c1a:	69db      	ldr	r3, [r3, #28]
 8004c1c:	4a13      	ldr	r2, [pc, #76]	; (8004c6c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004c1e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004c22:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	f003 0302 	and.w	r3, r3, #2
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d008      	beq.n	8004c42 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004c30:	4b0e      	ldr	r3, [pc, #56]	; (8004c6c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004c32:	685b      	ldr	r3, [r3, #4]
 8004c34:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	689b      	ldr	r3, [r3, #8]
 8004c3c:	490b      	ldr	r1, [pc, #44]	; (8004c6c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004c3e:	4313      	orrs	r3, r2
 8004c40:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	f003 0310 	and.w	r3, r3, #16
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d008      	beq.n	8004c60 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004c4e:	4b07      	ldr	r3, [pc, #28]	; (8004c6c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004c50:	685b      	ldr	r3, [r3, #4]
 8004c52:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	68db      	ldr	r3, [r3, #12]
 8004c5a:	4904      	ldr	r1, [pc, #16]	; (8004c6c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004c5c:	4313      	orrs	r3, r2
 8004c5e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8004c60:	2300      	movs	r3, #0
}
 8004c62:	4618      	mov	r0, r3
 8004c64:	3718      	adds	r7, #24
 8004c66:	46bd      	mov	sp, r7
 8004c68:	bd80      	pop	{r7, pc}
 8004c6a:	bf00      	nop
 8004c6c:	40021000 	.word	0x40021000
 8004c70:	40007000 	.word	0x40007000
 8004c74:	42420440 	.word	0x42420440

08004c78 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004c78:	b580      	push	{r7, lr}
 8004c7a:	b082      	sub	sp, #8
 8004c7c:	af00      	add	r7, sp, #0
 8004c7e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d101      	bne.n	8004c8a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004c86:	2301      	movs	r3, #1
 8004c88:	e01d      	b.n	8004cc6 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c90:	b2db      	uxtb	r3, r3
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d106      	bne.n	8004ca4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	2200      	movs	r2, #0
 8004c9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004c9e:	6878      	ldr	r0, [r7, #4]
 8004ca0:	f7fd fdd2 	bl	8002848 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	2202      	movs	r2, #2
 8004ca8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681a      	ldr	r2, [r3, #0]
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	3304      	adds	r3, #4
 8004cb4:	4619      	mov	r1, r3
 8004cb6:	4610      	mov	r0, r2
 8004cb8:	f000 fe9c 	bl	80059f4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	2201      	movs	r2, #1
 8004cc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004cc4:	2300      	movs	r3, #0
}
 8004cc6:	4618      	mov	r0, r3
 8004cc8:	3708      	adds	r7, #8
 8004cca:	46bd      	mov	sp, r7
 8004ccc:	bd80      	pop	{r7, pc}

08004cce <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004cce:	b480      	push	{r7}
 8004cd0:	b085      	sub	sp, #20
 8004cd2:	af00      	add	r7, sp, #0
 8004cd4:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	68da      	ldr	r2, [r3, #12]
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	f042 0201 	orr.w	r2, r2, #1
 8004ce4:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	689b      	ldr	r3, [r3, #8]
 8004cec:	f003 0307 	and.w	r3, r3, #7
 8004cf0:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	2b06      	cmp	r3, #6
 8004cf6:	d007      	beq.n	8004d08 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	681a      	ldr	r2, [r3, #0]
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	f042 0201 	orr.w	r2, r2, #1
 8004d06:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004d08:	2300      	movs	r3, #0
}
 8004d0a:	4618      	mov	r0, r3
 8004d0c:	3714      	adds	r7, #20
 8004d0e:	46bd      	mov	sp, r7
 8004d10:	bc80      	pop	{r7}
 8004d12:	4770      	bx	lr

08004d14 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8004d14:	b580      	push	{r7, lr}
 8004d16:	b082      	sub	sp, #8
 8004d18:	af00      	add	r7, sp, #0
 8004d1a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d101      	bne.n	8004d26 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8004d22:	2301      	movs	r3, #1
 8004d24:	e01d      	b.n	8004d62 <HAL_TIM_OC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d2c:	b2db      	uxtb	r3, r3
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d106      	bne.n	8004d40 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	2200      	movs	r2, #0
 8004d36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8004d3a:	6878      	ldr	r0, [r7, #4]
 8004d3c:	f000 f815 	bl	8004d6a <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	2202      	movs	r2, #2
 8004d44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681a      	ldr	r2, [r3, #0]
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	3304      	adds	r3, #4
 8004d50:	4619      	mov	r1, r3
 8004d52:	4610      	mov	r0, r2
 8004d54:	f000 fe4e 	bl	80059f4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	2201      	movs	r2, #1
 8004d5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004d60:	2300      	movs	r3, #0
}
 8004d62:	4618      	mov	r0, r3
 8004d64:	3708      	adds	r7, #8
 8004d66:	46bd      	mov	sp, r7
 8004d68:	bd80      	pop	{r7, pc}

08004d6a <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8004d6a:	b480      	push	{r7}
 8004d6c:	b083      	sub	sp, #12
 8004d6e:	af00      	add	r7, sp, #0
 8004d70:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8004d72:	bf00      	nop
 8004d74:	370c      	adds	r7, #12
 8004d76:	46bd      	mov	sp, r7
 8004d78:	bc80      	pop	{r7}
 8004d7a:	4770      	bx	lr

08004d7c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004d7c:	b580      	push	{r7, lr}
 8004d7e:	b082      	sub	sp, #8
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d101      	bne.n	8004d8e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004d8a:	2301      	movs	r3, #1
 8004d8c:	e01d      	b.n	8004dca <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d94:	b2db      	uxtb	r3, r3
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d106      	bne.n	8004da8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	2200      	movs	r2, #0
 8004d9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004da2:	6878      	ldr	r0, [r7, #4]
 8004da4:	f7fd fd08 	bl	80027b8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	2202      	movs	r2, #2
 8004dac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681a      	ldr	r2, [r3, #0]
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	3304      	adds	r3, #4
 8004db8:	4619      	mov	r1, r3
 8004dba:	4610      	mov	r0, r2
 8004dbc:	f000 fe1a 	bl	80059f4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	2201      	movs	r2, #1
 8004dc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004dc8:	2300      	movs	r3, #0
}
 8004dca:	4618      	mov	r0, r3
 8004dcc:	3708      	adds	r7, #8
 8004dce:	46bd      	mov	sp, r7
 8004dd0:	bd80      	pop	{r7, pc}
	...

08004dd4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004dd4:	b580      	push	{r7, lr}
 8004dd6:	b084      	sub	sp, #16
 8004dd8:	af00      	add	r7, sp, #0
 8004dda:	6078      	str	r0, [r7, #4]
 8004ddc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	2201      	movs	r2, #1
 8004de4:	6839      	ldr	r1, [r7, #0]
 8004de6:	4618      	mov	r0, r3
 8004de8:	f001 fa1f 	bl	800622a <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	4a10      	ldr	r2, [pc, #64]	; (8004e34 <HAL_TIM_PWM_Start+0x60>)
 8004df2:	4293      	cmp	r3, r2
 8004df4:	d107      	bne.n	8004e06 <HAL_TIM_PWM_Start+0x32>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004e04:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	689b      	ldr	r3, [r3, #8]
 8004e0c:	f003 0307 	and.w	r3, r3, #7
 8004e10:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	2b06      	cmp	r3, #6
 8004e16:	d007      	beq.n	8004e28 <HAL_TIM_PWM_Start+0x54>
  {
    __HAL_TIM_ENABLE(htim);
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	681a      	ldr	r2, [r3, #0]
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	f042 0201 	orr.w	r2, r2, #1
 8004e26:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004e28:	2300      	movs	r3, #0
}
 8004e2a:	4618      	mov	r0, r3
 8004e2c:	3710      	adds	r7, #16
 8004e2e:	46bd      	mov	sp, r7
 8004e30:	bd80      	pop	{r7, pc}
 8004e32:	bf00      	nop
 8004e34:	40012c00 	.word	0x40012c00

08004e38 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004e38:	b580      	push	{r7, lr}
 8004e3a:	b082      	sub	sp, #8
 8004e3c:	af00      	add	r7, sp, #0
 8004e3e:	6078      	str	r0, [r7, #4]
 8004e40:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	2200      	movs	r2, #0
 8004e48:	6839      	ldr	r1, [r7, #0]
 8004e4a:	4618      	mov	r0, r3
 8004e4c:	f001 f9ed 	bl	800622a <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	4a1d      	ldr	r2, [pc, #116]	; (8004ecc <HAL_TIM_PWM_Stop+0x94>)
 8004e56:	4293      	cmp	r3, r2
 8004e58:	d117      	bne.n	8004e8a <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	6a1a      	ldr	r2, [r3, #32]
 8004e60:	f241 1311 	movw	r3, #4369	; 0x1111
 8004e64:	4013      	ands	r3, r2
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d10f      	bne.n	8004e8a <HAL_TIM_PWM_Stop+0x52>
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	6a1a      	ldr	r2, [r3, #32]
 8004e70:	f240 4344 	movw	r3, #1092	; 0x444
 8004e74:	4013      	ands	r3, r2
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d107      	bne.n	8004e8a <HAL_TIM_PWM_Stop+0x52>
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004e88:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	6a1a      	ldr	r2, [r3, #32]
 8004e90:	f241 1311 	movw	r3, #4369	; 0x1111
 8004e94:	4013      	ands	r3, r2
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d10f      	bne.n	8004eba <HAL_TIM_PWM_Stop+0x82>
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	6a1a      	ldr	r2, [r3, #32]
 8004ea0:	f240 4344 	movw	r3, #1092	; 0x444
 8004ea4:	4013      	ands	r3, r2
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d107      	bne.n	8004eba <HAL_TIM_PWM_Stop+0x82>
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	681a      	ldr	r2, [r3, #0]
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	f022 0201 	bic.w	r2, r2, #1
 8004eb8:	601a      	str	r2, [r3, #0]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	2201      	movs	r2, #1
 8004ebe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8004ec2:	2300      	movs	r3, #0
}
 8004ec4:	4618      	mov	r0, r3
 8004ec6:	3708      	adds	r7, #8
 8004ec8:	46bd      	mov	sp, r7
 8004eca:	bd80      	pop	{r7, pc}
 8004ecc:	40012c00 	.word	0x40012c00

08004ed0 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8004ed0:	b580      	push	{r7, lr}
 8004ed2:	b082      	sub	sp, #8
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d101      	bne.n	8004ee2 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8004ede:	2301      	movs	r3, #1
 8004ee0:	e01d      	b.n	8004f1e <HAL_TIM_IC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ee8:	b2db      	uxtb	r3, r3
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d106      	bne.n	8004efc <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	2200      	movs	r2, #0
 8004ef2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8004ef6:	6878      	ldr	r0, [r7, #4]
 8004ef8:	f000 f815 	bl	8004f26 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	2202      	movs	r2, #2
 8004f00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681a      	ldr	r2, [r3, #0]
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	3304      	adds	r3, #4
 8004f0c:	4619      	mov	r1, r3
 8004f0e:	4610      	mov	r0, r2
 8004f10:	f000 fd70 	bl	80059f4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	2201      	movs	r2, #1
 8004f18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004f1c:	2300      	movs	r3, #0
}
 8004f1e:	4618      	mov	r0, r3
 8004f20:	3708      	adds	r7, #8
 8004f22:	46bd      	mov	sp, r7
 8004f24:	bd80      	pop	{r7, pc}

08004f26 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8004f26:	b480      	push	{r7}
 8004f28:	b083      	sub	sp, #12
 8004f2a:	af00      	add	r7, sp, #0
 8004f2c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8004f2e:	bf00      	nop
 8004f30:	370c      	adds	r7, #12
 8004f32:	46bd      	mov	sp, r7
 8004f34:	bc80      	pop	{r7}
 8004f36:	4770      	bx	lr

08004f38 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004f38:	b580      	push	{r7, lr}
 8004f3a:	b084      	sub	sp, #16
 8004f3c:	af00      	add	r7, sp, #0
 8004f3e:	6078      	str	r0, [r7, #4]
 8004f40:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8004f42:	683b      	ldr	r3, [r7, #0]
 8004f44:	2b0c      	cmp	r3, #12
 8004f46:	d841      	bhi.n	8004fcc <HAL_TIM_IC_Start_IT+0x94>
 8004f48:	a201      	add	r2, pc, #4	; (adr r2, 8004f50 <HAL_TIM_IC_Start_IT+0x18>)
 8004f4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f4e:	bf00      	nop
 8004f50:	08004f85 	.word	0x08004f85
 8004f54:	08004fcd 	.word	0x08004fcd
 8004f58:	08004fcd 	.word	0x08004fcd
 8004f5c:	08004fcd 	.word	0x08004fcd
 8004f60:	08004f97 	.word	0x08004f97
 8004f64:	08004fcd 	.word	0x08004fcd
 8004f68:	08004fcd 	.word	0x08004fcd
 8004f6c:	08004fcd 	.word	0x08004fcd
 8004f70:	08004fa9 	.word	0x08004fa9
 8004f74:	08004fcd 	.word	0x08004fcd
 8004f78:	08004fcd 	.word	0x08004fcd
 8004f7c:	08004fcd 	.word	0x08004fcd
 8004f80:	08004fbb 	.word	0x08004fbb
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	68da      	ldr	r2, [r3, #12]
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	f042 0202 	orr.w	r2, r2, #2
 8004f92:	60da      	str	r2, [r3, #12]
      break;
 8004f94:	e01b      	b.n	8004fce <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	68da      	ldr	r2, [r3, #12]
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	f042 0204 	orr.w	r2, r2, #4
 8004fa4:	60da      	str	r2, [r3, #12]
      break;
 8004fa6:	e012      	b.n	8004fce <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	68da      	ldr	r2, [r3, #12]
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	f042 0208 	orr.w	r2, r2, #8
 8004fb6:	60da      	str	r2, [r3, #12]
      break;
 8004fb8:	e009      	b.n	8004fce <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	68da      	ldr	r2, [r3, #12]
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	f042 0210 	orr.w	r2, r2, #16
 8004fc8:	60da      	str	r2, [r3, #12]
      break;
 8004fca:	e000      	b.n	8004fce <HAL_TIM_IC_Start_IT+0x96>
    }

    default:
      break;
 8004fcc:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	2201      	movs	r2, #1
 8004fd4:	6839      	ldr	r1, [r7, #0]
 8004fd6:	4618      	mov	r0, r3
 8004fd8:	f001 f927 	bl	800622a <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	689b      	ldr	r3, [r3, #8]
 8004fe2:	f003 0307 	and.w	r3, r3, #7
 8004fe6:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	2b06      	cmp	r3, #6
 8004fec:	d007      	beq.n	8004ffe <HAL_TIM_IC_Start_IT+0xc6>
  {
    __HAL_TIM_ENABLE(htim);
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	681a      	ldr	r2, [r3, #0]
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	f042 0201 	orr.w	r2, r2, #1
 8004ffc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004ffe:	2300      	movs	r3, #0
}
 8005000:	4618      	mov	r0, r3
 8005002:	3710      	adds	r7, #16
 8005004:	46bd      	mov	sp, r7
 8005006:	bd80      	pop	{r7, pc}

08005008 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8005008:	b580      	push	{r7, lr}
 800500a:	b086      	sub	sp, #24
 800500c:	af00      	add	r7, sp, #0
 800500e:	6078      	str	r0, [r7, #4]
 8005010:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	2b00      	cmp	r3, #0
 8005016:	d101      	bne.n	800501c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8005018:	2301      	movs	r3, #1
 800501a:	e07f      	b.n	800511c <HAL_TIM_Encoder_Init+0x114>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005022:	b2db      	uxtb	r3, r3
 8005024:	2b00      	cmp	r3, #0
 8005026:	d106      	bne.n	8005036 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	2200      	movs	r2, #0
 800502c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8005030:	6878      	ldr	r0, [r7, #4]
 8005032:	f7fd fc2d 	bl	8002890 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	2202      	movs	r2, #2
 800503a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	689b      	ldr	r3, [r3, #8]
 8005044:	687a      	ldr	r2, [r7, #4]
 8005046:	6812      	ldr	r2, [r2, #0]
 8005048:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800504c:	f023 0307 	bic.w	r3, r3, #7
 8005050:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681a      	ldr	r2, [r3, #0]
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	3304      	adds	r3, #4
 800505a:	4619      	mov	r1, r3
 800505c:	4610      	mov	r0, r2
 800505e:	f000 fcc9 	bl	80059f4 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	689b      	ldr	r3, [r3, #8]
 8005068:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	699b      	ldr	r3, [r3, #24]
 8005070:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	6a1b      	ldr	r3, [r3, #32]
 8005078:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800507a:	683b      	ldr	r3, [r7, #0]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	697a      	ldr	r2, [r7, #20]
 8005080:	4313      	orrs	r3, r2
 8005082:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005084:	693b      	ldr	r3, [r7, #16]
 8005086:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800508a:	f023 0303 	bic.w	r3, r3, #3
 800508e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005090:	683b      	ldr	r3, [r7, #0]
 8005092:	689a      	ldr	r2, [r3, #8]
 8005094:	683b      	ldr	r3, [r7, #0]
 8005096:	699b      	ldr	r3, [r3, #24]
 8005098:	021b      	lsls	r3, r3, #8
 800509a:	4313      	orrs	r3, r2
 800509c:	693a      	ldr	r2, [r7, #16]
 800509e:	4313      	orrs	r3, r2
 80050a0:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80050a2:	693b      	ldr	r3, [r7, #16]
 80050a4:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80050a8:	f023 030c 	bic.w	r3, r3, #12
 80050ac:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80050ae:	693b      	ldr	r3, [r7, #16]
 80050b0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80050b4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80050b8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80050ba:	683b      	ldr	r3, [r7, #0]
 80050bc:	68da      	ldr	r2, [r3, #12]
 80050be:	683b      	ldr	r3, [r7, #0]
 80050c0:	69db      	ldr	r3, [r3, #28]
 80050c2:	021b      	lsls	r3, r3, #8
 80050c4:	4313      	orrs	r3, r2
 80050c6:	693a      	ldr	r2, [r7, #16]
 80050c8:	4313      	orrs	r3, r2
 80050ca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80050cc:	683b      	ldr	r3, [r7, #0]
 80050ce:	691b      	ldr	r3, [r3, #16]
 80050d0:	011a      	lsls	r2, r3, #4
 80050d2:	683b      	ldr	r3, [r7, #0]
 80050d4:	6a1b      	ldr	r3, [r3, #32]
 80050d6:	031b      	lsls	r3, r3, #12
 80050d8:	4313      	orrs	r3, r2
 80050da:	693a      	ldr	r2, [r7, #16]
 80050dc:	4313      	orrs	r3, r2
 80050de:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80050e6:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80050e8:	683b      	ldr	r3, [r7, #0]
 80050ea:	685a      	ldr	r2, [r3, #4]
 80050ec:	683b      	ldr	r3, [r7, #0]
 80050ee:	695b      	ldr	r3, [r3, #20]
 80050f0:	011b      	lsls	r3, r3, #4
 80050f2:	4313      	orrs	r3, r2
 80050f4:	68fa      	ldr	r2, [r7, #12]
 80050f6:	4313      	orrs	r3, r2
 80050f8:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	697a      	ldr	r2, [r7, #20]
 8005100:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	693a      	ldr	r2, [r7, #16]
 8005108:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	68fa      	ldr	r2, [r7, #12]
 8005110:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	2201      	movs	r2, #1
 8005116:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800511a:	2300      	movs	r3, #0
}
 800511c:	4618      	mov	r0, r3
 800511e:	3718      	adds	r7, #24
 8005120:	46bd      	mov	sp, r7
 8005122:	bd80      	pop	{r7, pc}

08005124 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005124:	b580      	push	{r7, lr}
 8005126:	b082      	sub	sp, #8
 8005128:	af00      	add	r7, sp, #0
 800512a:	6078      	str	r0, [r7, #4]
 800512c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  switch (Channel)
 800512e:	683b      	ldr	r3, [r7, #0]
 8005130:	2b00      	cmp	r3, #0
 8005132:	d003      	beq.n	800513c <HAL_TIM_Encoder_Start+0x18>
 8005134:	683b      	ldr	r3, [r7, #0]
 8005136:	2b04      	cmp	r3, #4
 8005138:	d008      	beq.n	800514c <HAL_TIM_Encoder_Start+0x28>
 800513a:	e00f      	b.n	800515c <HAL_TIM_Encoder_Start+0x38>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	2201      	movs	r2, #1
 8005142:	2100      	movs	r1, #0
 8005144:	4618      	mov	r0, r3
 8005146:	f001 f870 	bl	800622a <TIM_CCxChannelCmd>
      break;
 800514a:	e016      	b.n	800517a <HAL_TIM_Encoder_Start+0x56>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	2201      	movs	r2, #1
 8005152:	2104      	movs	r1, #4
 8005154:	4618      	mov	r0, r3
 8005156:	f001 f868 	bl	800622a <TIM_CCxChannelCmd>
      break;
 800515a:	e00e      	b.n	800517a <HAL_TIM_Encoder_Start+0x56>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	2201      	movs	r2, #1
 8005162:	2100      	movs	r1, #0
 8005164:	4618      	mov	r0, r3
 8005166:	f001 f860 	bl	800622a <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	2201      	movs	r2, #1
 8005170:	2104      	movs	r1, #4
 8005172:	4618      	mov	r0, r3
 8005174:	f001 f859 	bl	800622a <TIM_CCxChannelCmd>
      break;
 8005178:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	681a      	ldr	r2, [r3, #0]
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	f042 0201 	orr.w	r2, r2, #1
 8005188:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800518a:	2300      	movs	r3, #0
}
 800518c:	4618      	mov	r0, r3
 800518e:	3708      	adds	r7, #8
 8005190:	46bd      	mov	sp, r7
 8005192:	bd80      	pop	{r7, pc}

08005194 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005194:	b580      	push	{r7, lr}
 8005196:	b082      	sub	sp, #8
 8005198:	af00      	add	r7, sp, #0
 800519a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	691b      	ldr	r3, [r3, #16]
 80051a2:	f003 0302 	and.w	r3, r3, #2
 80051a6:	2b02      	cmp	r3, #2
 80051a8:	d122      	bne.n	80051f0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	68db      	ldr	r3, [r3, #12]
 80051b0:	f003 0302 	and.w	r3, r3, #2
 80051b4:	2b02      	cmp	r3, #2
 80051b6:	d11b      	bne.n	80051f0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	f06f 0202 	mvn.w	r2, #2
 80051c0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	2201      	movs	r2, #1
 80051c6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	699b      	ldr	r3, [r3, #24]
 80051ce:	f003 0303 	and.w	r3, r3, #3
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d003      	beq.n	80051de <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80051d6:	6878      	ldr	r0, [r7, #4]
 80051d8:	f7fc fcfa 	bl	8001bd0 <HAL_TIM_IC_CaptureCallback>
 80051dc:	e005      	b.n	80051ea <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80051de:	6878      	ldr	r0, [r7, #4]
 80051e0:	f000 fbec 	bl	80059bc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80051e4:	6878      	ldr	r0, [r7, #4]
 80051e6:	f000 fbf2 	bl	80059ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	2200      	movs	r2, #0
 80051ee:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	691b      	ldr	r3, [r3, #16]
 80051f6:	f003 0304 	and.w	r3, r3, #4
 80051fa:	2b04      	cmp	r3, #4
 80051fc:	d122      	bne.n	8005244 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	68db      	ldr	r3, [r3, #12]
 8005204:	f003 0304 	and.w	r3, r3, #4
 8005208:	2b04      	cmp	r3, #4
 800520a:	d11b      	bne.n	8005244 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	f06f 0204 	mvn.w	r2, #4
 8005214:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	2202      	movs	r2, #2
 800521a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	699b      	ldr	r3, [r3, #24]
 8005222:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005226:	2b00      	cmp	r3, #0
 8005228:	d003      	beq.n	8005232 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800522a:	6878      	ldr	r0, [r7, #4]
 800522c:	f7fc fcd0 	bl	8001bd0 <HAL_TIM_IC_CaptureCallback>
 8005230:	e005      	b.n	800523e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005232:	6878      	ldr	r0, [r7, #4]
 8005234:	f000 fbc2 	bl	80059bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005238:	6878      	ldr	r0, [r7, #4]
 800523a:	f000 fbc8 	bl	80059ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	2200      	movs	r2, #0
 8005242:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	691b      	ldr	r3, [r3, #16]
 800524a:	f003 0308 	and.w	r3, r3, #8
 800524e:	2b08      	cmp	r3, #8
 8005250:	d122      	bne.n	8005298 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	68db      	ldr	r3, [r3, #12]
 8005258:	f003 0308 	and.w	r3, r3, #8
 800525c:	2b08      	cmp	r3, #8
 800525e:	d11b      	bne.n	8005298 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	f06f 0208 	mvn.w	r2, #8
 8005268:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	2204      	movs	r2, #4
 800526e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	69db      	ldr	r3, [r3, #28]
 8005276:	f003 0303 	and.w	r3, r3, #3
 800527a:	2b00      	cmp	r3, #0
 800527c:	d003      	beq.n	8005286 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800527e:	6878      	ldr	r0, [r7, #4]
 8005280:	f7fc fca6 	bl	8001bd0 <HAL_TIM_IC_CaptureCallback>
 8005284:	e005      	b.n	8005292 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005286:	6878      	ldr	r0, [r7, #4]
 8005288:	f000 fb98 	bl	80059bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800528c:	6878      	ldr	r0, [r7, #4]
 800528e:	f000 fb9e 	bl	80059ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	2200      	movs	r2, #0
 8005296:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	691b      	ldr	r3, [r3, #16]
 800529e:	f003 0310 	and.w	r3, r3, #16
 80052a2:	2b10      	cmp	r3, #16
 80052a4:	d122      	bne.n	80052ec <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	68db      	ldr	r3, [r3, #12]
 80052ac:	f003 0310 	and.w	r3, r3, #16
 80052b0:	2b10      	cmp	r3, #16
 80052b2:	d11b      	bne.n	80052ec <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	f06f 0210 	mvn.w	r2, #16
 80052bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	2208      	movs	r2, #8
 80052c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	69db      	ldr	r3, [r3, #28]
 80052ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d003      	beq.n	80052da <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80052d2:	6878      	ldr	r0, [r7, #4]
 80052d4:	f7fc fc7c 	bl	8001bd0 <HAL_TIM_IC_CaptureCallback>
 80052d8:	e005      	b.n	80052e6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80052da:	6878      	ldr	r0, [r7, #4]
 80052dc:	f000 fb6e 	bl	80059bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80052e0:	6878      	ldr	r0, [r7, #4]
 80052e2:	f000 fb74 	bl	80059ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	2200      	movs	r2, #0
 80052ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	691b      	ldr	r3, [r3, #16]
 80052f2:	f003 0301 	and.w	r3, r3, #1
 80052f6:	2b01      	cmp	r3, #1
 80052f8:	d10e      	bne.n	8005318 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	68db      	ldr	r3, [r3, #12]
 8005300:	f003 0301 	and.w	r3, r3, #1
 8005304:	2b01      	cmp	r3, #1
 8005306:	d107      	bne.n	8005318 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	f06f 0201 	mvn.w	r2, #1
 8005310:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005312:	6878      	ldr	r0, [r7, #4]
 8005314:	f7fc fb90 	bl	8001a38 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	691b      	ldr	r3, [r3, #16]
 800531e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005322:	2b80      	cmp	r3, #128	; 0x80
 8005324:	d10e      	bne.n	8005344 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	68db      	ldr	r3, [r3, #12]
 800532c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005330:	2b80      	cmp	r3, #128	; 0x80
 8005332:	d107      	bne.n	8005344 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800533c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800533e:	6878      	ldr	r0, [r7, #4]
 8005340:	f001 f835 	bl	80063ae <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	691b      	ldr	r3, [r3, #16]
 800534a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800534e:	2b40      	cmp	r3, #64	; 0x40
 8005350:	d10e      	bne.n	8005370 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	68db      	ldr	r3, [r3, #12]
 8005358:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800535c:	2b40      	cmp	r3, #64	; 0x40
 800535e:	d107      	bne.n	8005370 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005368:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800536a:	6878      	ldr	r0, [r7, #4]
 800536c:	f000 fb38 	bl	80059e0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	691b      	ldr	r3, [r3, #16]
 8005376:	f003 0320 	and.w	r3, r3, #32
 800537a:	2b20      	cmp	r3, #32
 800537c:	d10e      	bne.n	800539c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	68db      	ldr	r3, [r3, #12]
 8005384:	f003 0320 	and.w	r3, r3, #32
 8005388:	2b20      	cmp	r3, #32
 800538a:	d107      	bne.n	800539c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	f06f 0220 	mvn.w	r2, #32
 8005394:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005396:	6878      	ldr	r0, [r7, #4]
 8005398:	f001 f800 	bl	800639c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800539c:	bf00      	nop
 800539e:	3708      	adds	r7, #8
 80053a0:	46bd      	mov	sp, r7
 80053a2:	bd80      	pop	{r7, pc}

080053a4 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 80053a4:	b580      	push	{r7, lr}
 80053a6:	b084      	sub	sp, #16
 80053a8:	af00      	add	r7, sp, #0
 80053aa:	60f8      	str	r0, [r7, #12]
 80053ac:	60b9      	str	r1, [r7, #8]
 80053ae:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80053b6:	2b01      	cmp	r3, #1
 80053b8:	d101      	bne.n	80053be <HAL_TIM_OC_ConfigChannel+0x1a>
 80053ba:	2302      	movs	r3, #2
 80053bc:	e04e      	b.n	800545c <HAL_TIM_OC_ConfigChannel+0xb8>
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	2201      	movs	r2, #1
 80053c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	2202      	movs	r2, #2
 80053ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	2b0c      	cmp	r3, #12
 80053d2:	d839      	bhi.n	8005448 <HAL_TIM_OC_ConfigChannel+0xa4>
 80053d4:	a201      	add	r2, pc, #4	; (adr r2, 80053dc <HAL_TIM_OC_ConfigChannel+0x38>)
 80053d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053da:	bf00      	nop
 80053dc:	08005411 	.word	0x08005411
 80053e0:	08005449 	.word	0x08005449
 80053e4:	08005449 	.word	0x08005449
 80053e8:	08005449 	.word	0x08005449
 80053ec:	0800541f 	.word	0x0800541f
 80053f0:	08005449 	.word	0x08005449
 80053f4:	08005449 	.word	0x08005449
 80053f8:	08005449 	.word	0x08005449
 80053fc:	0800542d 	.word	0x0800542d
 8005400:	08005449 	.word	0x08005449
 8005404:	08005449 	.word	0x08005449
 8005408:	08005449 	.word	0x08005449
 800540c:	0800543b 	.word	0x0800543b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	68b9      	ldr	r1, [r7, #8]
 8005416:	4618      	mov	r0, r3
 8005418:	f000 fb4e 	bl	8005ab8 <TIM_OC1_SetConfig>
      break;
 800541c:	e015      	b.n	800544a <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	68b9      	ldr	r1, [r7, #8]
 8005424:	4618      	mov	r0, r3
 8005426:	f000 fbad 	bl	8005b84 <TIM_OC2_SetConfig>
      break;
 800542a:	e00e      	b.n	800544a <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	68b9      	ldr	r1, [r7, #8]
 8005432:	4618      	mov	r0, r3
 8005434:	f000 fc10 	bl	8005c58 <TIM_OC3_SetConfig>
      break;
 8005438:	e007      	b.n	800544a <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	68b9      	ldr	r1, [r7, #8]
 8005440:	4618      	mov	r0, r3
 8005442:	f000 fc73 	bl	8005d2c <TIM_OC4_SetConfig>
      break;
 8005446:	e000      	b.n	800544a <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      break;
 8005448:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	2201      	movs	r2, #1
 800544e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	2200      	movs	r2, #0
 8005456:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800545a:	2300      	movs	r3, #0
}
 800545c:	4618      	mov	r0, r3
 800545e:	3710      	adds	r7, #16
 8005460:	46bd      	mov	sp, r7
 8005462:	bd80      	pop	{r7, pc}

08005464 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8005464:	b580      	push	{r7, lr}
 8005466:	b084      	sub	sp, #16
 8005468:	af00      	add	r7, sp, #0
 800546a:	60f8      	str	r0, [r7, #12]
 800546c:	60b9      	str	r1, [r7, #8]
 800546e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005476:	2b01      	cmp	r3, #1
 8005478:	d101      	bne.n	800547e <HAL_TIM_IC_ConfigChannel+0x1a>
 800547a:	2302      	movs	r3, #2
 800547c:	e08a      	b.n	8005594 <HAL_TIM_IC_ConfigChannel+0x130>
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	2201      	movs	r2, #1
 8005482:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	2202      	movs	r2, #2
 800548a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (Channel == TIM_CHANNEL_1)
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	2b00      	cmp	r3, #0
 8005492:	d11b      	bne.n	80054cc <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	6818      	ldr	r0, [r3, #0]
 8005498:	68bb      	ldr	r3, [r7, #8]
 800549a:	6819      	ldr	r1, [r3, #0]
 800549c:	68bb      	ldr	r3, [r7, #8]
 800549e:	685a      	ldr	r2, [r3, #4]
 80054a0:	68bb      	ldr	r3, [r7, #8]
 80054a2:	68db      	ldr	r3, [r3, #12]
 80054a4:	f000 fd1e 	bl	8005ee4 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	699a      	ldr	r2, [r3, #24]
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	f022 020c 	bic.w	r2, r2, #12
 80054b6:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	6999      	ldr	r1, [r3, #24]
 80054be:	68bb      	ldr	r3, [r7, #8]
 80054c0:	689a      	ldr	r2, [r3, #8]
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	430a      	orrs	r2, r1
 80054c8:	619a      	str	r2, [r3, #24]
 80054ca:	e05a      	b.n	8005582 <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_2)
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	2b04      	cmp	r3, #4
 80054d0:	d11c      	bne.n	800550c <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	6818      	ldr	r0, [r3, #0]
 80054d6:	68bb      	ldr	r3, [r7, #8]
 80054d8:	6819      	ldr	r1, [r3, #0]
 80054da:	68bb      	ldr	r3, [r7, #8]
 80054dc:	685a      	ldr	r2, [r3, #4]
 80054de:	68bb      	ldr	r3, [r7, #8]
 80054e0:	68db      	ldr	r3, [r3, #12]
 80054e2:	f000 fd87 	bl	8005ff4 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	699a      	ldr	r2, [r3, #24]
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80054f4:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	6999      	ldr	r1, [r3, #24]
 80054fc:	68bb      	ldr	r3, [r7, #8]
 80054fe:	689b      	ldr	r3, [r3, #8]
 8005500:	021a      	lsls	r2, r3, #8
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	430a      	orrs	r2, r1
 8005508:	619a      	str	r2, [r3, #24]
 800550a:	e03a      	b.n	8005582 <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_3)
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	2b08      	cmp	r3, #8
 8005510:	d11b      	bne.n	800554a <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	6818      	ldr	r0, [r3, #0]
 8005516:	68bb      	ldr	r3, [r7, #8]
 8005518:	6819      	ldr	r1, [r3, #0]
 800551a:	68bb      	ldr	r3, [r7, #8]
 800551c:	685a      	ldr	r2, [r3, #4]
 800551e:	68bb      	ldr	r3, [r7, #8]
 8005520:	68db      	ldr	r3, [r3, #12]
 8005522:	f000 fdd2 	bl	80060ca <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	69da      	ldr	r2, [r3, #28]
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	f022 020c 	bic.w	r2, r2, #12
 8005534:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	69d9      	ldr	r1, [r3, #28]
 800553c:	68bb      	ldr	r3, [r7, #8]
 800553e:	689a      	ldr	r2, [r3, #8]
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	430a      	orrs	r2, r1
 8005546:	61da      	str	r2, [r3, #28]
 8005548:	e01b      	b.n	8005582 <HAL_TIM_IC_ConfigChannel+0x11e>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	6818      	ldr	r0, [r3, #0]
 800554e:	68bb      	ldr	r3, [r7, #8]
 8005550:	6819      	ldr	r1, [r3, #0]
 8005552:	68bb      	ldr	r3, [r7, #8]
 8005554:	685a      	ldr	r2, [r3, #4]
 8005556:	68bb      	ldr	r3, [r7, #8]
 8005558:	68db      	ldr	r3, [r3, #12]
 800555a:	f000 fdf1 	bl	8006140 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	69da      	ldr	r2, [r3, #28]
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800556c:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	69d9      	ldr	r1, [r3, #28]
 8005574:	68bb      	ldr	r3, [r7, #8]
 8005576:	689b      	ldr	r3, [r3, #8]
 8005578:	021a      	lsls	r2, r3, #8
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	430a      	orrs	r2, r1
 8005580:	61da      	str	r2, [r3, #28]
  }

  htim->State = HAL_TIM_STATE_READY;
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	2201      	movs	r2, #1
 8005586:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	2200      	movs	r2, #0
 800558e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005592:	2300      	movs	r3, #0
}
 8005594:	4618      	mov	r0, r3
 8005596:	3710      	adds	r7, #16
 8005598:	46bd      	mov	sp, r7
 800559a:	bd80      	pop	{r7, pc}

0800559c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800559c:	b580      	push	{r7, lr}
 800559e:	b084      	sub	sp, #16
 80055a0:	af00      	add	r7, sp, #0
 80055a2:	60f8      	str	r0, [r7, #12]
 80055a4:	60b9      	str	r1, [r7, #8]
 80055a6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80055ae:	2b01      	cmp	r3, #1
 80055b0:	d101      	bne.n	80055b6 <HAL_TIM_PWM_ConfigChannel+0x1a>
 80055b2:	2302      	movs	r3, #2
 80055b4:	e0b4      	b.n	8005720 <HAL_TIM_PWM_ConfigChannel+0x184>
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	2201      	movs	r2, #1
 80055ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	2202      	movs	r2, #2
 80055c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	2b0c      	cmp	r3, #12
 80055ca:	f200 809f 	bhi.w	800570c <HAL_TIM_PWM_ConfigChannel+0x170>
 80055ce:	a201      	add	r2, pc, #4	; (adr r2, 80055d4 <HAL_TIM_PWM_ConfigChannel+0x38>)
 80055d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055d4:	08005609 	.word	0x08005609
 80055d8:	0800570d 	.word	0x0800570d
 80055dc:	0800570d 	.word	0x0800570d
 80055e0:	0800570d 	.word	0x0800570d
 80055e4:	08005649 	.word	0x08005649
 80055e8:	0800570d 	.word	0x0800570d
 80055ec:	0800570d 	.word	0x0800570d
 80055f0:	0800570d 	.word	0x0800570d
 80055f4:	0800568b 	.word	0x0800568b
 80055f8:	0800570d 	.word	0x0800570d
 80055fc:	0800570d 	.word	0x0800570d
 8005600:	0800570d 	.word	0x0800570d
 8005604:	080056cb 	.word	0x080056cb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	68b9      	ldr	r1, [r7, #8]
 800560e:	4618      	mov	r0, r3
 8005610:	f000 fa52 	bl	8005ab8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	699a      	ldr	r2, [r3, #24]
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	f042 0208 	orr.w	r2, r2, #8
 8005622:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	699a      	ldr	r2, [r3, #24]
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	f022 0204 	bic.w	r2, r2, #4
 8005632:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	6999      	ldr	r1, [r3, #24]
 800563a:	68bb      	ldr	r3, [r7, #8]
 800563c:	691a      	ldr	r2, [r3, #16]
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	430a      	orrs	r2, r1
 8005644:	619a      	str	r2, [r3, #24]
      break;
 8005646:	e062      	b.n	800570e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	68b9      	ldr	r1, [r7, #8]
 800564e:	4618      	mov	r0, r3
 8005650:	f000 fa98 	bl	8005b84 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	699a      	ldr	r2, [r3, #24]
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005662:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	699a      	ldr	r2, [r3, #24]
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005672:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	6999      	ldr	r1, [r3, #24]
 800567a:	68bb      	ldr	r3, [r7, #8]
 800567c:	691b      	ldr	r3, [r3, #16]
 800567e:	021a      	lsls	r2, r3, #8
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	430a      	orrs	r2, r1
 8005686:	619a      	str	r2, [r3, #24]
      break;
 8005688:	e041      	b.n	800570e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	68b9      	ldr	r1, [r7, #8]
 8005690:	4618      	mov	r0, r3
 8005692:	f000 fae1 	bl	8005c58 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	69da      	ldr	r2, [r3, #28]
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	f042 0208 	orr.w	r2, r2, #8
 80056a4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	69da      	ldr	r2, [r3, #28]
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	f022 0204 	bic.w	r2, r2, #4
 80056b4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	69d9      	ldr	r1, [r3, #28]
 80056bc:	68bb      	ldr	r3, [r7, #8]
 80056be:	691a      	ldr	r2, [r3, #16]
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	430a      	orrs	r2, r1
 80056c6:	61da      	str	r2, [r3, #28]
      break;
 80056c8:	e021      	b.n	800570e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	68b9      	ldr	r1, [r7, #8]
 80056d0:	4618      	mov	r0, r3
 80056d2:	f000 fb2b 	bl	8005d2c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	69da      	ldr	r2, [r3, #28]
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80056e4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	69da      	ldr	r2, [r3, #28]
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80056f4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	69d9      	ldr	r1, [r3, #28]
 80056fc:	68bb      	ldr	r3, [r7, #8]
 80056fe:	691b      	ldr	r3, [r3, #16]
 8005700:	021a      	lsls	r2, r3, #8
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	430a      	orrs	r2, r1
 8005708:	61da      	str	r2, [r3, #28]
      break;
 800570a:	e000      	b.n	800570e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 800570c:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	2201      	movs	r2, #1
 8005712:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	2200      	movs	r2, #0
 800571a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800571e:	2300      	movs	r3, #0
}
 8005720:	4618      	mov	r0, r3
 8005722:	3710      	adds	r7, #16
 8005724:	46bd      	mov	sp, r7
 8005726:	bd80      	pop	{r7, pc}

08005728 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005728:	b580      	push	{r7, lr}
 800572a:	b084      	sub	sp, #16
 800572c:	af00      	add	r7, sp, #0
 800572e:	6078      	str	r0, [r7, #4]
 8005730:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005738:	2b01      	cmp	r3, #1
 800573a:	d101      	bne.n	8005740 <HAL_TIM_ConfigClockSource+0x18>
 800573c:	2302      	movs	r3, #2
 800573e:	e0b3      	b.n	80058a8 <HAL_TIM_ConfigClockSource+0x180>
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	2201      	movs	r2, #1
 8005744:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	2202      	movs	r2, #2
 800574c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	689b      	ldr	r3, [r3, #8]
 8005756:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800575e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005766:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	68fa      	ldr	r2, [r7, #12]
 800576e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005770:	683b      	ldr	r3, [r7, #0]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005778:	d03e      	beq.n	80057f8 <HAL_TIM_ConfigClockSource+0xd0>
 800577a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800577e:	f200 8087 	bhi.w	8005890 <HAL_TIM_ConfigClockSource+0x168>
 8005782:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005786:	f000 8085 	beq.w	8005894 <HAL_TIM_ConfigClockSource+0x16c>
 800578a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800578e:	d87f      	bhi.n	8005890 <HAL_TIM_ConfigClockSource+0x168>
 8005790:	2b70      	cmp	r3, #112	; 0x70
 8005792:	d01a      	beq.n	80057ca <HAL_TIM_ConfigClockSource+0xa2>
 8005794:	2b70      	cmp	r3, #112	; 0x70
 8005796:	d87b      	bhi.n	8005890 <HAL_TIM_ConfigClockSource+0x168>
 8005798:	2b60      	cmp	r3, #96	; 0x60
 800579a:	d050      	beq.n	800583e <HAL_TIM_ConfigClockSource+0x116>
 800579c:	2b60      	cmp	r3, #96	; 0x60
 800579e:	d877      	bhi.n	8005890 <HAL_TIM_ConfigClockSource+0x168>
 80057a0:	2b50      	cmp	r3, #80	; 0x50
 80057a2:	d03c      	beq.n	800581e <HAL_TIM_ConfigClockSource+0xf6>
 80057a4:	2b50      	cmp	r3, #80	; 0x50
 80057a6:	d873      	bhi.n	8005890 <HAL_TIM_ConfigClockSource+0x168>
 80057a8:	2b40      	cmp	r3, #64	; 0x40
 80057aa:	d058      	beq.n	800585e <HAL_TIM_ConfigClockSource+0x136>
 80057ac:	2b40      	cmp	r3, #64	; 0x40
 80057ae:	d86f      	bhi.n	8005890 <HAL_TIM_ConfigClockSource+0x168>
 80057b0:	2b30      	cmp	r3, #48	; 0x30
 80057b2:	d064      	beq.n	800587e <HAL_TIM_ConfigClockSource+0x156>
 80057b4:	2b30      	cmp	r3, #48	; 0x30
 80057b6:	d86b      	bhi.n	8005890 <HAL_TIM_ConfigClockSource+0x168>
 80057b8:	2b20      	cmp	r3, #32
 80057ba:	d060      	beq.n	800587e <HAL_TIM_ConfigClockSource+0x156>
 80057bc:	2b20      	cmp	r3, #32
 80057be:	d867      	bhi.n	8005890 <HAL_TIM_ConfigClockSource+0x168>
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d05c      	beq.n	800587e <HAL_TIM_ConfigClockSource+0x156>
 80057c4:	2b10      	cmp	r3, #16
 80057c6:	d05a      	beq.n	800587e <HAL_TIM_ConfigClockSource+0x156>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80057c8:	e062      	b.n	8005890 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	6818      	ldr	r0, [r3, #0]
 80057ce:	683b      	ldr	r3, [r7, #0]
 80057d0:	6899      	ldr	r1, [r3, #8]
 80057d2:	683b      	ldr	r3, [r7, #0]
 80057d4:	685a      	ldr	r2, [r3, #4]
 80057d6:	683b      	ldr	r3, [r7, #0]
 80057d8:	68db      	ldr	r3, [r3, #12]
 80057da:	f000 fd07 	bl	80061ec <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	689b      	ldr	r3, [r3, #8]
 80057e4:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80057ec:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	68fa      	ldr	r2, [r7, #12]
 80057f4:	609a      	str	r2, [r3, #8]
      break;
 80057f6:	e04e      	b.n	8005896 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	6818      	ldr	r0, [r3, #0]
 80057fc:	683b      	ldr	r3, [r7, #0]
 80057fe:	6899      	ldr	r1, [r3, #8]
 8005800:	683b      	ldr	r3, [r7, #0]
 8005802:	685a      	ldr	r2, [r3, #4]
 8005804:	683b      	ldr	r3, [r7, #0]
 8005806:	68db      	ldr	r3, [r3, #12]
 8005808:	f000 fcf0 	bl	80061ec <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	689a      	ldr	r2, [r3, #8]
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800581a:	609a      	str	r2, [r3, #8]
      break;
 800581c:	e03b      	b.n	8005896 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	6818      	ldr	r0, [r3, #0]
 8005822:	683b      	ldr	r3, [r7, #0]
 8005824:	6859      	ldr	r1, [r3, #4]
 8005826:	683b      	ldr	r3, [r7, #0]
 8005828:	68db      	ldr	r3, [r3, #12]
 800582a:	461a      	mov	r2, r3
 800582c:	f000 fbb4 	bl	8005f98 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	2150      	movs	r1, #80	; 0x50
 8005836:	4618      	mov	r0, r3
 8005838:	f000 fcbe 	bl	80061b8 <TIM_ITRx_SetConfig>
      break;
 800583c:	e02b      	b.n	8005896 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	6818      	ldr	r0, [r3, #0]
 8005842:	683b      	ldr	r3, [r7, #0]
 8005844:	6859      	ldr	r1, [r3, #4]
 8005846:	683b      	ldr	r3, [r7, #0]
 8005848:	68db      	ldr	r3, [r3, #12]
 800584a:	461a      	mov	r2, r3
 800584c:	f000 fc0e 	bl	800606c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	2160      	movs	r1, #96	; 0x60
 8005856:	4618      	mov	r0, r3
 8005858:	f000 fcae 	bl	80061b8 <TIM_ITRx_SetConfig>
      break;
 800585c:	e01b      	b.n	8005896 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	6818      	ldr	r0, [r3, #0]
 8005862:	683b      	ldr	r3, [r7, #0]
 8005864:	6859      	ldr	r1, [r3, #4]
 8005866:	683b      	ldr	r3, [r7, #0]
 8005868:	68db      	ldr	r3, [r3, #12]
 800586a:	461a      	mov	r2, r3
 800586c:	f000 fb94 	bl	8005f98 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	2140      	movs	r1, #64	; 0x40
 8005876:	4618      	mov	r0, r3
 8005878:	f000 fc9e 	bl	80061b8 <TIM_ITRx_SetConfig>
      break;
 800587c:	e00b      	b.n	8005896 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681a      	ldr	r2, [r3, #0]
 8005882:	683b      	ldr	r3, [r7, #0]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	4619      	mov	r1, r3
 8005888:	4610      	mov	r0, r2
 800588a:	f000 fc95 	bl	80061b8 <TIM_ITRx_SetConfig>
      break;
 800588e:	e002      	b.n	8005896 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8005890:	bf00      	nop
 8005892:	e000      	b.n	8005896 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8005894:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	2201      	movs	r2, #1
 800589a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	2200      	movs	r2, #0
 80058a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80058a6:	2300      	movs	r3, #0
}
 80058a8:	4618      	mov	r0, r3
 80058aa:	3710      	adds	r7, #16
 80058ac:	46bd      	mov	sp, r7
 80058ae:	bd80      	pop	{r7, pc}

080058b0 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80058b0:	b580      	push	{r7, lr}
 80058b2:	b082      	sub	sp, #8
 80058b4:	af00      	add	r7, sp, #0
 80058b6:	6078      	str	r0, [r7, #4]
 80058b8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80058c0:	2b01      	cmp	r3, #1
 80058c2:	d101      	bne.n	80058c8 <HAL_TIM_SlaveConfigSynchro+0x18>
 80058c4:	2302      	movs	r3, #2
 80058c6:	e031      	b.n	800592c <HAL_TIM_SlaveConfigSynchro+0x7c>
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	2201      	movs	r2, #1
 80058cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	2202      	movs	r2, #2
 80058d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 80058d8:	6839      	ldr	r1, [r7, #0]
 80058da:	6878      	ldr	r0, [r7, #4]
 80058dc:	f000 fa74 	bl	8005dc8 <TIM_SlaveTimer_SetConfig>
 80058e0:	4603      	mov	r3, r0
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d009      	beq.n	80058fa <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	2201      	movs	r2, #1
 80058ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	2200      	movs	r2, #0
 80058f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 80058f6:	2301      	movs	r3, #1
 80058f8:	e018      	b.n	800592c <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	68da      	ldr	r2, [r3, #12]
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005908:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	68da      	ldr	r2, [r3, #12]
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005918:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	2201      	movs	r2, #1
 800591e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	2200      	movs	r2, #0
 8005926:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800592a:	2300      	movs	r3, #0
}
 800592c:	4618      	mov	r0, r3
 800592e:	3708      	adds	r7, #8
 8005930:	46bd      	mov	sp, r7
 8005932:	bd80      	pop	{r7, pc}

08005934 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005934:	b480      	push	{r7}
 8005936:	b085      	sub	sp, #20
 8005938:	af00      	add	r7, sp, #0
 800593a:	6078      	str	r0, [r7, #4]
 800593c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 800593e:	2300      	movs	r3, #0
 8005940:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8005942:	683b      	ldr	r3, [r7, #0]
 8005944:	2b0c      	cmp	r3, #12
 8005946:	d831      	bhi.n	80059ac <HAL_TIM_ReadCapturedValue+0x78>
 8005948:	a201      	add	r2, pc, #4	; (adr r2, 8005950 <HAL_TIM_ReadCapturedValue+0x1c>)
 800594a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800594e:	bf00      	nop
 8005950:	08005985 	.word	0x08005985
 8005954:	080059ad 	.word	0x080059ad
 8005958:	080059ad 	.word	0x080059ad
 800595c:	080059ad 	.word	0x080059ad
 8005960:	0800598f 	.word	0x0800598f
 8005964:	080059ad 	.word	0x080059ad
 8005968:	080059ad 	.word	0x080059ad
 800596c:	080059ad 	.word	0x080059ad
 8005970:	08005999 	.word	0x08005999
 8005974:	080059ad 	.word	0x080059ad
 8005978:	080059ad 	.word	0x080059ad
 800597c:	080059ad 	.word	0x080059ad
 8005980:	080059a3 	.word	0x080059a3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800598a:	60fb      	str	r3, [r7, #12]

      break;
 800598c:	e00f      	b.n	80059ae <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005994:	60fb      	str	r3, [r7, #12]

      break;
 8005996:	e00a      	b.n	80059ae <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800599e:	60fb      	str	r3, [r7, #12]

      break;
 80059a0:	e005      	b.n	80059ae <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059a8:	60fb      	str	r3, [r7, #12]

      break;
 80059aa:	e000      	b.n	80059ae <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 80059ac:	bf00      	nop
  }

  return tmpreg;
 80059ae:	68fb      	ldr	r3, [r7, #12]
}
 80059b0:	4618      	mov	r0, r3
 80059b2:	3714      	adds	r7, #20
 80059b4:	46bd      	mov	sp, r7
 80059b6:	bc80      	pop	{r7}
 80059b8:	4770      	bx	lr
 80059ba:	bf00      	nop

080059bc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80059bc:	b480      	push	{r7}
 80059be:	b083      	sub	sp, #12
 80059c0:	af00      	add	r7, sp, #0
 80059c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80059c4:	bf00      	nop
 80059c6:	370c      	adds	r7, #12
 80059c8:	46bd      	mov	sp, r7
 80059ca:	bc80      	pop	{r7}
 80059cc:	4770      	bx	lr

080059ce <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80059ce:	b480      	push	{r7}
 80059d0:	b083      	sub	sp, #12
 80059d2:	af00      	add	r7, sp, #0
 80059d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80059d6:	bf00      	nop
 80059d8:	370c      	adds	r7, #12
 80059da:	46bd      	mov	sp, r7
 80059dc:	bc80      	pop	{r7}
 80059de:	4770      	bx	lr

080059e0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80059e0:	b480      	push	{r7}
 80059e2:	b083      	sub	sp, #12
 80059e4:	af00      	add	r7, sp, #0
 80059e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80059e8:	bf00      	nop
 80059ea:	370c      	adds	r7, #12
 80059ec:	46bd      	mov	sp, r7
 80059ee:	bc80      	pop	{r7}
 80059f0:	4770      	bx	lr
	...

080059f4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80059f4:	b480      	push	{r7}
 80059f6:	b085      	sub	sp, #20
 80059f8:	af00      	add	r7, sp, #0
 80059fa:	6078      	str	r0, [r7, #4]
 80059fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	4a29      	ldr	r2, [pc, #164]	; (8005aac <TIM_Base_SetConfig+0xb8>)
 8005a08:	4293      	cmp	r3, r2
 8005a0a:	d00b      	beq.n	8005a24 <TIM_Base_SetConfig+0x30>
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a12:	d007      	beq.n	8005a24 <TIM_Base_SetConfig+0x30>
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	4a26      	ldr	r2, [pc, #152]	; (8005ab0 <TIM_Base_SetConfig+0xbc>)
 8005a18:	4293      	cmp	r3, r2
 8005a1a:	d003      	beq.n	8005a24 <TIM_Base_SetConfig+0x30>
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	4a25      	ldr	r2, [pc, #148]	; (8005ab4 <TIM_Base_SetConfig+0xc0>)
 8005a20:	4293      	cmp	r3, r2
 8005a22:	d108      	bne.n	8005a36 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a2a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005a2c:	683b      	ldr	r3, [r7, #0]
 8005a2e:	685b      	ldr	r3, [r3, #4]
 8005a30:	68fa      	ldr	r2, [r7, #12]
 8005a32:	4313      	orrs	r3, r2
 8005a34:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	4a1c      	ldr	r2, [pc, #112]	; (8005aac <TIM_Base_SetConfig+0xb8>)
 8005a3a:	4293      	cmp	r3, r2
 8005a3c:	d00b      	beq.n	8005a56 <TIM_Base_SetConfig+0x62>
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a44:	d007      	beq.n	8005a56 <TIM_Base_SetConfig+0x62>
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	4a19      	ldr	r2, [pc, #100]	; (8005ab0 <TIM_Base_SetConfig+0xbc>)
 8005a4a:	4293      	cmp	r3, r2
 8005a4c:	d003      	beq.n	8005a56 <TIM_Base_SetConfig+0x62>
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	4a18      	ldr	r2, [pc, #96]	; (8005ab4 <TIM_Base_SetConfig+0xc0>)
 8005a52:	4293      	cmp	r3, r2
 8005a54:	d108      	bne.n	8005a68 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005a5c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005a5e:	683b      	ldr	r3, [r7, #0]
 8005a60:	68db      	ldr	r3, [r3, #12]
 8005a62:	68fa      	ldr	r2, [r7, #12]
 8005a64:	4313      	orrs	r3, r2
 8005a66:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005a6e:	683b      	ldr	r3, [r7, #0]
 8005a70:	695b      	ldr	r3, [r3, #20]
 8005a72:	4313      	orrs	r3, r2
 8005a74:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	68fa      	ldr	r2, [r7, #12]
 8005a7a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005a7c:	683b      	ldr	r3, [r7, #0]
 8005a7e:	689a      	ldr	r2, [r3, #8]
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005a84:	683b      	ldr	r3, [r7, #0]
 8005a86:	681a      	ldr	r2, [r3, #0]
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	4a07      	ldr	r2, [pc, #28]	; (8005aac <TIM_Base_SetConfig+0xb8>)
 8005a90:	4293      	cmp	r3, r2
 8005a92:	d103      	bne.n	8005a9c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005a94:	683b      	ldr	r3, [r7, #0]
 8005a96:	691a      	ldr	r2, [r3, #16]
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	2201      	movs	r2, #1
 8005aa0:	615a      	str	r2, [r3, #20]
}
 8005aa2:	bf00      	nop
 8005aa4:	3714      	adds	r7, #20
 8005aa6:	46bd      	mov	sp, r7
 8005aa8:	bc80      	pop	{r7}
 8005aaa:	4770      	bx	lr
 8005aac:	40012c00 	.word	0x40012c00
 8005ab0:	40000400 	.word	0x40000400
 8005ab4:	40000800 	.word	0x40000800

08005ab8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005ab8:	b480      	push	{r7}
 8005aba:	b087      	sub	sp, #28
 8005abc:	af00      	add	r7, sp, #0
 8005abe:	6078      	str	r0, [r7, #4]
 8005ac0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	6a1b      	ldr	r3, [r3, #32]
 8005ac6:	f023 0201 	bic.w	r2, r3, #1
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	6a1b      	ldr	r3, [r3, #32]
 8005ad2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	685b      	ldr	r3, [r3, #4]
 8005ad8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	699b      	ldr	r3, [r3, #24]
 8005ade:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ae6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	f023 0303 	bic.w	r3, r3, #3
 8005aee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005af0:	683b      	ldr	r3, [r7, #0]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	68fa      	ldr	r2, [r7, #12]
 8005af6:	4313      	orrs	r3, r2
 8005af8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005afa:	697b      	ldr	r3, [r7, #20]
 8005afc:	f023 0302 	bic.w	r3, r3, #2
 8005b00:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005b02:	683b      	ldr	r3, [r7, #0]
 8005b04:	689b      	ldr	r3, [r3, #8]
 8005b06:	697a      	ldr	r2, [r7, #20]
 8005b08:	4313      	orrs	r3, r2
 8005b0a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	4a1c      	ldr	r2, [pc, #112]	; (8005b80 <TIM_OC1_SetConfig+0xc8>)
 8005b10:	4293      	cmp	r3, r2
 8005b12:	d10c      	bne.n	8005b2e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005b14:	697b      	ldr	r3, [r7, #20]
 8005b16:	f023 0308 	bic.w	r3, r3, #8
 8005b1a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005b1c:	683b      	ldr	r3, [r7, #0]
 8005b1e:	68db      	ldr	r3, [r3, #12]
 8005b20:	697a      	ldr	r2, [r7, #20]
 8005b22:	4313      	orrs	r3, r2
 8005b24:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005b26:	697b      	ldr	r3, [r7, #20]
 8005b28:	f023 0304 	bic.w	r3, r3, #4
 8005b2c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	4a13      	ldr	r2, [pc, #76]	; (8005b80 <TIM_OC1_SetConfig+0xc8>)
 8005b32:	4293      	cmp	r3, r2
 8005b34:	d111      	bne.n	8005b5a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005b36:	693b      	ldr	r3, [r7, #16]
 8005b38:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005b3c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005b3e:	693b      	ldr	r3, [r7, #16]
 8005b40:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005b44:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005b46:	683b      	ldr	r3, [r7, #0]
 8005b48:	695b      	ldr	r3, [r3, #20]
 8005b4a:	693a      	ldr	r2, [r7, #16]
 8005b4c:	4313      	orrs	r3, r2
 8005b4e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005b50:	683b      	ldr	r3, [r7, #0]
 8005b52:	699b      	ldr	r3, [r3, #24]
 8005b54:	693a      	ldr	r2, [r7, #16]
 8005b56:	4313      	orrs	r3, r2
 8005b58:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	693a      	ldr	r2, [r7, #16]
 8005b5e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	68fa      	ldr	r2, [r7, #12]
 8005b64:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005b66:	683b      	ldr	r3, [r7, #0]
 8005b68:	685a      	ldr	r2, [r3, #4]
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	697a      	ldr	r2, [r7, #20]
 8005b72:	621a      	str	r2, [r3, #32]
}
 8005b74:	bf00      	nop
 8005b76:	371c      	adds	r7, #28
 8005b78:	46bd      	mov	sp, r7
 8005b7a:	bc80      	pop	{r7}
 8005b7c:	4770      	bx	lr
 8005b7e:	bf00      	nop
 8005b80:	40012c00 	.word	0x40012c00

08005b84 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005b84:	b480      	push	{r7}
 8005b86:	b087      	sub	sp, #28
 8005b88:	af00      	add	r7, sp, #0
 8005b8a:	6078      	str	r0, [r7, #4]
 8005b8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	6a1b      	ldr	r3, [r3, #32]
 8005b92:	f023 0210 	bic.w	r2, r3, #16
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	6a1b      	ldr	r3, [r3, #32]
 8005b9e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	685b      	ldr	r3, [r3, #4]
 8005ba4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	699b      	ldr	r3, [r3, #24]
 8005baa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005bb2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005bba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005bbc:	683b      	ldr	r3, [r7, #0]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	021b      	lsls	r3, r3, #8
 8005bc2:	68fa      	ldr	r2, [r7, #12]
 8005bc4:	4313      	orrs	r3, r2
 8005bc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005bc8:	697b      	ldr	r3, [r7, #20]
 8005bca:	f023 0320 	bic.w	r3, r3, #32
 8005bce:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005bd0:	683b      	ldr	r3, [r7, #0]
 8005bd2:	689b      	ldr	r3, [r3, #8]
 8005bd4:	011b      	lsls	r3, r3, #4
 8005bd6:	697a      	ldr	r2, [r7, #20]
 8005bd8:	4313      	orrs	r3, r2
 8005bda:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	4a1d      	ldr	r2, [pc, #116]	; (8005c54 <TIM_OC2_SetConfig+0xd0>)
 8005be0:	4293      	cmp	r3, r2
 8005be2:	d10d      	bne.n	8005c00 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005be4:	697b      	ldr	r3, [r7, #20]
 8005be6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005bea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005bec:	683b      	ldr	r3, [r7, #0]
 8005bee:	68db      	ldr	r3, [r3, #12]
 8005bf0:	011b      	lsls	r3, r3, #4
 8005bf2:	697a      	ldr	r2, [r7, #20]
 8005bf4:	4313      	orrs	r3, r2
 8005bf6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005bf8:	697b      	ldr	r3, [r7, #20]
 8005bfa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005bfe:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	4a14      	ldr	r2, [pc, #80]	; (8005c54 <TIM_OC2_SetConfig+0xd0>)
 8005c04:	4293      	cmp	r3, r2
 8005c06:	d113      	bne.n	8005c30 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005c08:	693b      	ldr	r3, [r7, #16]
 8005c0a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005c0e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005c10:	693b      	ldr	r3, [r7, #16]
 8005c12:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005c16:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005c18:	683b      	ldr	r3, [r7, #0]
 8005c1a:	695b      	ldr	r3, [r3, #20]
 8005c1c:	009b      	lsls	r3, r3, #2
 8005c1e:	693a      	ldr	r2, [r7, #16]
 8005c20:	4313      	orrs	r3, r2
 8005c22:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005c24:	683b      	ldr	r3, [r7, #0]
 8005c26:	699b      	ldr	r3, [r3, #24]
 8005c28:	009b      	lsls	r3, r3, #2
 8005c2a:	693a      	ldr	r2, [r7, #16]
 8005c2c:	4313      	orrs	r3, r2
 8005c2e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	693a      	ldr	r2, [r7, #16]
 8005c34:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	68fa      	ldr	r2, [r7, #12]
 8005c3a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005c3c:	683b      	ldr	r3, [r7, #0]
 8005c3e:	685a      	ldr	r2, [r3, #4]
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	697a      	ldr	r2, [r7, #20]
 8005c48:	621a      	str	r2, [r3, #32]
}
 8005c4a:	bf00      	nop
 8005c4c:	371c      	adds	r7, #28
 8005c4e:	46bd      	mov	sp, r7
 8005c50:	bc80      	pop	{r7}
 8005c52:	4770      	bx	lr
 8005c54:	40012c00 	.word	0x40012c00

08005c58 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005c58:	b480      	push	{r7}
 8005c5a:	b087      	sub	sp, #28
 8005c5c:	af00      	add	r7, sp, #0
 8005c5e:	6078      	str	r0, [r7, #4]
 8005c60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	6a1b      	ldr	r3, [r3, #32]
 8005c66:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	6a1b      	ldr	r3, [r3, #32]
 8005c72:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	685b      	ldr	r3, [r3, #4]
 8005c78:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	69db      	ldr	r3, [r3, #28]
 8005c7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c86:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	f023 0303 	bic.w	r3, r3, #3
 8005c8e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005c90:	683b      	ldr	r3, [r7, #0]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	68fa      	ldr	r2, [r7, #12]
 8005c96:	4313      	orrs	r3, r2
 8005c98:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005c9a:	697b      	ldr	r3, [r7, #20]
 8005c9c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005ca0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005ca2:	683b      	ldr	r3, [r7, #0]
 8005ca4:	689b      	ldr	r3, [r3, #8]
 8005ca6:	021b      	lsls	r3, r3, #8
 8005ca8:	697a      	ldr	r2, [r7, #20]
 8005caa:	4313      	orrs	r3, r2
 8005cac:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	4a1d      	ldr	r2, [pc, #116]	; (8005d28 <TIM_OC3_SetConfig+0xd0>)
 8005cb2:	4293      	cmp	r3, r2
 8005cb4:	d10d      	bne.n	8005cd2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005cb6:	697b      	ldr	r3, [r7, #20]
 8005cb8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005cbc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005cbe:	683b      	ldr	r3, [r7, #0]
 8005cc0:	68db      	ldr	r3, [r3, #12]
 8005cc2:	021b      	lsls	r3, r3, #8
 8005cc4:	697a      	ldr	r2, [r7, #20]
 8005cc6:	4313      	orrs	r3, r2
 8005cc8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005cca:	697b      	ldr	r3, [r7, #20]
 8005ccc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005cd0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	4a14      	ldr	r2, [pc, #80]	; (8005d28 <TIM_OC3_SetConfig+0xd0>)
 8005cd6:	4293      	cmp	r3, r2
 8005cd8:	d113      	bne.n	8005d02 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005cda:	693b      	ldr	r3, [r7, #16]
 8005cdc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005ce0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005ce2:	693b      	ldr	r3, [r7, #16]
 8005ce4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005ce8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005cea:	683b      	ldr	r3, [r7, #0]
 8005cec:	695b      	ldr	r3, [r3, #20]
 8005cee:	011b      	lsls	r3, r3, #4
 8005cf0:	693a      	ldr	r2, [r7, #16]
 8005cf2:	4313      	orrs	r3, r2
 8005cf4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005cf6:	683b      	ldr	r3, [r7, #0]
 8005cf8:	699b      	ldr	r3, [r3, #24]
 8005cfa:	011b      	lsls	r3, r3, #4
 8005cfc:	693a      	ldr	r2, [r7, #16]
 8005cfe:	4313      	orrs	r3, r2
 8005d00:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	693a      	ldr	r2, [r7, #16]
 8005d06:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	68fa      	ldr	r2, [r7, #12]
 8005d0c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005d0e:	683b      	ldr	r3, [r7, #0]
 8005d10:	685a      	ldr	r2, [r3, #4]
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	697a      	ldr	r2, [r7, #20]
 8005d1a:	621a      	str	r2, [r3, #32]
}
 8005d1c:	bf00      	nop
 8005d1e:	371c      	adds	r7, #28
 8005d20:	46bd      	mov	sp, r7
 8005d22:	bc80      	pop	{r7}
 8005d24:	4770      	bx	lr
 8005d26:	bf00      	nop
 8005d28:	40012c00 	.word	0x40012c00

08005d2c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005d2c:	b480      	push	{r7}
 8005d2e:	b087      	sub	sp, #28
 8005d30:	af00      	add	r7, sp, #0
 8005d32:	6078      	str	r0, [r7, #4]
 8005d34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	6a1b      	ldr	r3, [r3, #32]
 8005d3a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	6a1b      	ldr	r3, [r3, #32]
 8005d46:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	685b      	ldr	r3, [r3, #4]
 8005d4c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	69db      	ldr	r3, [r3, #28]
 8005d52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d5a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005d62:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005d64:	683b      	ldr	r3, [r7, #0]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	021b      	lsls	r3, r3, #8
 8005d6a:	68fa      	ldr	r2, [r7, #12]
 8005d6c:	4313      	orrs	r3, r2
 8005d6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005d70:	693b      	ldr	r3, [r7, #16]
 8005d72:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005d76:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005d78:	683b      	ldr	r3, [r7, #0]
 8005d7a:	689b      	ldr	r3, [r3, #8]
 8005d7c:	031b      	lsls	r3, r3, #12
 8005d7e:	693a      	ldr	r2, [r7, #16]
 8005d80:	4313      	orrs	r3, r2
 8005d82:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	4a0f      	ldr	r2, [pc, #60]	; (8005dc4 <TIM_OC4_SetConfig+0x98>)
 8005d88:	4293      	cmp	r3, r2
 8005d8a:	d109      	bne.n	8005da0 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005d8c:	697b      	ldr	r3, [r7, #20]
 8005d8e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005d92:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005d94:	683b      	ldr	r3, [r7, #0]
 8005d96:	695b      	ldr	r3, [r3, #20]
 8005d98:	019b      	lsls	r3, r3, #6
 8005d9a:	697a      	ldr	r2, [r7, #20]
 8005d9c:	4313      	orrs	r3, r2
 8005d9e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	697a      	ldr	r2, [r7, #20]
 8005da4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	68fa      	ldr	r2, [r7, #12]
 8005daa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005dac:	683b      	ldr	r3, [r7, #0]
 8005dae:	685a      	ldr	r2, [r3, #4]
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	693a      	ldr	r2, [r7, #16]
 8005db8:	621a      	str	r2, [r3, #32]
}
 8005dba:	bf00      	nop
 8005dbc:	371c      	adds	r7, #28
 8005dbe:	46bd      	mov	sp, r7
 8005dc0:	bc80      	pop	{r7}
 8005dc2:	4770      	bx	lr
 8005dc4:	40012c00 	.word	0x40012c00

08005dc8 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8005dc8:	b580      	push	{r7, lr}
 8005dca:	b086      	sub	sp, #24
 8005dcc:	af00      	add	r7, sp, #0
 8005dce:	6078      	str	r0, [r7, #4]
 8005dd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	689b      	ldr	r3, [r3, #8]
 8005dd8:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005dda:	697b      	ldr	r3, [r7, #20]
 8005ddc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005de0:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8005de2:	683b      	ldr	r3, [r7, #0]
 8005de4:	685b      	ldr	r3, [r3, #4]
 8005de6:	697a      	ldr	r2, [r7, #20]
 8005de8:	4313      	orrs	r3, r2
 8005dea:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8005dec:	697b      	ldr	r3, [r7, #20]
 8005dee:	f023 0307 	bic.w	r3, r3, #7
 8005df2:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8005df4:	683b      	ldr	r3, [r7, #0]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	697a      	ldr	r2, [r7, #20]
 8005dfa:	4313      	orrs	r3, r2
 8005dfc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	697a      	ldr	r2, [r7, #20]
 8005e04:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8005e06:	683b      	ldr	r3, [r7, #0]
 8005e08:	685b      	ldr	r3, [r3, #4]
 8005e0a:	2b70      	cmp	r3, #112	; 0x70
 8005e0c:	d01a      	beq.n	8005e44 <TIM_SlaveTimer_SetConfig+0x7c>
 8005e0e:	2b70      	cmp	r3, #112	; 0x70
 8005e10:	d860      	bhi.n	8005ed4 <TIM_SlaveTimer_SetConfig+0x10c>
 8005e12:	2b60      	cmp	r3, #96	; 0x60
 8005e14:	d054      	beq.n	8005ec0 <TIM_SlaveTimer_SetConfig+0xf8>
 8005e16:	2b60      	cmp	r3, #96	; 0x60
 8005e18:	d85c      	bhi.n	8005ed4 <TIM_SlaveTimer_SetConfig+0x10c>
 8005e1a:	2b50      	cmp	r3, #80	; 0x50
 8005e1c:	d046      	beq.n	8005eac <TIM_SlaveTimer_SetConfig+0xe4>
 8005e1e:	2b50      	cmp	r3, #80	; 0x50
 8005e20:	d858      	bhi.n	8005ed4 <TIM_SlaveTimer_SetConfig+0x10c>
 8005e22:	2b40      	cmp	r3, #64	; 0x40
 8005e24:	d019      	beq.n	8005e5a <TIM_SlaveTimer_SetConfig+0x92>
 8005e26:	2b40      	cmp	r3, #64	; 0x40
 8005e28:	d854      	bhi.n	8005ed4 <TIM_SlaveTimer_SetConfig+0x10c>
 8005e2a:	2b30      	cmp	r3, #48	; 0x30
 8005e2c:	d054      	beq.n	8005ed8 <TIM_SlaveTimer_SetConfig+0x110>
 8005e2e:	2b30      	cmp	r3, #48	; 0x30
 8005e30:	d850      	bhi.n	8005ed4 <TIM_SlaveTimer_SetConfig+0x10c>
 8005e32:	2b20      	cmp	r3, #32
 8005e34:	d050      	beq.n	8005ed8 <TIM_SlaveTimer_SetConfig+0x110>
 8005e36:	2b20      	cmp	r3, #32
 8005e38:	d84c      	bhi.n	8005ed4 <TIM_SlaveTimer_SetConfig+0x10c>
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d04c      	beq.n	8005ed8 <TIM_SlaveTimer_SetConfig+0x110>
 8005e3e:	2b10      	cmp	r3, #16
 8005e40:	d04a      	beq.n	8005ed8 <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      break;
 8005e42:	e047      	b.n	8005ed4 <TIM_SlaveTimer_SetConfig+0x10c>
      TIM_ETR_SetConfig(htim->Instance,
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	6818      	ldr	r0, [r3, #0]
 8005e48:	683b      	ldr	r3, [r7, #0]
 8005e4a:	68d9      	ldr	r1, [r3, #12]
 8005e4c:	683b      	ldr	r3, [r7, #0]
 8005e4e:	689a      	ldr	r2, [r3, #8]
 8005e50:	683b      	ldr	r3, [r7, #0]
 8005e52:	691b      	ldr	r3, [r3, #16]
 8005e54:	f000 f9ca 	bl	80061ec <TIM_ETR_SetConfig>
      break;
 8005e58:	e03f      	b.n	8005eda <TIM_SlaveTimer_SetConfig+0x112>
      if(sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8005e5a:	683b      	ldr	r3, [r7, #0]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	2b05      	cmp	r3, #5
 8005e60:	d101      	bne.n	8005e66 <TIM_SlaveTimer_SetConfig+0x9e>
        return HAL_ERROR;
 8005e62:	2301      	movs	r3, #1
 8005e64:	e03a      	b.n	8005edc <TIM_SlaveTimer_SetConfig+0x114>
      tmpccer = htim->Instance->CCER;
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	6a1b      	ldr	r3, [r3, #32]
 8005e6c:	613b      	str	r3, [r7, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	6a1a      	ldr	r2, [r3, #32]
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	f022 0201 	bic.w	r2, r2, #1
 8005e7c:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	699b      	ldr	r3, [r3, #24]
 8005e84:	60fb      	str	r3, [r7, #12]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005e8c:	60fb      	str	r3, [r7, #12]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8005e8e:	683b      	ldr	r3, [r7, #0]
 8005e90:	691b      	ldr	r3, [r3, #16]
 8005e92:	011b      	lsls	r3, r3, #4
 8005e94:	68fa      	ldr	r2, [r7, #12]
 8005e96:	4313      	orrs	r3, r2
 8005e98:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCMR1 = tmpccmr1;
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	68fa      	ldr	r2, [r7, #12]
 8005ea0:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	693a      	ldr	r2, [r7, #16]
 8005ea8:	621a      	str	r2, [r3, #32]
      break;
 8005eaa:	e016      	b.n	8005eda <TIM_SlaveTimer_SetConfig+0x112>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	6818      	ldr	r0, [r3, #0]
 8005eb0:	683b      	ldr	r3, [r7, #0]
 8005eb2:	6899      	ldr	r1, [r3, #8]
 8005eb4:	683b      	ldr	r3, [r7, #0]
 8005eb6:	691b      	ldr	r3, [r3, #16]
 8005eb8:	461a      	mov	r2, r3
 8005eba:	f000 f86d 	bl	8005f98 <TIM_TI1_ConfigInputStage>
      break;
 8005ebe:	e00c      	b.n	8005eda <TIM_SlaveTimer_SetConfig+0x112>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	6818      	ldr	r0, [r3, #0]
 8005ec4:	683b      	ldr	r3, [r7, #0]
 8005ec6:	6899      	ldr	r1, [r3, #8]
 8005ec8:	683b      	ldr	r3, [r7, #0]
 8005eca:	691b      	ldr	r3, [r3, #16]
 8005ecc:	461a      	mov	r2, r3
 8005ece:	f000 f8cd 	bl	800606c <TIM_TI2_ConfigInputStage>
      break;
 8005ed2:	e002      	b.n	8005eda <TIM_SlaveTimer_SetConfig+0x112>
      break;
 8005ed4:	bf00      	nop
 8005ed6:	e000      	b.n	8005eda <TIM_SlaveTimer_SetConfig+0x112>
      break;
 8005ed8:	bf00      	nop
  }
  return HAL_OK;
 8005eda:	2300      	movs	r3, #0
}
 8005edc:	4618      	mov	r0, r3
 8005ede:	3718      	adds	r7, #24
 8005ee0:	46bd      	mov	sp, r7
 8005ee2:	bd80      	pop	{r7, pc}

08005ee4 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8005ee4:	b480      	push	{r7}
 8005ee6:	b087      	sub	sp, #28
 8005ee8:	af00      	add	r7, sp, #0
 8005eea:	60f8      	str	r0, [r7, #12]
 8005eec:	60b9      	str	r1, [r7, #8]
 8005eee:	607a      	str	r2, [r7, #4]
 8005ef0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	6a1b      	ldr	r3, [r3, #32]
 8005ef6:	f023 0201 	bic.w	r2, r3, #1
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	699b      	ldr	r3, [r3, #24]
 8005f02:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	6a1b      	ldr	r3, [r3, #32]
 8005f08:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	4a1f      	ldr	r2, [pc, #124]	; (8005f8c <TIM_TI1_SetConfig+0xa8>)
 8005f0e:	4293      	cmp	r3, r2
 8005f10:	d00b      	beq.n	8005f2a <TIM_TI1_SetConfig+0x46>
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f18:	d007      	beq.n	8005f2a <TIM_TI1_SetConfig+0x46>
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	4a1c      	ldr	r2, [pc, #112]	; (8005f90 <TIM_TI1_SetConfig+0xac>)
 8005f1e:	4293      	cmp	r3, r2
 8005f20:	d003      	beq.n	8005f2a <TIM_TI1_SetConfig+0x46>
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	4a1b      	ldr	r2, [pc, #108]	; (8005f94 <TIM_TI1_SetConfig+0xb0>)
 8005f26:	4293      	cmp	r3, r2
 8005f28:	d101      	bne.n	8005f2e <TIM_TI1_SetConfig+0x4a>
 8005f2a:	2301      	movs	r3, #1
 8005f2c:	e000      	b.n	8005f30 <TIM_TI1_SetConfig+0x4c>
 8005f2e:	2300      	movs	r3, #0
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d008      	beq.n	8005f46 <TIM_TI1_SetConfig+0x62>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8005f34:	697b      	ldr	r3, [r7, #20]
 8005f36:	f023 0303 	bic.w	r3, r3, #3
 8005f3a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8005f3c:	697a      	ldr	r2, [r7, #20]
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	4313      	orrs	r3, r2
 8005f42:	617b      	str	r3, [r7, #20]
 8005f44:	e003      	b.n	8005f4e <TIM_TI1_SetConfig+0x6a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8005f46:	697b      	ldr	r3, [r7, #20]
 8005f48:	f043 0301 	orr.w	r3, r3, #1
 8005f4c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005f4e:	697b      	ldr	r3, [r7, #20]
 8005f50:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005f54:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8005f56:	683b      	ldr	r3, [r7, #0]
 8005f58:	011b      	lsls	r3, r3, #4
 8005f5a:	b2db      	uxtb	r3, r3
 8005f5c:	697a      	ldr	r2, [r7, #20]
 8005f5e:	4313      	orrs	r3, r2
 8005f60:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005f62:	693b      	ldr	r3, [r7, #16]
 8005f64:	f023 030a 	bic.w	r3, r3, #10
 8005f68:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8005f6a:	68bb      	ldr	r3, [r7, #8]
 8005f6c:	f003 030a 	and.w	r3, r3, #10
 8005f70:	693a      	ldr	r2, [r7, #16]
 8005f72:	4313      	orrs	r3, r2
 8005f74:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	697a      	ldr	r2, [r7, #20]
 8005f7a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	693a      	ldr	r2, [r7, #16]
 8005f80:	621a      	str	r2, [r3, #32]
}
 8005f82:	bf00      	nop
 8005f84:	371c      	adds	r7, #28
 8005f86:	46bd      	mov	sp, r7
 8005f88:	bc80      	pop	{r7}
 8005f8a:	4770      	bx	lr
 8005f8c:	40012c00 	.word	0x40012c00
 8005f90:	40000400 	.word	0x40000400
 8005f94:	40000800 	.word	0x40000800

08005f98 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005f98:	b480      	push	{r7}
 8005f9a:	b087      	sub	sp, #28
 8005f9c:	af00      	add	r7, sp, #0
 8005f9e:	60f8      	str	r0, [r7, #12]
 8005fa0:	60b9      	str	r1, [r7, #8]
 8005fa2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	6a1b      	ldr	r3, [r3, #32]
 8005fa8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	6a1b      	ldr	r3, [r3, #32]
 8005fae:	f023 0201 	bic.w	r2, r3, #1
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	699b      	ldr	r3, [r3, #24]
 8005fba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005fbc:	693b      	ldr	r3, [r7, #16]
 8005fbe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005fc2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	011b      	lsls	r3, r3, #4
 8005fc8:	693a      	ldr	r2, [r7, #16]
 8005fca:	4313      	orrs	r3, r2
 8005fcc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005fce:	697b      	ldr	r3, [r7, #20]
 8005fd0:	f023 030a 	bic.w	r3, r3, #10
 8005fd4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005fd6:	697a      	ldr	r2, [r7, #20]
 8005fd8:	68bb      	ldr	r3, [r7, #8]
 8005fda:	4313      	orrs	r3, r2
 8005fdc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	693a      	ldr	r2, [r7, #16]
 8005fe2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	697a      	ldr	r2, [r7, #20]
 8005fe8:	621a      	str	r2, [r3, #32]
}
 8005fea:	bf00      	nop
 8005fec:	371c      	adds	r7, #28
 8005fee:	46bd      	mov	sp, r7
 8005ff0:	bc80      	pop	{r7}
 8005ff2:	4770      	bx	lr

08005ff4 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005ff4:	b480      	push	{r7}
 8005ff6:	b087      	sub	sp, #28
 8005ff8:	af00      	add	r7, sp, #0
 8005ffa:	60f8      	str	r0, [r7, #12]
 8005ffc:	60b9      	str	r1, [r7, #8]
 8005ffe:	607a      	str	r2, [r7, #4]
 8006000:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	6a1b      	ldr	r3, [r3, #32]
 8006006:	f023 0210 	bic.w	r2, r3, #16
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	699b      	ldr	r3, [r3, #24]
 8006012:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	6a1b      	ldr	r3, [r3, #32]
 8006018:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800601a:	697b      	ldr	r3, [r7, #20]
 800601c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006020:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	021b      	lsls	r3, r3, #8
 8006026:	697a      	ldr	r2, [r7, #20]
 8006028:	4313      	orrs	r3, r2
 800602a:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800602c:	697b      	ldr	r3, [r7, #20]
 800602e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006032:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8006034:	683b      	ldr	r3, [r7, #0]
 8006036:	031b      	lsls	r3, r3, #12
 8006038:	b29b      	uxth	r3, r3
 800603a:	697a      	ldr	r2, [r7, #20]
 800603c:	4313      	orrs	r3, r2
 800603e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006040:	693b      	ldr	r3, [r7, #16]
 8006042:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006046:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8006048:	68bb      	ldr	r3, [r7, #8]
 800604a:	011b      	lsls	r3, r3, #4
 800604c:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8006050:	693a      	ldr	r2, [r7, #16]
 8006052:	4313      	orrs	r3, r2
 8006054:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	697a      	ldr	r2, [r7, #20]
 800605a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	693a      	ldr	r2, [r7, #16]
 8006060:	621a      	str	r2, [r3, #32]
}
 8006062:	bf00      	nop
 8006064:	371c      	adds	r7, #28
 8006066:	46bd      	mov	sp, r7
 8006068:	bc80      	pop	{r7}
 800606a:	4770      	bx	lr

0800606c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800606c:	b480      	push	{r7}
 800606e:	b087      	sub	sp, #28
 8006070:	af00      	add	r7, sp, #0
 8006072:	60f8      	str	r0, [r7, #12]
 8006074:	60b9      	str	r1, [r7, #8]
 8006076:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	6a1b      	ldr	r3, [r3, #32]
 800607c:	f023 0210 	bic.w	r2, r3, #16
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	699b      	ldr	r3, [r3, #24]
 8006088:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	6a1b      	ldr	r3, [r3, #32]
 800608e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006090:	697b      	ldr	r3, [r7, #20]
 8006092:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006096:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	031b      	lsls	r3, r3, #12
 800609c:	697a      	ldr	r2, [r7, #20]
 800609e:	4313      	orrs	r3, r2
 80060a0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80060a2:	693b      	ldr	r3, [r7, #16]
 80060a4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80060a8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80060aa:	68bb      	ldr	r3, [r7, #8]
 80060ac:	011b      	lsls	r3, r3, #4
 80060ae:	693a      	ldr	r2, [r7, #16]
 80060b0:	4313      	orrs	r3, r2
 80060b2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	697a      	ldr	r2, [r7, #20]
 80060b8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	693a      	ldr	r2, [r7, #16]
 80060be:	621a      	str	r2, [r3, #32]
}
 80060c0:	bf00      	nop
 80060c2:	371c      	adds	r7, #28
 80060c4:	46bd      	mov	sp, r7
 80060c6:	bc80      	pop	{r7}
 80060c8:	4770      	bx	lr

080060ca <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80060ca:	b480      	push	{r7}
 80060cc:	b087      	sub	sp, #28
 80060ce:	af00      	add	r7, sp, #0
 80060d0:	60f8      	str	r0, [r7, #12]
 80060d2:	60b9      	str	r1, [r7, #8]
 80060d4:	607a      	str	r2, [r7, #4]
 80060d6:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	6a1b      	ldr	r3, [r3, #32]
 80060dc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	69db      	ldr	r3, [r3, #28]
 80060e8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	6a1b      	ldr	r3, [r3, #32]
 80060ee:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80060f0:	697b      	ldr	r3, [r7, #20]
 80060f2:	f023 0303 	bic.w	r3, r3, #3
 80060f6:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 80060f8:	697a      	ldr	r2, [r7, #20]
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	4313      	orrs	r3, r2
 80060fe:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8006100:	697b      	ldr	r3, [r7, #20]
 8006102:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006106:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8006108:	683b      	ldr	r3, [r7, #0]
 800610a:	011b      	lsls	r3, r3, #4
 800610c:	b2db      	uxtb	r3, r3
 800610e:	697a      	ldr	r2, [r7, #20]
 8006110:	4313      	orrs	r3, r2
 8006112:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P);
 8006114:	693b      	ldr	r3, [r7, #16]
 8006116:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800611a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 800611c:	68bb      	ldr	r3, [r7, #8]
 800611e:	021b      	lsls	r3, r3, #8
 8006120:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006124:	693a      	ldr	r2, [r7, #16]
 8006126:	4313      	orrs	r3, r2
 8006128:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	697a      	ldr	r2, [r7, #20]
 800612e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	693a      	ldr	r2, [r7, #16]
 8006134:	621a      	str	r2, [r3, #32]
}
 8006136:	bf00      	nop
 8006138:	371c      	adds	r7, #28
 800613a:	46bd      	mov	sp, r7
 800613c:	bc80      	pop	{r7}
 800613e:	4770      	bx	lr

08006140 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006140:	b480      	push	{r7}
 8006142:	b087      	sub	sp, #28
 8006144:	af00      	add	r7, sp, #0
 8006146:	60f8      	str	r0, [r7, #12]
 8006148:	60b9      	str	r1, [r7, #8]
 800614a:	607a      	str	r2, [r7, #4]
 800614c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	6a1b      	ldr	r3, [r3, #32]
 8006152:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	69db      	ldr	r3, [r3, #28]
 800615e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	6a1b      	ldr	r3, [r3, #32]
 8006164:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8006166:	697b      	ldr	r3, [r7, #20]
 8006168:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800616c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	021b      	lsls	r3, r3, #8
 8006172:	697a      	ldr	r2, [r7, #20]
 8006174:	4313      	orrs	r3, r2
 8006176:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8006178:	697b      	ldr	r3, [r7, #20]
 800617a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800617e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8006180:	683b      	ldr	r3, [r7, #0]
 8006182:	031b      	lsls	r3, r3, #12
 8006184:	b29b      	uxth	r3, r3
 8006186:	697a      	ldr	r2, [r7, #20]
 8006188:	4313      	orrs	r3, r2
 800618a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P);
 800618c:	693b      	ldr	r3, [r7, #16]
 800618e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006192:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 8006194:	68bb      	ldr	r3, [r7, #8]
 8006196:	031b      	lsls	r3, r3, #12
 8006198:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800619c:	693a      	ldr	r2, [r7, #16]
 800619e:	4313      	orrs	r3, r2
 80061a0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	697a      	ldr	r2, [r7, #20]
 80061a6:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	693a      	ldr	r2, [r7, #16]
 80061ac:	621a      	str	r2, [r3, #32]
}
 80061ae:	bf00      	nop
 80061b0:	371c      	adds	r7, #28
 80061b2:	46bd      	mov	sp, r7
 80061b4:	bc80      	pop	{r7}
 80061b6:	4770      	bx	lr

080061b8 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80061b8:	b480      	push	{r7}
 80061ba:	b085      	sub	sp, #20
 80061bc:	af00      	add	r7, sp, #0
 80061be:	6078      	str	r0, [r7, #4]
 80061c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	689b      	ldr	r3, [r3, #8]
 80061c6:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061ce:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80061d0:	683a      	ldr	r2, [r7, #0]
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	4313      	orrs	r3, r2
 80061d6:	f043 0307 	orr.w	r3, r3, #7
 80061da:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	68fa      	ldr	r2, [r7, #12]
 80061e0:	609a      	str	r2, [r3, #8]
}
 80061e2:	bf00      	nop
 80061e4:	3714      	adds	r7, #20
 80061e6:	46bd      	mov	sp, r7
 80061e8:	bc80      	pop	{r7}
 80061ea:	4770      	bx	lr

080061ec <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80061ec:	b480      	push	{r7}
 80061ee:	b087      	sub	sp, #28
 80061f0:	af00      	add	r7, sp, #0
 80061f2:	60f8      	str	r0, [r7, #12]
 80061f4:	60b9      	str	r1, [r7, #8]
 80061f6:	607a      	str	r2, [r7, #4]
 80061f8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	689b      	ldr	r3, [r3, #8]
 80061fe:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006200:	697b      	ldr	r3, [r7, #20]
 8006202:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006206:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006208:	683b      	ldr	r3, [r7, #0]
 800620a:	021a      	lsls	r2, r3, #8
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	431a      	orrs	r2, r3
 8006210:	68bb      	ldr	r3, [r7, #8]
 8006212:	4313      	orrs	r3, r2
 8006214:	697a      	ldr	r2, [r7, #20]
 8006216:	4313      	orrs	r3, r2
 8006218:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	697a      	ldr	r2, [r7, #20]
 800621e:	609a      	str	r2, [r3, #8]
}
 8006220:	bf00      	nop
 8006222:	371c      	adds	r7, #28
 8006224:	46bd      	mov	sp, r7
 8006226:	bc80      	pop	{r7}
 8006228:	4770      	bx	lr

0800622a <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800622a:	b480      	push	{r7}
 800622c:	b087      	sub	sp, #28
 800622e:	af00      	add	r7, sp, #0
 8006230:	60f8      	str	r0, [r7, #12]
 8006232:	60b9      	str	r1, [r7, #8]
 8006234:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006236:	68bb      	ldr	r3, [r7, #8]
 8006238:	f003 031f 	and.w	r3, r3, #31
 800623c:	2201      	movs	r2, #1
 800623e:	fa02 f303 	lsl.w	r3, r2, r3
 8006242:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	6a1a      	ldr	r2, [r3, #32]
 8006248:	697b      	ldr	r3, [r7, #20]
 800624a:	43db      	mvns	r3, r3
 800624c:	401a      	ands	r2, r3
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	6a1a      	ldr	r2, [r3, #32]
 8006256:	68bb      	ldr	r3, [r7, #8]
 8006258:	f003 031f 	and.w	r3, r3, #31
 800625c:	6879      	ldr	r1, [r7, #4]
 800625e:	fa01 f303 	lsl.w	r3, r1, r3
 8006262:	431a      	orrs	r2, r3
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	621a      	str	r2, [r3, #32]
}
 8006268:	bf00      	nop
 800626a:	371c      	adds	r7, #28
 800626c:	46bd      	mov	sp, r7
 800626e:	bc80      	pop	{r7}
 8006270:	4770      	bx	lr

08006272 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006272:	b480      	push	{r7}
 8006274:	b085      	sub	sp, #20
 8006276:	af00      	add	r7, sp, #0
 8006278:	6078      	str	r0, [r7, #4]
 800627a:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006282:	2b01      	cmp	r3, #1
 8006284:	d101      	bne.n	800628a <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006286:	2302      	movs	r3, #2
 8006288:	e032      	b.n	80062f0 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	2201      	movs	r2, #1
 800628e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	2202      	movs	r2, #2
 8006296:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	685b      	ldr	r3, [r3, #4]
 80062a0:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	689b      	ldr	r3, [r3, #8]
 80062a8:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80062b0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80062b2:	683b      	ldr	r3, [r7, #0]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	68fa      	ldr	r2, [r7, #12]
 80062b8:	4313      	orrs	r3, r2
 80062ba:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 80062bc:	68bb      	ldr	r3, [r7, #8]
 80062be:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80062c2:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80062c4:	683b      	ldr	r3, [r7, #0]
 80062c6:	685b      	ldr	r3, [r3, #4]
 80062c8:	68ba      	ldr	r2, [r7, #8]
 80062ca:	4313      	orrs	r3, r2
 80062cc:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	68fa      	ldr	r2, [r7, #12]
 80062d4:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	68ba      	ldr	r2, [r7, #8]
 80062dc:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	2201      	movs	r2, #1
 80062e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	2200      	movs	r2, #0
 80062ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80062ee:	2300      	movs	r3, #0
}
 80062f0:	4618      	mov	r0, r3
 80062f2:	3714      	adds	r7, #20
 80062f4:	46bd      	mov	sp, r7
 80062f6:	bc80      	pop	{r7}
 80062f8:	4770      	bx	lr

080062fa <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80062fa:	b480      	push	{r7}
 80062fc:	b085      	sub	sp, #20
 80062fe:	af00      	add	r7, sp, #0
 8006300:	6078      	str	r0, [r7, #4]
 8006302:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006304:	2300      	movs	r3, #0
 8006306:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800630e:	2b01      	cmp	r3, #1
 8006310:	d101      	bne.n	8006316 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006312:	2302      	movs	r3, #2
 8006314:	e03d      	b.n	8006392 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	2201      	movs	r2, #1
 800631a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8006324:	683b      	ldr	r3, [r7, #0]
 8006326:	68db      	ldr	r3, [r3, #12]
 8006328:	4313      	orrs	r3, r2
 800632a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006332:	683b      	ldr	r3, [r7, #0]
 8006334:	689b      	ldr	r3, [r3, #8]
 8006336:	4313      	orrs	r3, r2
 8006338:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8006340:	683b      	ldr	r3, [r7, #0]
 8006342:	685b      	ldr	r3, [r3, #4]
 8006344:	4313      	orrs	r3, r2
 8006346:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800634e:	683b      	ldr	r3, [r7, #0]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	4313      	orrs	r3, r2
 8006354:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800635c:	683b      	ldr	r3, [r7, #0]
 800635e:	691b      	ldr	r3, [r3, #16]
 8006360:	4313      	orrs	r3, r2
 8006362:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800636a:	683b      	ldr	r3, [r7, #0]
 800636c:	695b      	ldr	r3, [r3, #20]
 800636e:	4313      	orrs	r3, r2
 8006370:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006378:	683b      	ldr	r3, [r7, #0]
 800637a:	69db      	ldr	r3, [r3, #28]
 800637c:	4313      	orrs	r3, r2
 800637e:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	68fa      	ldr	r2, [r7, #12]
 8006386:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	2200      	movs	r2, #0
 800638c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006390:	2300      	movs	r3, #0
}
 8006392:	4618      	mov	r0, r3
 8006394:	3714      	adds	r7, #20
 8006396:	46bd      	mov	sp, r7
 8006398:	bc80      	pop	{r7}
 800639a:	4770      	bx	lr

0800639c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800639c:	b480      	push	{r7}
 800639e:	b083      	sub	sp, #12
 80063a0:	af00      	add	r7, sp, #0
 80063a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80063a4:	bf00      	nop
 80063a6:	370c      	adds	r7, #12
 80063a8:	46bd      	mov	sp, r7
 80063aa:	bc80      	pop	{r7}
 80063ac:	4770      	bx	lr

080063ae <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80063ae:	b480      	push	{r7}
 80063b0:	b083      	sub	sp, #12
 80063b2:	af00      	add	r7, sp, #0
 80063b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80063b6:	bf00      	nop
 80063b8:	370c      	adds	r7, #12
 80063ba:	46bd      	mov	sp, r7
 80063bc:	bc80      	pop	{r7}
 80063be:	4770      	bx	lr

080063c0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80063c0:	b580      	push	{r7, lr}
 80063c2:	b082      	sub	sp, #8
 80063c4:	af00      	add	r7, sp, #0
 80063c6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d101      	bne.n	80063d2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80063ce:	2301      	movs	r3, #1
 80063d0:	e03f      	b.n	8006452 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80063d8:	b2db      	uxtb	r3, r3
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d106      	bne.n	80063ec <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	2200      	movs	r2, #0
 80063e2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80063e6:	6878      	ldr	r0, [r7, #4]
 80063e8:	f7fc fba6 	bl	8002b38 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	2224      	movs	r2, #36	; 0x24
 80063f0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	68da      	ldr	r2, [r3, #12]
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006402:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006404:	6878      	ldr	r0, [r7, #4]
 8006406:	f000 faa9 	bl	800695c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	691a      	ldr	r2, [r3, #16]
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006418:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	695a      	ldr	r2, [r3, #20]
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006428:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	68da      	ldr	r2, [r3, #12]
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006438:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	2200      	movs	r2, #0
 800643e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	2220      	movs	r2, #32
 8006444:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	2220      	movs	r2, #32
 800644c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8006450:	2300      	movs	r3, #0
}
 8006452:	4618      	mov	r0, r3
 8006454:	3708      	adds	r7, #8
 8006456:	46bd      	mov	sp, r7
 8006458:	bd80      	pop	{r7, pc}

0800645a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800645a:	b480      	push	{r7}
 800645c:	b085      	sub	sp, #20
 800645e:	af00      	add	r7, sp, #0
 8006460:	60f8      	str	r0, [r7, #12]
 8006462:	60b9      	str	r1, [r7, #8]
 8006464:	4613      	mov	r3, r2
 8006466:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800646e:	b2db      	uxtb	r3, r3
 8006470:	2b20      	cmp	r3, #32
 8006472:	d140      	bne.n	80064f6 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8006474:	68bb      	ldr	r3, [r7, #8]
 8006476:	2b00      	cmp	r3, #0
 8006478:	d002      	beq.n	8006480 <HAL_UART_Receive_IT+0x26>
 800647a:	88fb      	ldrh	r3, [r7, #6]
 800647c:	2b00      	cmp	r3, #0
 800647e:	d101      	bne.n	8006484 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8006480:	2301      	movs	r3, #1
 8006482:	e039      	b.n	80064f8 <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800648a:	2b01      	cmp	r3, #1
 800648c:	d101      	bne.n	8006492 <HAL_UART_Receive_IT+0x38>
 800648e:	2302      	movs	r3, #2
 8006490:	e032      	b.n	80064f8 <HAL_UART_Receive_IT+0x9e>
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	2201      	movs	r2, #1
 8006496:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	68ba      	ldr	r2, [r7, #8]
 800649e:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	88fa      	ldrh	r2, [r7, #6]
 80064a4:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	88fa      	ldrh	r2, [r7, #6]
 80064aa:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	2200      	movs	r2, #0
 80064b0:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	2222      	movs	r2, #34	; 0x22
 80064b6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	2200      	movs	r2, #0
 80064be:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	68da      	ldr	r2, [r3, #12]
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80064d0:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	695a      	ldr	r2, [r3, #20]
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	f042 0201 	orr.w	r2, r2, #1
 80064e0:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	68da      	ldr	r2, [r3, #12]
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	f042 0220 	orr.w	r2, r2, #32
 80064f0:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80064f2:	2300      	movs	r3, #0
 80064f4:	e000      	b.n	80064f8 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 80064f6:	2302      	movs	r3, #2
  }
}
 80064f8:	4618      	mov	r0, r3
 80064fa:	3714      	adds	r7, #20
 80064fc:	46bd      	mov	sp, r7
 80064fe:	bc80      	pop	{r7}
 8006500:	4770      	bx	lr
	...

08006504 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006504:	b580      	push	{r7, lr}
 8006506:	b088      	sub	sp, #32
 8006508:	af00      	add	r7, sp, #0
 800650a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	68db      	ldr	r3, [r3, #12]
 800651a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	695b      	ldr	r3, [r3, #20]
 8006522:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8006524:	2300      	movs	r3, #0
 8006526:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8006528:	2300      	movs	r3, #0
 800652a:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800652c:	69fb      	ldr	r3, [r7, #28]
 800652e:	f003 030f 	and.w	r3, r3, #15
 8006532:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8006534:	693b      	ldr	r3, [r7, #16]
 8006536:	2b00      	cmp	r3, #0
 8006538:	d10d      	bne.n	8006556 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800653a:	69fb      	ldr	r3, [r7, #28]
 800653c:	f003 0320 	and.w	r3, r3, #32
 8006540:	2b00      	cmp	r3, #0
 8006542:	d008      	beq.n	8006556 <HAL_UART_IRQHandler+0x52>
 8006544:	69bb      	ldr	r3, [r7, #24]
 8006546:	f003 0320 	and.w	r3, r3, #32
 800654a:	2b00      	cmp	r3, #0
 800654c:	d003      	beq.n	8006556 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800654e:	6878      	ldr	r0, [r7, #4]
 8006550:	f000 f982 	bl	8006858 <UART_Receive_IT>
      return;
 8006554:	e0cb      	b.n	80066ee <HAL_UART_IRQHandler+0x1ea>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006556:	693b      	ldr	r3, [r7, #16]
 8006558:	2b00      	cmp	r3, #0
 800655a:	f000 80ab 	beq.w	80066b4 <HAL_UART_IRQHandler+0x1b0>
 800655e:	697b      	ldr	r3, [r7, #20]
 8006560:	f003 0301 	and.w	r3, r3, #1
 8006564:	2b00      	cmp	r3, #0
 8006566:	d105      	bne.n	8006574 <HAL_UART_IRQHandler+0x70>
 8006568:	69bb      	ldr	r3, [r7, #24]
 800656a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800656e:	2b00      	cmp	r3, #0
 8006570:	f000 80a0 	beq.w	80066b4 <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006574:	69fb      	ldr	r3, [r7, #28]
 8006576:	f003 0301 	and.w	r3, r3, #1
 800657a:	2b00      	cmp	r3, #0
 800657c:	d00a      	beq.n	8006594 <HAL_UART_IRQHandler+0x90>
 800657e:	69bb      	ldr	r3, [r7, #24]
 8006580:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006584:	2b00      	cmp	r3, #0
 8006586:	d005      	beq.n	8006594 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800658c:	f043 0201 	orr.w	r2, r3, #1
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006594:	69fb      	ldr	r3, [r7, #28]
 8006596:	f003 0304 	and.w	r3, r3, #4
 800659a:	2b00      	cmp	r3, #0
 800659c:	d00a      	beq.n	80065b4 <HAL_UART_IRQHandler+0xb0>
 800659e:	697b      	ldr	r3, [r7, #20]
 80065a0:	f003 0301 	and.w	r3, r3, #1
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d005      	beq.n	80065b4 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065ac:	f043 0202 	orr.w	r2, r3, #2
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80065b4:	69fb      	ldr	r3, [r7, #28]
 80065b6:	f003 0302 	and.w	r3, r3, #2
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d00a      	beq.n	80065d4 <HAL_UART_IRQHandler+0xd0>
 80065be:	697b      	ldr	r3, [r7, #20]
 80065c0:	f003 0301 	and.w	r3, r3, #1
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d005      	beq.n	80065d4 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065cc:	f043 0204 	orr.w	r2, r3, #4
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80065d4:	69fb      	ldr	r3, [r7, #28]
 80065d6:	f003 0308 	and.w	r3, r3, #8
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d00a      	beq.n	80065f4 <HAL_UART_IRQHandler+0xf0>
 80065de:	697b      	ldr	r3, [r7, #20]
 80065e0:	f003 0301 	and.w	r3, r3, #1
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d005      	beq.n	80065f4 <HAL_UART_IRQHandler+0xf0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065ec:	f043 0208 	orr.w	r2, r3, #8
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d077      	beq.n	80066ec <HAL_UART_IRQHandler+0x1e8>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80065fc:	69fb      	ldr	r3, [r7, #28]
 80065fe:	f003 0320 	and.w	r3, r3, #32
 8006602:	2b00      	cmp	r3, #0
 8006604:	d007      	beq.n	8006616 <HAL_UART_IRQHandler+0x112>
 8006606:	69bb      	ldr	r3, [r7, #24]
 8006608:	f003 0320 	and.w	r3, r3, #32
 800660c:	2b00      	cmp	r3, #0
 800660e:	d002      	beq.n	8006616 <HAL_UART_IRQHandler+0x112>
      {
        UART_Receive_IT(huart);
 8006610:	6878      	ldr	r0, [r7, #4]
 8006612:	f000 f921 	bl	8006858 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	695b      	ldr	r3, [r3, #20]
 800661c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006620:	2b00      	cmp	r3, #0
 8006622:	bf14      	ite	ne
 8006624:	2301      	movne	r3, #1
 8006626:	2300      	moveq	r3, #0
 8006628:	b2db      	uxtb	r3, r3
 800662a:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006630:	f003 0308 	and.w	r3, r3, #8
 8006634:	2b00      	cmp	r3, #0
 8006636:	d102      	bne.n	800663e <HAL_UART_IRQHandler+0x13a>
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	2b00      	cmp	r3, #0
 800663c:	d031      	beq.n	80066a2 <HAL_UART_IRQHandler+0x19e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800663e:	6878      	ldr	r0, [r7, #4]
 8006640:	f000 f86c 	bl	800671c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	695b      	ldr	r3, [r3, #20]
 800664a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800664e:	2b00      	cmp	r3, #0
 8006650:	d023      	beq.n	800669a <HAL_UART_IRQHandler+0x196>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	695a      	ldr	r2, [r3, #20]
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006660:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006666:	2b00      	cmp	r3, #0
 8006668:	d013      	beq.n	8006692 <HAL_UART_IRQHandler+0x18e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800666e:	4a21      	ldr	r2, [pc, #132]	; (80066f4 <HAL_UART_IRQHandler+0x1f0>)
 8006670:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006676:	4618      	mov	r0, r3
 8006678:	f7fd fab4 	bl	8003be4 <HAL_DMA_Abort_IT>
 800667c:	4603      	mov	r3, r0
 800667e:	2b00      	cmp	r3, #0
 8006680:	d016      	beq.n	80066b0 <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006686:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006688:	687a      	ldr	r2, [r7, #4]
 800668a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800668c:	4610      	mov	r0, r2
 800668e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006690:	e00e      	b.n	80066b0 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006692:	6878      	ldr	r0, [r7, #4]
 8006694:	f000 f839 	bl	800670a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006698:	e00a      	b.n	80066b0 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800669a:	6878      	ldr	r0, [r7, #4]
 800669c:	f000 f835 	bl	800670a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80066a0:	e006      	b.n	80066b0 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80066a2:	6878      	ldr	r0, [r7, #4]
 80066a4:	f000 f831 	bl	800670a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	2200      	movs	r2, #0
 80066ac:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 80066ae:	e01d      	b.n	80066ec <HAL_UART_IRQHandler+0x1e8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80066b0:	bf00      	nop
    return;
 80066b2:	e01b      	b.n	80066ec <HAL_UART_IRQHandler+0x1e8>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80066b4:	69fb      	ldr	r3, [r7, #28]
 80066b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d008      	beq.n	80066d0 <HAL_UART_IRQHandler+0x1cc>
 80066be:	69bb      	ldr	r3, [r7, #24]
 80066c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d003      	beq.n	80066d0 <HAL_UART_IRQHandler+0x1cc>
  {
    UART_Transmit_IT(huart);
 80066c8:	6878      	ldr	r0, [r7, #4]
 80066ca:	f000 f858 	bl	800677e <UART_Transmit_IT>
    return;
 80066ce:	e00e      	b.n	80066ee <HAL_UART_IRQHandler+0x1ea>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80066d0:	69fb      	ldr	r3, [r7, #28]
 80066d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d009      	beq.n	80066ee <HAL_UART_IRQHandler+0x1ea>
 80066da:	69bb      	ldr	r3, [r7, #24]
 80066dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d004      	beq.n	80066ee <HAL_UART_IRQHandler+0x1ea>
  {
    UART_EndTransmit_IT(huart);
 80066e4:	6878      	ldr	r0, [r7, #4]
 80066e6:	f000 f89f 	bl	8006828 <UART_EndTransmit_IT>
    return;
 80066ea:	e000      	b.n	80066ee <HAL_UART_IRQHandler+0x1ea>
    return;
 80066ec:	bf00      	nop
  }
}
 80066ee:	3720      	adds	r7, #32
 80066f0:	46bd      	mov	sp, r7
 80066f2:	bd80      	pop	{r7, pc}
 80066f4:	08006757 	.word	0x08006757

080066f8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80066f8:	b480      	push	{r7}
 80066fa:	b083      	sub	sp, #12
 80066fc:	af00      	add	r7, sp, #0
 80066fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006700:	bf00      	nop
 8006702:	370c      	adds	r7, #12
 8006704:	46bd      	mov	sp, r7
 8006706:	bc80      	pop	{r7}
 8006708:	4770      	bx	lr

0800670a <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800670a:	b480      	push	{r7}
 800670c:	b083      	sub	sp, #12
 800670e:	af00      	add	r7, sp, #0
 8006710:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006712:	bf00      	nop
 8006714:	370c      	adds	r7, #12
 8006716:	46bd      	mov	sp, r7
 8006718:	bc80      	pop	{r7}
 800671a:	4770      	bx	lr

0800671c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800671c:	b480      	push	{r7}
 800671e:	b083      	sub	sp, #12
 8006720:	af00      	add	r7, sp, #0
 8006722:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	68da      	ldr	r2, [r3, #12]
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006732:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	695a      	ldr	r2, [r3, #20]
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	f022 0201 	bic.w	r2, r2, #1
 8006742:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	2220      	movs	r2, #32
 8006748:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 800674c:	bf00      	nop
 800674e:	370c      	adds	r7, #12
 8006750:	46bd      	mov	sp, r7
 8006752:	bc80      	pop	{r7}
 8006754:	4770      	bx	lr

08006756 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006756:	b580      	push	{r7, lr}
 8006758:	b084      	sub	sp, #16
 800675a:	af00      	add	r7, sp, #0
 800675c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006762:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	2200      	movs	r2, #0
 8006768:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	2200      	movs	r2, #0
 800676e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006770:	68f8      	ldr	r0, [r7, #12]
 8006772:	f7ff ffca 	bl	800670a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006776:	bf00      	nop
 8006778:	3710      	adds	r7, #16
 800677a:	46bd      	mov	sp, r7
 800677c:	bd80      	pop	{r7, pc}

0800677e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800677e:	b480      	push	{r7}
 8006780:	b085      	sub	sp, #20
 8006782:	af00      	add	r7, sp, #0
 8006784:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800678c:	b2db      	uxtb	r3, r3
 800678e:	2b21      	cmp	r3, #33	; 0x21
 8006790:	d144      	bne.n	800681c <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	689b      	ldr	r3, [r3, #8]
 8006796:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800679a:	d11a      	bne.n	80067d2 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	6a1b      	ldr	r3, [r3, #32]
 80067a0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	881b      	ldrh	r3, [r3, #0]
 80067a6:	461a      	mov	r2, r3
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80067b0:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	691b      	ldr	r3, [r3, #16]
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d105      	bne.n	80067c6 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	6a1b      	ldr	r3, [r3, #32]
 80067be:	1c9a      	adds	r2, r3, #2
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	621a      	str	r2, [r3, #32]
 80067c4:	e00e      	b.n	80067e4 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	6a1b      	ldr	r3, [r3, #32]
 80067ca:	1c5a      	adds	r2, r3, #1
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	621a      	str	r2, [r3, #32]
 80067d0:	e008      	b.n	80067e4 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	6a1b      	ldr	r3, [r3, #32]
 80067d6:	1c59      	adds	r1, r3, #1
 80067d8:	687a      	ldr	r2, [r7, #4]
 80067da:	6211      	str	r1, [r2, #32]
 80067dc:	781a      	ldrb	r2, [r3, #0]
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80067e8:	b29b      	uxth	r3, r3
 80067ea:	3b01      	subs	r3, #1
 80067ec:	b29b      	uxth	r3, r3
 80067ee:	687a      	ldr	r2, [r7, #4]
 80067f0:	4619      	mov	r1, r3
 80067f2:	84d1      	strh	r1, [r2, #38]	; 0x26
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d10f      	bne.n	8006818 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	68da      	ldr	r2, [r3, #12]
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006806:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	68da      	ldr	r2, [r3, #12]
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006816:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006818:	2300      	movs	r3, #0
 800681a:	e000      	b.n	800681e <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800681c:	2302      	movs	r3, #2
  }
}
 800681e:	4618      	mov	r0, r3
 8006820:	3714      	adds	r7, #20
 8006822:	46bd      	mov	sp, r7
 8006824:	bc80      	pop	{r7}
 8006826:	4770      	bx	lr

08006828 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006828:	b580      	push	{r7, lr}
 800682a:	b082      	sub	sp, #8
 800682c:	af00      	add	r7, sp, #0
 800682e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	68da      	ldr	r2, [r3, #12]
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800683e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	2220      	movs	r2, #32
 8006844:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006848:	6878      	ldr	r0, [r7, #4]
 800684a:	f7ff ff55 	bl	80066f8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800684e:	2300      	movs	r3, #0
}
 8006850:	4618      	mov	r0, r3
 8006852:	3708      	adds	r7, #8
 8006854:	46bd      	mov	sp, r7
 8006856:	bd80      	pop	{r7, pc}

08006858 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006858:	b580      	push	{r7, lr}
 800685a:	b084      	sub	sp, #16
 800685c:	af00      	add	r7, sp, #0
 800685e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8006866:	b2db      	uxtb	r3, r3
 8006868:	2b22      	cmp	r3, #34	; 0x22
 800686a:	d171      	bne.n	8006950 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	689b      	ldr	r3, [r3, #8]
 8006870:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006874:	d123      	bne.n	80068be <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800687a:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	691b      	ldr	r3, [r3, #16]
 8006880:	2b00      	cmp	r3, #0
 8006882:	d10e      	bne.n	80068a2 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	685b      	ldr	r3, [r3, #4]
 800688a:	b29b      	uxth	r3, r3
 800688c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006890:	b29a      	uxth	r2, r3
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800689a:	1c9a      	adds	r2, r3, #2
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	629a      	str	r2, [r3, #40]	; 0x28
 80068a0:	e029      	b.n	80068f6 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	685b      	ldr	r3, [r3, #4]
 80068a8:	b29b      	uxth	r3, r3
 80068aa:	b2db      	uxtb	r3, r3
 80068ac:	b29a      	uxth	r2, r3
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068b6:	1c5a      	adds	r2, r3, #1
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	629a      	str	r2, [r3, #40]	; 0x28
 80068bc:	e01b      	b.n	80068f6 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	691b      	ldr	r3, [r3, #16]
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d10a      	bne.n	80068dc <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	6858      	ldr	r0, [r3, #4]
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068d0:	1c59      	adds	r1, r3, #1
 80068d2:	687a      	ldr	r2, [r7, #4]
 80068d4:	6291      	str	r1, [r2, #40]	; 0x28
 80068d6:	b2c2      	uxtb	r2, r0
 80068d8:	701a      	strb	r2, [r3, #0]
 80068da:	e00c      	b.n	80068f6 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	685b      	ldr	r3, [r3, #4]
 80068e2:	b2da      	uxtb	r2, r3
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068e8:	1c58      	adds	r0, r3, #1
 80068ea:	6879      	ldr	r1, [r7, #4]
 80068ec:	6288      	str	r0, [r1, #40]	; 0x28
 80068ee:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80068f2:	b2d2      	uxtb	r2, r2
 80068f4:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80068fa:	b29b      	uxth	r3, r3
 80068fc:	3b01      	subs	r3, #1
 80068fe:	b29b      	uxth	r3, r3
 8006900:	687a      	ldr	r2, [r7, #4]
 8006902:	4619      	mov	r1, r3
 8006904:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006906:	2b00      	cmp	r3, #0
 8006908:	d120      	bne.n	800694c <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	68da      	ldr	r2, [r3, #12]
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	f022 0220 	bic.w	r2, r2, #32
 8006918:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	68da      	ldr	r2, [r3, #12]
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006928:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	695a      	ldr	r2, [r3, #20]
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	f022 0201 	bic.w	r2, r2, #1
 8006938:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	2220      	movs	r2, #32
 800693e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8006942:	6878      	ldr	r0, [r7, #4]
 8006944:	f7fa ffb4 	bl	80018b0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8006948:	2300      	movs	r3, #0
 800694a:	e002      	b.n	8006952 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 800694c:	2300      	movs	r3, #0
 800694e:	e000      	b.n	8006952 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8006950:	2302      	movs	r3, #2
  }
}
 8006952:	4618      	mov	r0, r3
 8006954:	3710      	adds	r7, #16
 8006956:	46bd      	mov	sp, r7
 8006958:	bd80      	pop	{r7, pc}
	...

0800695c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800695c:	b580      	push	{r7, lr}
 800695e:	b084      	sub	sp, #16
 8006960:	af00      	add	r7, sp, #0
 8006962:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	691b      	ldr	r3, [r3, #16]
 800696a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	68da      	ldr	r2, [r3, #12]
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	430a      	orrs	r2, r1
 8006978:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	689a      	ldr	r2, [r3, #8]
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	691b      	ldr	r3, [r3, #16]
 8006982:	431a      	orrs	r2, r3
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	695b      	ldr	r3, [r3, #20]
 8006988:	4313      	orrs	r3, r2
 800698a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	68db      	ldr	r3, [r3, #12]
 8006992:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8006996:	f023 030c 	bic.w	r3, r3, #12
 800699a:	687a      	ldr	r2, [r7, #4]
 800699c:	6812      	ldr	r2, [r2, #0]
 800699e:	68f9      	ldr	r1, [r7, #12]
 80069a0:	430b      	orrs	r3, r1
 80069a2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	695b      	ldr	r3, [r3, #20]
 80069aa:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	699a      	ldr	r2, [r3, #24]
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	430a      	orrs	r2, r1
 80069b8:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	4a52      	ldr	r2, [pc, #328]	; (8006b08 <UART_SetConfig+0x1ac>)
 80069c0:	4293      	cmp	r3, r2
 80069c2:	d14e      	bne.n	8006a62 <UART_SetConfig+0x106>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80069c4:	f7fe f870 	bl	8004aa8 <HAL_RCC_GetPCLK2Freq>
 80069c8:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80069ca:	68ba      	ldr	r2, [r7, #8]
 80069cc:	4613      	mov	r3, r2
 80069ce:	009b      	lsls	r3, r3, #2
 80069d0:	4413      	add	r3, r2
 80069d2:	009a      	lsls	r2, r3, #2
 80069d4:	441a      	add	r2, r3
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	685b      	ldr	r3, [r3, #4]
 80069da:	009b      	lsls	r3, r3, #2
 80069dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80069e0:	4a4a      	ldr	r2, [pc, #296]	; (8006b0c <UART_SetConfig+0x1b0>)
 80069e2:	fba2 2303 	umull	r2, r3, r2, r3
 80069e6:	095b      	lsrs	r3, r3, #5
 80069e8:	0119      	lsls	r1, r3, #4
 80069ea:	68ba      	ldr	r2, [r7, #8]
 80069ec:	4613      	mov	r3, r2
 80069ee:	009b      	lsls	r3, r3, #2
 80069f0:	4413      	add	r3, r2
 80069f2:	009a      	lsls	r2, r3, #2
 80069f4:	441a      	add	r2, r3
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	685b      	ldr	r3, [r3, #4]
 80069fa:	009b      	lsls	r3, r3, #2
 80069fc:	fbb2 f2f3 	udiv	r2, r2, r3
 8006a00:	4b42      	ldr	r3, [pc, #264]	; (8006b0c <UART_SetConfig+0x1b0>)
 8006a02:	fba3 0302 	umull	r0, r3, r3, r2
 8006a06:	095b      	lsrs	r3, r3, #5
 8006a08:	2064      	movs	r0, #100	; 0x64
 8006a0a:	fb00 f303 	mul.w	r3, r0, r3
 8006a0e:	1ad3      	subs	r3, r2, r3
 8006a10:	011b      	lsls	r3, r3, #4
 8006a12:	3332      	adds	r3, #50	; 0x32
 8006a14:	4a3d      	ldr	r2, [pc, #244]	; (8006b0c <UART_SetConfig+0x1b0>)
 8006a16:	fba2 2303 	umull	r2, r3, r2, r3
 8006a1a:	095b      	lsrs	r3, r3, #5
 8006a1c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006a20:	4419      	add	r1, r3
 8006a22:	68ba      	ldr	r2, [r7, #8]
 8006a24:	4613      	mov	r3, r2
 8006a26:	009b      	lsls	r3, r3, #2
 8006a28:	4413      	add	r3, r2
 8006a2a:	009a      	lsls	r2, r3, #2
 8006a2c:	441a      	add	r2, r3
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	685b      	ldr	r3, [r3, #4]
 8006a32:	009b      	lsls	r3, r3, #2
 8006a34:	fbb2 f2f3 	udiv	r2, r2, r3
 8006a38:	4b34      	ldr	r3, [pc, #208]	; (8006b0c <UART_SetConfig+0x1b0>)
 8006a3a:	fba3 0302 	umull	r0, r3, r3, r2
 8006a3e:	095b      	lsrs	r3, r3, #5
 8006a40:	2064      	movs	r0, #100	; 0x64
 8006a42:	fb00 f303 	mul.w	r3, r0, r3
 8006a46:	1ad3      	subs	r3, r2, r3
 8006a48:	011b      	lsls	r3, r3, #4
 8006a4a:	3332      	adds	r3, #50	; 0x32
 8006a4c:	4a2f      	ldr	r2, [pc, #188]	; (8006b0c <UART_SetConfig+0x1b0>)
 8006a4e:	fba2 2303 	umull	r2, r3, r2, r3
 8006a52:	095b      	lsrs	r3, r3, #5
 8006a54:	f003 020f 	and.w	r2, r3, #15
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	440a      	add	r2, r1
 8006a5e:	609a      	str	r2, [r3, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 8006a60:	e04d      	b.n	8006afe <UART_SetConfig+0x1a2>
    pclk = HAL_RCC_GetPCLK1Freq();
 8006a62:	f7fe f80d 	bl	8004a80 <HAL_RCC_GetPCLK1Freq>
 8006a66:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006a68:	68ba      	ldr	r2, [r7, #8]
 8006a6a:	4613      	mov	r3, r2
 8006a6c:	009b      	lsls	r3, r3, #2
 8006a6e:	4413      	add	r3, r2
 8006a70:	009a      	lsls	r2, r3, #2
 8006a72:	441a      	add	r2, r3
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	685b      	ldr	r3, [r3, #4]
 8006a78:	009b      	lsls	r3, r3, #2
 8006a7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a7e:	4a23      	ldr	r2, [pc, #140]	; (8006b0c <UART_SetConfig+0x1b0>)
 8006a80:	fba2 2303 	umull	r2, r3, r2, r3
 8006a84:	095b      	lsrs	r3, r3, #5
 8006a86:	0119      	lsls	r1, r3, #4
 8006a88:	68ba      	ldr	r2, [r7, #8]
 8006a8a:	4613      	mov	r3, r2
 8006a8c:	009b      	lsls	r3, r3, #2
 8006a8e:	4413      	add	r3, r2
 8006a90:	009a      	lsls	r2, r3, #2
 8006a92:	441a      	add	r2, r3
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	685b      	ldr	r3, [r3, #4]
 8006a98:	009b      	lsls	r3, r3, #2
 8006a9a:	fbb2 f2f3 	udiv	r2, r2, r3
 8006a9e:	4b1b      	ldr	r3, [pc, #108]	; (8006b0c <UART_SetConfig+0x1b0>)
 8006aa0:	fba3 0302 	umull	r0, r3, r3, r2
 8006aa4:	095b      	lsrs	r3, r3, #5
 8006aa6:	2064      	movs	r0, #100	; 0x64
 8006aa8:	fb00 f303 	mul.w	r3, r0, r3
 8006aac:	1ad3      	subs	r3, r2, r3
 8006aae:	011b      	lsls	r3, r3, #4
 8006ab0:	3332      	adds	r3, #50	; 0x32
 8006ab2:	4a16      	ldr	r2, [pc, #88]	; (8006b0c <UART_SetConfig+0x1b0>)
 8006ab4:	fba2 2303 	umull	r2, r3, r2, r3
 8006ab8:	095b      	lsrs	r3, r3, #5
 8006aba:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006abe:	4419      	add	r1, r3
 8006ac0:	68ba      	ldr	r2, [r7, #8]
 8006ac2:	4613      	mov	r3, r2
 8006ac4:	009b      	lsls	r3, r3, #2
 8006ac6:	4413      	add	r3, r2
 8006ac8:	009a      	lsls	r2, r3, #2
 8006aca:	441a      	add	r2, r3
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	685b      	ldr	r3, [r3, #4]
 8006ad0:	009b      	lsls	r3, r3, #2
 8006ad2:	fbb2 f2f3 	udiv	r2, r2, r3
 8006ad6:	4b0d      	ldr	r3, [pc, #52]	; (8006b0c <UART_SetConfig+0x1b0>)
 8006ad8:	fba3 0302 	umull	r0, r3, r3, r2
 8006adc:	095b      	lsrs	r3, r3, #5
 8006ade:	2064      	movs	r0, #100	; 0x64
 8006ae0:	fb00 f303 	mul.w	r3, r0, r3
 8006ae4:	1ad3      	subs	r3, r2, r3
 8006ae6:	011b      	lsls	r3, r3, #4
 8006ae8:	3332      	adds	r3, #50	; 0x32
 8006aea:	4a08      	ldr	r2, [pc, #32]	; (8006b0c <UART_SetConfig+0x1b0>)
 8006aec:	fba2 2303 	umull	r2, r3, r2, r3
 8006af0:	095b      	lsrs	r3, r3, #5
 8006af2:	f003 020f 	and.w	r2, r3, #15
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	440a      	add	r2, r1
 8006afc:	609a      	str	r2, [r3, #8]
}
 8006afe:	bf00      	nop
 8006b00:	3710      	adds	r7, #16
 8006b02:	46bd      	mov	sp, r7
 8006b04:	bd80      	pop	{r7, pc}
 8006b06:	bf00      	nop
 8006b08:	40013800 	.word	0x40013800
 8006b0c:	51eb851f 	.word	0x51eb851f

08006b10 <memset>:
 8006b10:	4603      	mov	r3, r0
 8006b12:	4402      	add	r2, r0
 8006b14:	4293      	cmp	r3, r2
 8006b16:	d100      	bne.n	8006b1a <memset+0xa>
 8006b18:	4770      	bx	lr
 8006b1a:	f803 1b01 	strb.w	r1, [r3], #1
 8006b1e:	e7f9      	b.n	8006b14 <memset+0x4>

08006b20 <__libc_init_array>:
 8006b20:	b570      	push	{r4, r5, r6, lr}
 8006b22:	2600      	movs	r6, #0
 8006b24:	4d0c      	ldr	r5, [pc, #48]	; (8006b58 <__libc_init_array+0x38>)
 8006b26:	4c0d      	ldr	r4, [pc, #52]	; (8006b5c <__libc_init_array+0x3c>)
 8006b28:	1b64      	subs	r4, r4, r5
 8006b2a:	10a4      	asrs	r4, r4, #2
 8006b2c:	42a6      	cmp	r6, r4
 8006b2e:	d109      	bne.n	8006b44 <__libc_init_array+0x24>
 8006b30:	f000 f81a 	bl	8006b68 <_init>
 8006b34:	2600      	movs	r6, #0
 8006b36:	4d0a      	ldr	r5, [pc, #40]	; (8006b60 <__libc_init_array+0x40>)
 8006b38:	4c0a      	ldr	r4, [pc, #40]	; (8006b64 <__libc_init_array+0x44>)
 8006b3a:	1b64      	subs	r4, r4, r5
 8006b3c:	10a4      	asrs	r4, r4, #2
 8006b3e:	42a6      	cmp	r6, r4
 8006b40:	d105      	bne.n	8006b4e <__libc_init_array+0x2e>
 8006b42:	bd70      	pop	{r4, r5, r6, pc}
 8006b44:	f855 3b04 	ldr.w	r3, [r5], #4
 8006b48:	4798      	blx	r3
 8006b4a:	3601      	adds	r6, #1
 8006b4c:	e7ee      	b.n	8006b2c <__libc_init_array+0xc>
 8006b4e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006b52:	4798      	blx	r3
 8006b54:	3601      	adds	r6, #1
 8006b56:	e7f2      	b.n	8006b3e <__libc_init_array+0x1e>
 8006b58:	08006ba8 	.word	0x08006ba8
 8006b5c:	08006ba8 	.word	0x08006ba8
 8006b60:	08006ba8 	.word	0x08006ba8
 8006b64:	08006bac 	.word	0x08006bac

08006b68 <_init>:
 8006b68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b6a:	bf00      	nop
 8006b6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006b6e:	bc08      	pop	{r3}
 8006b70:	469e      	mov	lr, r3
 8006b72:	4770      	bx	lr

08006b74 <_fini>:
 8006b74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b76:	bf00      	nop
 8006b78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006b7a:	bc08      	pop	{r3}
 8006b7c:	469e      	mov	lr, r3
 8006b7e:	4770      	bx	lr
